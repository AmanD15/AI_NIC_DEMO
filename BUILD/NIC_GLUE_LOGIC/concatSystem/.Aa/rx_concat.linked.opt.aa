$pipe  rx_in_pipe : $uint<10>  $depth 2 
// can point into 
$pipe  rx_out_pipe : $uint<73>  $depth 2 
// can point into 
$module [global_storage_initializer_]
$in ()
$out ()
$is
{
  $null
}
$module [rx_concat]
$in ()
$out ()
$is
{
  $branchblock [loop]
  {
    $dopipeline $depth 7 $buffering 1
    $fullrate 
    $merge $entry $loopback 
    $phi CIRCULANT := 			  ((($bitcast ($uint<64>) _b0  ) && ($bitcast ($uint<4>) _b1  )) && ($bitcast ($uint<8>) _b1  )) $on   $entry 			  next_CIRCULANT $on   $loopback  $barrier
    // type of target is $uint<76>
    $phi RX := 			  rx_in_pipe $on   $entry ,   $loopback 
    // type of target is $uint<10>
    $endmerge
    $volatile collected_dword := ( $slice CIRCULANT 75 12 )  $buffering 1
    $volatile running_byte_count := ( $slice CIRCULANT 11 8 )  $buffering 1
    $volatile running_byte_mask := ( $slice CIRCULANT 7 0 )  $buffering 1
    $volatile rx_last := ( $slice RX 9 9 )  $buffering 1
    $volatile rx_data := ( $slice RX 8 1 )  $buffering 1
    $volatile send_to_pipe := (rx_last | (running_byte_count == 8 )) $buffering 1
    $volatile dword_to_pipe := (( $slice collected_dword 55 0 )  && rx_data) $buffering 1
    $volatile next_collected_dword := ( $mux send_to_pipe ($bitcast ($uint<64>) _b0  )  dword_to_pipe )  $buffering 1
    $volatile next_running_byte_count := ( $mux send_to_pipe ($bitcast ($uint<4>) _b1  )  (running_byte_count + 1 ) )  $buffering 1
    $volatile next_running_byte_mask := ( $mux send_to_pipe ($bitcast ($uint<8>) _b1  )  (( $slice running_byte_mask 6 0 )  && ($bitcast ($uint<1>) _b1  )) )  $buffering 1
    $volatile left_shift_amount := ($bitcast ($uint<64>) ((8  - running_byte_count) && ($bitcast ($uint<3>) _b0  )) ) $buffering 1
    $volatile data_to_pipe := ( $mux (send_to_pipe & ( ~ rx_last )) dword_to_pipe  (dword_to_pipe << left_shift_amount) )  $buffering 1
    $volatile byte_mask_to_pipe := ( $mux (send_to_pipe & ( ~ rx_last )) ( ~ ($bitcast ($uint<8>) _b0  ) )  (running_byte_mask << ($bitcast ($uint<8>) (8  - running_byte_count) )) )  $buffering 1
    $volatile next_CIRCULANT := ((next_collected_dword && next_running_byte_count) && next_running_byte_mask) $buffering 1
    $volatile to_pipe := ((rx_last && data_to_pipe) && byte_mask_to_pipe) $buffering 1
    $guard (send_to_pipe) rx_out_pipe := to_pipe $buffering 1// bits of buffering = 73. 
    $while 1 
  }
}
// use of gated clocks in modules 
