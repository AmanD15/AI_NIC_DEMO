$pipe  tx_in_pipe : $uint<73>  $depth 2 
// can point into 
$pipe  tx_out_pipe : $uint<10>  $depth 2 
// can point into 
$module [global_storage_initializer_]
$in ()
$out ()
$is
{
  $null
}
$module [tx_deconcat]
$in ()
$out ()
$is
{
  $branchblock [loop]
  {
    $dopipeline $depth 7 $buffering 1
    $merge $entry $loopback 
    $endmerge
    RX := tx_in_pipe $buffering 1// bits of buffering = 73. 
    $volatile tlast := ( $slice RX 72 72 )  $buffering 1
    $volatile d0 := ( $slice RX 71 64 )  $buffering 1
    $volatile d1 := ( $slice RX 63 56 )  $buffering 1
    $volatile d2 := ( $slice RX 55 48 )  $buffering 1
    $volatile d3 := ( $slice RX 47 40 )  $buffering 1
    $volatile d4 := ( $slice RX 39 32 )  $buffering 1
    $volatile d5 := ( $slice RX 31 24 )  $buffering 1
    $volatile d6 := ( $slice RX 23 16 )  $buffering 1
    $volatile d7 := ( $slice RX 15 8 )  $buffering 1
    $volatile b0 := ( $slice RX 7 7 )  $buffering 1
    $volatile b1 := ( $slice RX 6 6 )  $buffering 1
    $volatile b2 := ( $slice RX 5 5 )  $buffering 1
    $volatile b3 := ( $slice RX 4 4 )  $buffering 1
    $volatile b4 := ( $slice RX 3 3 )  $buffering 1
    $volatile b5 := ( $slice RX 2 2 )  $buffering 1
    $volatile b6 := ( $slice RX 1 1 )  $buffering 1
    $volatile b7 := ( $slice RX 0 0 )  $buffering 1
    $volatile s0 := (((tlast & (b0 & ( ~ b1 ))) && d0) && ($bitcast ($uint<1>) _b1  )) $buffering 1
    $volatile s1 := (((tlast & (b1 & ( ~ b2 ))) && d1) && ($bitcast ($uint<1>) _b1  )) $buffering 1
    $volatile s2 := (((tlast & (b2 & ( ~ b3 ))) && d2) && ($bitcast ($uint<1>) _b1  )) $buffering 1
    $volatile s3 := (((tlast & (b3 & ( ~ b4 ))) && d3) && ($bitcast ($uint<1>) _b1  )) $buffering 1
    $volatile s4 := (((tlast & (b4 & ( ~ b5 ))) && d4) && ($bitcast ($uint<1>) _b1  )) $buffering 1
    $volatile s5 := (((tlast & (b5 & ( ~ b6 ))) && d5) && ($bitcast ($uint<1>) _b1  )) $buffering 1
    $volatile s6 := (((tlast & (b6 & ( ~ b7 ))) && d6) && ($bitcast ($uint<1>) _b1  )) $buffering 1
    $volatile s7 := (((tlast & b7) && d7) && ($bitcast ($uint<1>) _b1  )) $buffering 1
    $guard (b0) tx_out_pipe := s0 $buffering 1// bits of buffering = 10. 
    $guard (b1) tx_out_pipe := s1 $buffering 1// bits of buffering = 10. 
    $guard (b2) tx_out_pipe := s2 $buffering 1// bits of buffering = 10. 
    $guard (b3) tx_out_pipe := s3 $buffering 1// bits of buffering = 10. 
    $guard (b4) tx_out_pipe := s4 $buffering 1// bits of buffering = 10. 
    $guard (b5) tx_out_pipe := s5 $buffering 1// bits of buffering = 10. 
    $guard (b6) tx_out_pipe := s6 $buffering 1// bits of buffering = 10. 
    $guard (b7) tx_out_pipe := s7 $buffering 1// bits of buffering = 10. 
    $while 1 
  }
}
// use of gated clocks in modules 
