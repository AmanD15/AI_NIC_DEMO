$system sbc_vcu128_core $library sbc_vcu128_core_lib
	$in

		// processor connections..
		$signal THREAD_RESET 
		$pipe   SOC_MONITOR_to_DEBUG
		$pipe   CONSOLE_to_SERIAL_RX
		

		// Flash
		//$signal SPI_FLASH_MISO
		//$signal WRITE_PROTECT

		// Clocks! 
		$signal CLOCK_TO_PROCESSOR
		$signal CLOCK_TO_NIC
		$signal CLOCK_TO_DRAMCTRL_BRIDGE

		// Resets! 
		$signal RESET_TO_PROCESSOR
		$signal RESET_TO_NIC
        	$signal RESET_TO_DRAMCTRL_BRIDGE
     
		// DRAM controller IP 
		$signal DRAM_CONTROLLER_TO_ACB_BRIDGE

		// TAP signals
        	$signal MIN_ACB_TAP1_ADDR
	    	$signal MAX_ACB_TAP1_ADDR
	    	
	        //$signal MIN_ACB_TAP2_ADDR
	    	//$signal MAX_ACB_TAP2_ADDR
	    	
	    	$signal MIN_ACB_TAP3_ADDR
	    	$signal MAX_ACB_TAP3_ADDR

		// NIC
		$pipe MAC_TO_NIC 
		
	$out
		$signal NIC_DEBUG_SIGNAL 256 $depth 1

		// processor 
		$pipe SOC_DEBUG_to_MONITOR  
		$pipe SERIAL_TX_to_CONSOLE  

		$signal PROCESSOR_MODE  

		// To ethernet-phy port map 
		//$signal SBC_TO_ETHERNET_PHY

		// NIC
		$pipe NIC_TO_MAC   
		$signal NIC_MAC_RESETN	   
		
		// FLASH
		//$signal SPI_FLASH_MOSI   
		//$signal SPI_FLASH_CLK   
		//$signal SPI_FLASH_CS_L   

		// DRAM controller IP
		$signal ACB_BRIDGE_TO_DRAM_CONTROLLER   

{

	//Processor Pipes and Signals
	$pipe PROCESSOR_ACB_REQUEST_FIFO_IN  
	$pipe PROCESSOR_ACB_RESPONSE_FIFO_IN  
	$pipe PROCESSOR_ACB_REQUEST_FIFO_OUT  
	$pipe PROCESSOR_ACB_RESPONSE_FIFO_OUT  
	$pipe MAIN_MEM_INVALIDATE  

	//NIC Pipes and Signals
	$pipe AFB_NIC_REQUEST 
	$pipe NIC_AFB_RESPONSE 
	$pipe NIC_ACB_REQUEST 
	$pipe ACB_NIC_RESPONSE 
	$signal NIC_INTERRUPT 

	
	//FLASH Ctrl Pipes and Signals
	//$pipe AFB_FLASH_REQUEST 
	//$pipe FLASH_AFB_RESPONSE 
	
	//ACB SRAM pipes
	$pipe REQUEST_TO_ACB_SRAM_FIFO_IN 
	$pipe REQUEST_TO_ACB_SRAM_FIFO_OUT 
	$pipe RESPONSE_FROM_ACB_SRAM_FIFO_IN 
	$pipe RESPONSE_FROM_ACB_SRAM_FIFO_OUT 


	$pipe ACB_DRAM_REQUEST_FIFO_IN 
	$pipe ACB_DRAM_REQUEST_FIFO_OUT 
	$pipe DRAM_ACB_RESPONSE_FIFO_IN 
	$pipe DRAM_ACB_RESPONSE_FIFO_OUT 

//**** 5-SUBSYSTEMS : Processor, acb_afb_complex, spi_flash_xtrl, nic_subsystem, acb_dram_bridge ***** //

	$instance processor_inst ajit_processor_lib:processor_1x1x32
		THREAD_RESET               => THREAD_RESET
		SOC_MONITOR_to_DEBUG       => SOC_MONITOR_to_DEBUG
		SOC_DEBUG_to_MONITOR       => SOC_DEBUG_to_MONITOR
		CONSOLE_to_SERIAL_RX       => CONSOLE_to_SERIAL_RX
		SERIAL_TX_to_CONSOLE       => SERIAL_TX_to_CONSOLE
		MAIN_MEM_REQUEST           => PROCESSOR_ACB_REQUEST_FIFO_IN
		MAIN_MEM_RESPONSE          => PROCESSOR_ACB_RESPONSE_FIFO_OUT
		MAIN_MEM_INVALIDATE        => MAIN_MEM_INVALIDATE
		EXTERNAL_INTERRUPT         => NIC_INTERRUPT
		PROCESSOR_MODE             => PROCESSOR_MODE

	$instance acb_afb_complex_inst acb_afb_complex_lib: acb_afb_complex
		ACB_REQUEST_FROM_PROCESSOR => PROCESSOR_ACB_REQUEST_FIFO_OUT
		ACB_RESPONSE_TO_PROCESSOR  => PROCESSOR_ACB_RESPONSE_FIFO_IN
		ACB_REQUEST_FROM_NIC       => NIC_ACB_REQUEST
		ACB_RESPONSE_TO_NIC        => ACB_NIC_RESPONSE
		ACB_REQUEST_TO_DRAM        => ACB_DRAM_REQUEST_FIFO_IN
		ACB_RESPONSE_FROM_DRAM     => DRAM_ACB_RESPONSE_FIFO_OUT
		AFB_REQUEST_TO_NIC         => AFB_NIC_REQUEST
		AFB_RESPONSE_FROM_NIC      => NIC_AFB_RESPONSE
		//AFB_REQUEST_TO_FLASH       => AFB_FLASH_REQUEST
		//AFB_RESPONSE_FROM_FLASH    => FLASH_AFB_RESPONSE
		MIN_ACB_TAP1_ADDR           => MIN_ACB_TAP1_ADDR
		MAX_ACB_TAP1_ADDR           => MAX_ACB_TAP1_ADDR
		//MIN_ACB_TAP2_ADDR           => MIN_ACB_TAP2_ADDR
		//MAX_ACB_TAP2_ADDR           => MAX_ACB_TAP2_ADDR
		MIN_ACB_TAP3_ADDR           => MIN_ACB_TAP3_ADDR
		MAX_ACB_TAP3_ADDR           => MAX_ACB_TAP3_ADDR
		REQUEST_TO_ACB_SRAM	     => REQUEST_TO_ACB_SRAM_FIFO_IN
		RESPONSE_FROM_ACB_SRAM	     => RESPONSE_FROM_ACB_SRAM_FIFO_OUT
		
	//$instance spi_flash_controller_inst spi_flash_controller_lib:spi_flash_controller

	//	AFB_REQUEST_TO_FLASH        => AFB_FLASH_REQUEST
	//	AFB_RESPONSE_FROM_FLASH     => FLASH_AFB_RESPONSE
	//	WRITE_PROTECT               => WRITE_PROTECT
	//	SPI_FLASH_MISO              => SPI_FLASH_MISO
	//	SPI_FLASH_CLK               => SPI_FLASH_CLK
	//	SPI_FLASH_CS_L              => SPI_FLASH_CS_L
	//	SPI_FLASH_MOSI              => SPI_FLASH_MOSI


	$instance nic_subsystem_inst nic_subsystem_lib:nic_subsystem

		NIC_DEBUG_SIGNAL 	    => NIC_DEBUG_SIGNAL
		MAC_TO_NIC_DATA             => MAC_TO_NIC
		NIC_TO_MAC_DATA             => NIC_TO_MAC
		AFB_TO_NIC_REQUEST          => AFB_NIC_REQUEST
		NIC_TO_AFB_RESPONSE         => NIC_AFB_RESPONSE
		NIC_TO_ACB_REQUEST          => NIC_ACB_REQUEST
		ACB_TO_NIC_RESPONSE         => ACB_NIC_RESPONSE
		NIC_INTERRUPT_TO_PROCESSOR  => NIC_INTERRUPT
		NIC_TO_MAC_RESETN           => NIC_MAC_RESETN

	$instance acb_dram_controller_bridge_inst  acb_dram_controller_bridge_lib:acb_dram_controller_bridge
		// signals to/from dram controller ip.
		DRAM_CONTROLLER_TO_ACB_BRIDGE => DRAM_CONTROLLER_TO_ACB_BRIDGE
		ACB_BRIDGE_TO_DRAM_CONTROLLER => ACB_BRIDGE_TO_DRAM_CONTROLLER

		// acb bus interface (slave)
		CORE_BUS_REQUEST            => ACB_DRAM_REQUEST_FIFO_OUT
		CORE_BUS_RESPONSE           => DRAM_ACB_RESPONSE_FIFO_IN

		
	$instance acb_sram_inst acb_sram_lib:acb_sram
		ACB_SRAM_REQUEST      => REQUEST_TO_ACB_SRAM_FIFO_OUT
		ACB_SRAM_RESPONSE     => RESPONSE_FROM_ACB_SRAM_FIFO_IN	
	
	
	//***FIFO CONNECTIONS : Processor <--> ACB_AFB_COMPLEX , ACB_AFB_COMPLEX <--> ACB_DRAM_Bridge ***//

	$instance DualClockedQueue_ACB_Proc_req_inst DualClockedQueue_lib:DualClockedQueue_ACB_req
	
		write_data_in              => PROCESSOR_ACB_REQUEST_FIFO_IN
		read_data_out              => PROCESSOR_ACB_REQUEST_FIFO_OUT
		write_clk                  => CLOCK_TO_PROCESSOR
		read_clk                   => CLOCK_TO_NIC

	$instance DualClockedQueue_ACB_Proc_resp_inst DualClockedQueue_lib:DualClockedQueue_ACB_resp

		write_data_in              => PROCESSOR_ACB_RESPONSE_FIFO_IN
		read_data_out              => PROCESSOR_ACB_RESPONSE_FIFO_OUT
		write_clk                  => CLOCK_TO_NIC
		read_clk                   => CLOCK_TO_PROCESSOR

	$instance DualClockedQueue_ACB_Dram_Bridge_req_inst DualClockedQueue_lib:DualClockedQueue_ACB_req
	
		write_data_in              => ACB_DRAM_REQUEST_FIFO_IN
		read_data_out              => ACB_DRAM_REQUEST_FIFO_OUT
		write_clk                  => CLOCK_TO_NIC
		read_clk                   => CLOCK_TO_DRAMCTRL_BRIDGE

	$instance DualClockedQueue_Dram_Bridge_ACB_resp_inst DualClockedQueue_lib:DualClockedQueue_ACB_resp

		write_data_in              => DRAM_ACB_RESPONSE_FIFO_IN
		read_data_out              => DRAM_ACB_RESPONSE_FIFO_OUT
		write_clk                  => CLOCK_TO_DRAMCTRL_BRIDGE
		read_clk                   => CLOCK_TO_NIC
		
		
	/////////////////////////////////// FOR ACB SRAM ////////////////////////////////////////////////////
		
	$instance DualClockedQueue_ACB_SRAM_req_inst DualClockedQueue_lib:DualClockedQueue_ACB_req
	
		write_data_in          	=> REQUEST_TO_ACB_SRAM_FIFO_IN
		read_data_out          	=> REQUEST_TO_ACB_SRAM_FIFO_OUT
		write_clk              	=> CLOCK_TO_NIC
		read_clk               	=> CLOCK_TO_DRAMCTRL_BRIDGE

	$instance DualClockedQueue_SRAM_ACB_resp_inst DualClockedQueue_lib:DualClockedQueue_ACB_resp

		write_data_in		=> RESPONSE_FROM_ACB_SRAM_FIFO_IN
		read_data_out		=> RESPONSE_FROM_ACB_SRAM_FIFO_OUT
		write_clk       	=> CLOCK_TO_DRAMCTRL_BRIDGE
		read_clk        	=> CLOCK_TO_NIC


	//**********    END OF FIFO CONNECTIONS ************************//

	//************** STUBBING VARIOUS PORTS *******************//

	// absorb clocks.. edited out later. 
	$thread clockResetDummy
		$in $signal c1: $unsigned<1>
		$in $signal c2: $unsigned<1>
		$in $signal c3: $unsigned<1>
		$in $signal c4: $unsigned<1>
		$in $signal c5: $unsigned<1>
		$in $signal c6: $unsigned<1>
		$in $signal c4: $unsigned<1>
		$variable t1: $unsigned<1>
		$variable t2: $unsigned<1>
		$variable t3: $unsigned<1>
		$variable t4: $unsigned<1>
		$variable t5: $unsigned<1>
		$variable t6: $unsigned<1>
	$variable t4: $unsigned<1>
	$default
		t1 := c1 t2 := c2 t3 := c3 t4 := c4 t5 := c5 t6 := c6
		<crt_rst_state> {
			$goto crt_rst_state
		}
	$now $tick

	$string clk_rst_str: clockResetDummy
		c1 => CLOCK_TO_PROCESSOR
		c2 => CLOCK_TO_NIC
		c3 => CLOCK_TO_DRAMCTRL_BRIDGE
		c4 => RESET_TO_PROCESSOR
		c5 => RESET_TO_NIC
        	c6 => RESET_TO_DRAMCTRL_BRIDGE

	// invalidate 
	$thread invalidateDummy
		$out $pipe   inval: $unsigned<30>
		$out $signal ei: $unsigned<1>
	$default
		$now inval$req := ($unsigned<1>) 0
		$now inval     := ($unsigned<30>) 0
		$now ei := ($unsigned<1>) 0
		<inval_rst_state> {
			$goto inval_rst_state
		}
	$now $tick

	$string inval_str: invalidateDummy
		inval => MAIN_MEM_INVALIDATE
		ei => NIC_INTERRUPT
		
}
