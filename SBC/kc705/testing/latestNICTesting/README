	The Ping test

			Authors: Siddhant Singh Tomar and Indrahas Reddy.

1. Overview
-------------------------

	This document describes
	- the example used to measure packet ping speed/round trip time
	  between the kc705 card and the host computer via Ethernet.
	- the setup of the host computer (to enable the connection 
	  for the test)
	- the application running on the host computer.
	- the setup of the KC705 card
		
2. The example
-------------------------

    During this test, raw Ethernet frames are transmitted from the host-side driver 
    code (running on a PC/laptop) to the KC705 card.  The SBC on the KC705 card, 
    with the help of NIC subsystem, receives these frames and sends them back to 
    the host side by swapping the source and destination MAC addresses. 
    (The Wireshark packet-sniffer can be used to observe the swapped source and
    MAC addresses)
    

3. KC705 setup 
-------------------------------
    Configuration: 
    Apply SBC bitfile to KC705 card, then dump main.remapped via Debug monitor.

    Ethernet Link Activation: 
    Check active status via LEDs near ethernet port. Configure speed (10/100/1000) 
    using SW11 GPIO DIP switches. Update speed by pressing SW5 center push button.

    SW11 DIP switch : 1 2 3 4
                      0 0 0 0 --> 10Mbps
                      1 0 0 0 --> 100Mbps
                      0 1 0 0 --> 1000Mbps
    


4. Host setup and application
-------------------------------

    Driver Application: 
    Launch only after configuring Ethernet link as per Step 3 and after
    setting Wireshark to filter packets for the specified interface.

    Promiscuous Mode Settings: 
    Enable promiscuous mode for Wireshark.

    Host Configuration: 
    On Ubuntu 16.04/20.04, modify wired settings for the ethernet connection:
        - Details Section: Uncheck "Connect automatically", check "Make available to other users".
        - Security Section: Disable 802.1x security.
        - IPv4/IPv6 Section: Disable both protocols.
          NOTE: If above settings, don't work one can simply click "disconnect" ethernet 
                connection settings. 


    Application Execution: 
    Run "run.sh" and provide the ethernet interface name as the first argument (e.g., "enp2s0"). 
    Two modes to send frames:
        - 1. Send fixed-sized frames, e.g., ./run.sh 1 64 (mode, number of packets)
        - 2. Send frames of increasing size, e.g., ./run.sh 2 64 (mode, number of packets)

  
5. Observations
-------------------------------
	Problem:

	- Transmit Led is always on
	- Reason for junk bufferPtr: wrong buffer start address configured in NIC reg.

	Fixed buffer addresses:
	
	- In the main program queues allocated first, then buffers (Queues allocated in lower region of NCRAM and 
	  buffers are above ) => giving problems.

	- when we are getting error, its in cortos lock release function(0x40000330: clrb  [ %i0 ],  i0 holds 0x0) 
		or wait_for_lock(0x400002c4: ldub  [ %i0 ], %l1 ,  i0 holds 0x0). 
		(happens in the beginning of test, when first packet is sent)

	Corrected TX and RX packet count register and new bitfile generated:

	- In the main program still queues allocated first, then buffers (Queues allocated in lower region of NCRAM and 
	  buffers are above ) => works ok in short test, in long test gives problem.

	- when we are getting error, its in cortos lock release function(0x40000330: clrb  [ %i0 ], i0 holds 0x0) 
		or wait_for_lock.(happens later in the test)
		
	Current Status:

   	- In the main program, now buffers allocated first, Queues later (buffer allocated in lower region of NCRAM and 
	   queues are above ) => works fine in long test (40 min: 2048 packets loopbacked)



	Corrected length of queue as 4, since using only 4 buffers.

	questions gap between 2 buffers greater than their size why?
	lock ids 2,3,4,5? used where?





