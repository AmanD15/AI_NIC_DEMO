// Aa code produced by llvm2aa (version 2.0)
$pipe accumulator_pipe_even : $float<8,23> $depth 1
$pipe accumulator_pipe_odd : $float<8,23> $depth 1
$pipe conv_input_data : $float<8,23> $depth 1
$pipe conv_ker_data : $float<8,23> $depth 1
$pipe conv_out_data : $float<8,23> $depth 1
$pipe fetch_start : $uint<8> $depth 1
$pipe hor_slice_pipe : $float<8,23> $depth 1
$pipe in_data_0 : $float<8,23> $depth 1
$pipe in_data_1 : $float<8,23> $depth 1
$pipe in_data_2 : $float<8,23> $depth 1
$pipe in_data_3 : $float<8,23> $depth 1
$pipe in_data_4 : $float<8,23> $depth 1
$pipe ker_data : $uint<64> $depth 1
$pipe pool_data_fifo_r0 : $uint<8> $depth 1
$pipe pool_data_lifo_r1 : $uint<8> $depth 1
$pipe pool_out_data : $uint<8> $depth 1
$module [generated_llvmx_xbc_storage_initializer_] $in () $out () $is {
$null
$attribute initializer
}
// $module [fp32_mul_for_ecg] 
//  $in (number1 : $float<8,23> number2 : $float<8,23> )
//  $out (ret_val__ : $float<8,23>)
//  $is 
// {
// //begin: basic-block vars
// ret_val__ := (number1 * number2)
// }
// $module [fp32_add_for_ecg] 
//  $in (number1 : $float<8,23> number2 : $float<8,23> )
//  $out (ret_val__ : $float<8,23>)
//  $is 
// {
// //begin: basic-block vars
// ret_val__ := (number1 + number2)
// }
// $module [fp32_sub_for_ecg] 
//  $in (number1 : $float<8,23> number2 : $float<8,23> )
//  $out (ret_val__ : $float<8,23>)
//  $is 
// {
// //begin: basic-block vars
// ret_val__ := (number1 - number2)
// }
// $module [fpcmp32] 
//  $in (number1 : $float<8,23> number2 : $float<8,23> flag : $uint<1> )
//  $out (ret_val__ : $uint<2>)
//  $is 
// {
// //begin: basic-block vars
// // compare instruction
// xx_x10 := (number1 == number2 )
// vars_if_true_taken := xx_x10
// vars_if_false_taken := ( ~xx_x10)
// if_false_exec_guard := vars_if_false_taken
// //begin: basic-block if_false
// // compare instruction
// $guard (if_false_exec_guard) xx_x16 := (number1 < number2 )
// if_false_if_truex_x1_taken := (if_false_exec_guard & xx_x16)
// if_false_if_falsex_x1_taken := (if_false_exec_guard & (~xx_x16))
// if_falsex_x1_exec_guard := if_false_if_falsex_x1_taken
// //begin: basic-block if_falsex_x1
// // compare instruction
// $guard (if_falsex_x1_exec_guard) xx_x22 := (number1 > number2 )
// if_falsex_x1_if_truex_x2_taken := (if_falsex_x1_exec_guard & xx_x22)
// if_falsex_x1_if_falsex_x2_taken := (if_falsex_x1_exec_guard & (~xx_x22))
// if_falsex_x2_exec_guard := if_falsex_x1_if_falsex_x2_taken
// //begin: basic-block if_falsex_x2
// if_falsex_x2_if_next_taken := if_falsex_x2_exec_guard
// if_truex_x2_exec_guard := if_falsex_x1_if_truex_x2_taken
// //begin: basic-block if_truex_x2
// if_truex_x2_if_next_taken := if_truex_x2_exec_guard
// if_next_exec_guard := (if_falsex_x2_if_next_taken | if_truex_x2_if_next_taken )
// //begin: basic-block if_next
// xx_x303x_xoff0 := ($mux if_falsex_x2_if_next_taken ( $bitcast ($uint<2>) ( $bitcast ($uint<2> ) _b11 ) ) ($mux if_truex_x2_if_next_taken ( $bitcast ($uint<2>) ( $bitcast ($uint<2> ) _b10 ) ) ($bitcast ($uint<2>) 0)))
// if_next_if_nextx_x1_taken := if_next_exec_guard
// if_truex_x1_exec_guard := if_false_if_truex_x1_taken
// //begin: basic-block if_truex_x1
// if_truex_x1_if_nextx_x1_taken := if_truex_x1_exec_guard
// if_nextx_x1_exec_guard := (if_next_if_nextx_x1_taken | if_truex_x1_if_nextx_x1_taken )
// //begin: basic-block if_nextx_x1
// xx_x302x_xoff0 := ($mux if_next_if_nextx_x1_taken ( $bitcast ($uint<2>) xx_x303x_xoff0) ($mux if_truex_x1_if_nextx_x1_taken ( $bitcast ($uint<2>) ( $bitcast ($uint<2> ) _b01 ) ) ($bitcast ($uint<2>) 0)))
// if_nextx_x1_if_nextx_x2_taken := if_nextx_x1_exec_guard
// if_true_exec_guard := vars_if_true_taken
// //begin: basic-block if_true
// if_true_if_nextx_x2_taken := if_true_exec_guard
// //begin: basic-block if_nextx_x2
// ret_val__ := ($mux if_nextx_x1_if_nextx_x2_taken ( $bitcast ($uint<2>) xx_x302x_xoff0) ($mux if_true_if_nextx_x2_taken ( $bitcast ($uint<2>) ( $bitcast ($uint<2> ) _b00 ) ) ($bitcast ($uint<2>) 0)))
// }
// $module [fstoi_for_ecg] 
//  $in (number1 : $float<8,23> )
//  $out (ret_val__ : $uint<32>)
//  $is 
// {
// //begin: basic-block vars
// xx_x5 := ( $bitcast ($uint<8> ) ( $cast ( $int< 8 > ) number1) )
// ret_val__ :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) xx_x5) )
// }
// $module [fitos32_for_ecg] 
//  $in (number1 : $uint<32> )
//  $out (ret_val__ : $float<8,23>)
//  $is 
// {
// //begin: basic-block vars
// ret_val__ := ($cast ($float<8,23>) number1)
// }
$module [round_half_even] 
 $in (number : $float<8,23> )
 $out (ret_val__ : $uint<8>)
 $is 
{
//begin: basic-block vars
$call fstoi_for_ecg (number )  (xx_x5)
$call fitos32_for_ecg (( $bitcast ($uint<32> ) xx_x5) )  (xx_x8)
$call fp32_sub_for_ecg (number xx_x8 )  (xx_x12)
$volatile $call fpcmp32 (xx_x12 ( $bitcast ($float<8,23> ) _f5.000000e-01 )  ( $bitcast ($uint<1> ) _b1 )  )  (xx_x15)
// compare instruction
xx_x18 := (xx_x15 == ( $bitcast ($uint<2> ) _b01 )  )
vars_if_true_taken := xx_x18
vars_if_false_taken := ( ~xx_x18)
if_false_exec_guard := vars_if_false_taken
//begin: basic-block if_false
// compare instruction
$guard (if_false_exec_guard) xx_x24 := (xx_x15 == ( $bitcast ($uint<2> ) _b10 )  )
if_false_if_truex_x1_taken := (if_false_exec_guard & xx_x24)
if_false_if_falsex_x1_taken := (if_false_exec_guard & (~xx_x24))
if_falsex_x1_exec_guard := if_false_if_falsex_x1_taken
//begin: basic-block if_falsex_x1
$guard (if_falsex_x1_exec_guard) iNsTr_5 := (( $bitcast ($uint<32> ) xx_x5) & ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
// compare instruction
$guard (if_falsex_x1_exec_guard) xx_x32 := (iNsTr_5 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  )
if_falsex_x1_if_truex_x2_taken := (if_falsex_x1_exec_guard & xx_x32)
if_falsex_x1_if_falsex_x2_taken := (if_falsex_x1_exec_guard & (~xx_x32))
if_falsex_x2_exec_guard := if_falsex_x1_if_falsex_x2_taken
//begin: basic-block if_falsex_x2
$guard (if_falsex_x2_exec_guard) xx_x38 := (xx_x8 + ( $bitcast ($float<8,23> ) _f1.000000e+00 ) )
if_falsex_x2_if_next_taken := if_falsex_x2_exec_guard
if_truex_x2_exec_guard := if_falsex_x1_if_truex_x2_taken
//begin: basic-block if_truex_x2
if_truex_x2_if_next_taken := if_truex_x2_exec_guard
if_next_exec_guard := (if_falsex_x2_if_next_taken | if_truex_x2_if_next_taken )
//begin: basic-block if_next
xx_x433 := ($mux if_falsex_x2_if_next_taken ( $bitcast ($float<8,23>) xx_x38) ($mux if_truex_x2_if_next_taken ( $bitcast ($float<8,23>) xx_x8) ($bitcast ($float<8,23>) 0)))
if_next_if_nextx_x1_taken := if_next_exec_guard
if_truex_x1_exec_guard := if_false_if_truex_x1_taken
//begin: basic-block if_truex_x1
$guard (if_truex_x1_exec_guard) xx_x27 := (xx_x8 + ( $bitcast ($float<8,23> ) _f1.000000e+00 ) )
if_truex_x1_if_nextx_x1_taken := if_truex_x1_exec_guard
if_nextx_x1_exec_guard := (if_next_if_nextx_x1_taken | if_truex_x1_if_nextx_x1_taken )
//begin: basic-block if_nextx_x1
xx_x432 := ($mux if_next_if_nextx_x1_taken ( $bitcast ($float<8,23>) xx_x433) ($mux if_truex_x1_if_nextx_x1_taken ( $bitcast ($float<8,23>) xx_x27) ($bitcast ($float<8,23>) 0)))
if_nextx_x1_if_nextx_x2_taken := if_nextx_x1_exec_guard
if_true_exec_guard := vars_if_true_taken
//begin: basic-block if_true
if_true_if_nextx_x2_taken := if_true_exec_guard
//begin: basic-block if_nextx_x2
xx_x43 := ($mux if_nextx_x1_if_nextx_x2_taken ( $bitcast ($float<8,23>) xx_x432) ($mux if_true_if_nextx_x2_taken ( $bitcast ($float<8,23>) xx_x8) ($bitcast ($float<8,23>) 0)))
ret_val__ := ( $bitcast ($uint<8> ) ( $cast ( $int< 8 > ) xx_x43) )
}
$module [uint_quant] 
 $in (val : $float<8,23> scale_inv : $float<8,23> zero_point : $float<8,23> )
 $out (ret_val__ : $uint<8>)
 $is 
{
//begin: basic-block vars
$call fp32_mul_for_ecg (val scale_inv )  (xx_x10)
$call fp32_add_for_ecg (xx_x10 zero_point )  (xx_x12)
// compare instruction
xx_x15 := (xx_x12 > ( $bitcast ($float<8,23> ) _f2.550000e+02 )  )
vars_if_true_taken := xx_x15
vars_if_false_taken := ( ~xx_x15)
if_false_exec_guard := vars_if_false_taken
//begin: basic-block if_false
if_false_if_next_taken := if_false_exec_guard
if_true_exec_guard := vars_if_true_taken
//begin: basic-block if_true
if_true_if_next_taken := if_true_exec_guard
if_next_exec_guard := (if_false_if_next_taken | if_true_if_next_taken )
//begin: basic-block if_next
xx_x20 := ($mux if_false_if_next_taken ( $bitcast ($float<8,23>) xx_x12) ($mux if_true_if_next_taken ( $bitcast ($float<8,23>) ( $bitcast ($float<8,23> ) _f2.550000e+02 ) ) ($bitcast ($float<8,23>) 0)))
// compare instruction
$guard (if_next_exec_guard) xx_x21 := (xx_x20 < ( $bitcast ($float<8,23> ) _h0 )  )
if_next_if_truex_x1_taken := (if_next_exec_guard & xx_x21)
if_next_if_falsex_x1_taken := (if_next_exec_guard & (~xx_x21))
if_falsex_x1_exec_guard := if_next_if_falsex_x1_taken
//begin: basic-block if_falsex_x1
if_falsex_x1_if_nextx_x1_taken := if_falsex_x1_exec_guard
if_truex_x1_exec_guard := if_next_if_truex_x1_taken
//begin: basic-block if_truex_x1
if_truex_x1_if_nextx_x1_taken := if_truex_x1_exec_guard
//begin: basic-block if_nextx_x1
xx_x26 := ($mux if_falsex_x1_if_nextx_x1_taken ( $bitcast ($float<8,23>) xx_x20) ($mux if_truex_x1_if_nextx_x1_taken ( $bitcast ($float<8,23>) ( $bitcast ($float<8,23> ) _h0 ) ) ($bitcast ($float<8,23>) 0)))
$call round_half_even (xx_x26 )  (ret_val__)
}
$module [dequant_inp] 
 $in (val : $uint<8> scale : $float<8,23> zero_point : $float<8,23> )
 $out (ret_val__ : $float<8,23>)
 $is 
{
//begin: basic-block vars
xx_x13 := ($cast ($float<8,23>) val)
$call fp32_sub_for_ecg (xx_x13 zero_point )  (xx_x14)
$call fp32_mul_for_ecg (scale xx_x14 )  (ret_val__)
}
$module [dequant_ker] 
 $in (val : $uint<8> scale : $float<8,23> zero_point : $float<8,23> )
 $out (ret_val__ : $float<8,23>)
 $is 
{
//begin: basic-block vars
xx_x13 :=  ( $cast ($float<8,23>)  ( $bitcast ( $int< 32 > ) val) ) 
$call fp32_sub_for_ecg (xx_x13 zero_point )  (xx_x14)
$call fp32_mul_for_ecg (scale xx_x14 )  (ret_val__)
}
$module [relu] 
 $in (val : $float<8,23> )
 $out (ret_val__ : $float<8,23>)
 $is 
{
//begin: basic-block vars
// compare instruction
xx_x6 := (val > ( $bitcast ($float<8,23> ) _h0 )  )
vars_if_true_taken := xx_x6
vars_if_false_taken := ( ~xx_x6)
if_false_exec_guard := vars_if_false_taken
//begin: basic-block if_false
if_false_if_next_taken := if_false_exec_guard
if_true_exec_guard := vars_if_true_taken
//begin: basic-block if_true
if_true_if_next_taken := if_true_exec_guard
//begin: basic-block if_next
ret_val__ := ($mux if_false_if_next_taken ( $bitcast ($float<8,23>) ( $bitcast ($float<8,23> ) _h0 ) ) ($mux if_true_if_next_taken ( $bitcast ($float<8,23>) val) ($bitcast ($float<8,23>) 0)))
}
$module [readModule_convolution] 
 $in (base_address : $uint<32> addr : $uint<32> )
 $out (ret_val__ : $uint<64>)
 $is 
{
//begin: basic-block vars
ret_val__ := ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )
}
$module [writeModule_convolution] 
 $in (base_address : $uint<32> addr : $uint<32> data : $uint<64> byte_mask : $uint<8> )
 $out ()
 $is 
{
//begin: basic-block vars
ker_data := data
}
$module [writeInpPipe] 
 $in (col : $uint<32> inp_dequant_val : $float<8,23> )
 $out ()
 $is 
{
//begin: basic-block vars
// compare instruction
xx_x7 := (col == ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  )
vars_if_true_taken := xx_x7
vars_if_false_taken := ( ~xx_x7)
if_false_exec_guard := vars_if_false_taken
//begin: basic-block if_false
// compare instruction
$guard (if_false_exec_guard) xx_x13 := (col == ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 )  )
if_false_if_truex_x1_taken := (if_false_exec_guard & xx_x13)
if_false_if_falsex_x1_taken := (if_false_exec_guard & (~xx_x13))
if_falsex_x1_exec_guard := if_false_if_falsex_x1_taken
//begin: basic-block if_falsex_x1
// compare instruction
$guard (if_falsex_x1_exec_guard) xx_x19 := (col == ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )
if_falsex_x1_if_truex_x2_taken := (if_falsex_x1_exec_guard & xx_x19)
if_falsex_x1_if_falsex_x2_taken := (if_falsex_x1_exec_guard & (~xx_x19))
if_falsex_x2_exec_guard := if_falsex_x1_if_falsex_x2_taken
//begin: basic-block if_falsex_x2
// compare instruction
$guard (if_falsex_x2_exec_guard) xx_x25 := (col == ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 )  )
if_falsex_x2_if_truex_x3_taken := (if_falsex_x2_exec_guard & xx_x25)
if_falsex_x2_if_falsex_x3_taken := (if_falsex_x2_exec_guard & (~xx_x25))
if_falsex_x3_exec_guard := if_falsex_x2_if_falsex_x3_taken
//begin: basic-block if_falsex_x3
// compare instruction
$guard (if_falsex_x3_exec_guard) xx_x31 := (col == ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 )  )
if_falsex_x3_if_truex_x4_taken := (if_falsex_x3_exec_guard & xx_x31)
if_falsex_x3_if_falsex_x4_taken := (if_falsex_x3_exec_guard & (~xx_x31))
if_falsex_x4_exec_guard := if_falsex_x3_if_falsex_x4_taken
//begin: basic-block if_falsex_x4
if_falsex_x4_if_next_taken := if_falsex_x4_exec_guard
if_truex_x4_exec_guard := if_falsex_x3_if_truex_x4_taken
//begin: basic-block if_truex_x4
$guard (if_truex_x4_exec_guard) in_data_4 := inp_dequant_val
if_truex_x4_if_next_taken := if_truex_x4_exec_guard
if_next_exec_guard := (if_falsex_x4_if_next_taken | if_truex_x4_if_next_taken )
//begin: basic-block if_next
if_next_if_nextx_x1_taken := if_next_exec_guard
if_truex_x3_exec_guard := if_falsex_x2_if_truex_x3_taken
//begin: basic-block if_truex_x3
$guard (if_truex_x3_exec_guard) in_data_3 := inp_dequant_val
if_truex_x3_if_nextx_x1_taken := if_truex_x3_exec_guard
if_nextx_x1_exec_guard := (if_next_if_nextx_x1_taken | if_truex_x3_if_nextx_x1_taken )
//begin: basic-block if_nextx_x1
if_nextx_x1_if_nextx_x2_taken := if_nextx_x1_exec_guard
if_truex_x2_exec_guard := if_falsex_x1_if_truex_x2_taken
//begin: basic-block if_truex_x2
$guard (if_truex_x2_exec_guard) in_data_2 := inp_dequant_val
if_truex_x2_if_nextx_x2_taken := if_truex_x2_exec_guard
if_nextx_x2_exec_guard := (if_nextx_x1_if_nextx_x2_taken | if_truex_x2_if_nextx_x2_taken )
//begin: basic-block if_nextx_x2
if_nextx_x2_if_nextx_x3_taken := if_nextx_x2_exec_guard
if_truex_x1_exec_guard := if_false_if_truex_x1_taken
//begin: basic-block if_truex_x1
$guard (if_truex_x1_exec_guard) in_data_1 := inp_dequant_val
if_truex_x1_if_nextx_x3_taken := if_truex_x1_exec_guard
if_nextx_x3_exec_guard := (if_nextx_x2_if_nextx_x3_taken | if_truex_x1_if_nextx_x3_taken )
//begin: basic-block if_nextx_x3
if_nextx_x3_if_nextx_x4_taken := if_nextx_x3_exec_guard
if_true_exec_guard := vars_if_true_taken
//begin: basic-block if_true
$guard (if_true_exec_guard) in_data_0 := inp_dequant_val
if_true_if_nextx_x4_taken := if_true_exec_guard
//begin: basic-block if_nextx_x4
}
$module [fetchAll] 
 $in (base_addr : $uint<32> groups : $uint<32> ker_size : $uint<32> in_channels : $uint<32> inp_scale : $float<8,23> inp_zero_point : $float<8,23> )
 $out ()
 $is 
{
$branchblock [body] {
//begin: basic-block vars
xx_x15 := (groups + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
xx_x17 := (xx_x15 * ker_size)
xx_x19 := (xx_x17 * ker_size)
xx_x32 := (groups << ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
xx_x34 := (xx_x32 * ker_size)
xx_x36 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) xx_x34) )
xx_x41 := ($cast ($uint<64>) xx_x32)
xx_x154 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) ker_size) )
// compare instruction
xx_x2886 := (( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  < xx_x19 )
$if xx_x2886 $then  $place [vars_for_bodyx_xlrx_xph] $else $place [vars_for_out] $endif 
//begin: basic-block for_bodyx_xlrx_xph
$merge vars_for_bodyx_xlrx_xph
$endmerge
$place [for_bodyx_xlrx_xph_for_body]
//begin: basic-block for_body
//   this is a do-while loop.
$merge for_bodyx_xlrx_xph_for_body
$endmerge
$dopipeline $depth 31 $buffering 7 
$fullrate
$merge $entry $loopback
$phi xx_x17491 :=  ( $cast ($uint<32>) xx_x175) $on $loopback ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on $entry
$phi xx_x14990 :=  ( $cast ($uint<64>) xx_x3554) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x15889 :=  ( $cast ($uint<64>) xx_x4056) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x1635788 :=  ( $cast ($uint<64>) xx_x16358) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x1707287 :=  ( $cast ($uint<64>) xx_x17071) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$endmerge
xx_x37 := (xx_x14990 * xx_x36)
xx_x42 := (xx_x15889 * xx_x41)
xx_x43 := (xx_x37 + xx_x42)
xx_x45 := (xx_x1707287 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 ) )
xx_x46 := (xx_x43 + xx_x45)
xx_x50 := ($cast ($uint<32>) xx_x46)
$call readModule_convolution (base_addr xx_x50 )  (xx_x51)
xx_x54 := ($slice xx_x51 63 56)
$call dequant_ker (xx_x54 inp_scale inp_zero_point )  (xx_x59)
xx_x63 := ($cast ($uint<32>) xx_x15889)
$call writeInpPipe (xx_x63 xx_x59 )  ()
xx_x66 := ($slice xx_x51 55 48)
$call dequant_ker (xx_x66 inp_scale inp_zero_point )  (xx_x71)
$call writeInpPipe (xx_x63 xx_x71 )  ()
xx_x78 := ($slice xx_x51 47 40)
$call dequant_ker (xx_x78 inp_scale inp_zero_point )  (xx_x83)
$call writeInpPipe (xx_x63 xx_x83 )  ()
xx_x90 := ($slice xx_x51 39 32)
$call dequant_ker (xx_x90 inp_scale inp_zero_point )  (xx_x95)
$call writeInpPipe (xx_x63 xx_x95 )  ()
xx_x102 := ($slice xx_x51 31 24)
$call dequant_ker (xx_x102 inp_scale inp_zero_point )  (xx_x107)
$call writeInpPipe (xx_x63 xx_x107 )  ()
xx_x114 := ($slice xx_x51 23 16)
$call dequant_ker (xx_x114 inp_scale inp_zero_point )  (xx_x119)
$call writeInpPipe (xx_x63 xx_x119 )  ()
xx_x126 := ($slice xx_x51 15 8)
$call dequant_ker (xx_x126 inp_scale inp_zero_point )  (xx_x131)
$call writeInpPipe (xx_x63 xx_x131 )  ()
xx_x138 := ($slice xx_x51 7 0)
$call dequant_inp (xx_x138 inp_scale inp_zero_point )  (xx_x143)
$call writeInpPipe (xx_x63 xx_x143 )  ()
xx_x150 := (xx_x14990 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
// compare instruction
xx_x155 := (xx_x150 == xx_x154 )
for_body_if_true_taken := xx_x155
for_body_if_false_taken := ( ~xx_x155)
if_false_exec_guard := for_body_if_false_taken
//begin: basic-block if_false
if_false_if_next_taken := if_false_exec_guard
if_true_exec_guard := for_body_if_true_taken
//begin: basic-block if_true
$guard (if_true_exec_guard) xx_x159 := (xx_x15889 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
if_true_if_next_taken := if_true_exec_guard
if_next_exec_guard := (if_false_if_next_taken | if_true_if_next_taken )
//begin: basic-block if_next
xx_x163 := ($mux if_false_if_next_taken ( $bitcast ($uint<64>) xx_x1635788) ($mux if_true_if_next_taken ( $bitcast ($uint<64>) xx_x159) ($bitcast ($uint<64>) 0)))
xx_x3554 := ($mux if_false_if_next_taken ( $bitcast ($uint<64>) xx_x150) ($mux if_true_if_next_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) ($bitcast ($uint<64>) 0)))
// compare instruction
$guard (if_next_exec_guard) xx_x166 := (xx_x163 == xx_x154 )
if_next_if_truex_x1_taken := (if_next_exec_guard & xx_x166)
if_next_if_falsex_x1_taken := (if_next_exec_guard & (~xx_x166))
if_falsex_x1_exec_guard := if_next_if_falsex_x1_taken
//begin: basic-block if_falsex_x1
if_falsex_x1_if_nextx_x1_taken := if_falsex_x1_exec_guard
if_truex_x1_exec_guard := if_next_if_truex_x1_taken
//begin: basic-block if_truex_x1
$guard (if_truex_x1_exec_guard) xx_x170 := (xx_x1707287 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
if_truex_x1_if_nextx_x1_taken := if_truex_x1_exec_guard
//begin: basic-block if_nextx_x1
xx_x17071 := ($mux if_falsex_x1_if_nextx_x1_taken ( $bitcast ($uint<64>) xx_x1707287) ($mux if_truex_x1_if_nextx_x1_taken ( $bitcast ($uint<64>) xx_x170) ($bitcast ($uint<64>) 0)))
xx_x16358 := ($mux if_falsex_x1_if_nextx_x1_taken ( $bitcast ($uint<64>) xx_x163) ($mux if_truex_x1_if_nextx_x1_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) ($bitcast ($uint<64>) 0)))
xx_x4056 := ($mux if_falsex_x1_if_nextx_x1_taken ( $bitcast ($uint<64>) xx_x163) ($mux if_truex_x1_if_nextx_x1_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) ($bitcast ($uint<64>) 0)))
xx_x175 := (xx_x17491 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
// compare instruction
xx_x28 := (xx_x175 < xx_x19 )
if_nextx_x1_forx_xfor_out_crit_edge_taken := ( ~xx_x28)
$while xx_x28
$if if_nextx_x1_forx_xfor_out_crit_edge_taken $then 
  $place [if_nextx_x1_forx_xfor_out_crit_edge]
$endif
//begin: basic-block forx_xfor_out_crit_edge
$merge if_nextx_x1_forx_xfor_out_crit_edge
$phi split92 :=  ( $cast ($uint<64>) xx_x17071) $on if_nextx_x1_forx_xfor_out_crit_edge 
$phi split93 :=  ( $cast ($uint<8>) xx_x138) $on if_nextx_x1_forx_xfor_out_crit_edge 
$endmerge
$place [forx_xfor_out_crit_edge_for_out]
//begin: basic-block for_out
$merge forx_xfor_out_crit_edge_for_out vars_for_out
$phi xx_x17072x_xlcssa :=  ( $cast ($uint<64>) split92) $on forx_xfor_out_crit_edge_for_out ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on vars_for_out 
$phi xx_x285x_xpre70x_xlcssa :=  ( $cast ($uint<8>) split93) $on forx_xfor_out_crit_edge_for_out ( $cast ($uint<8>) ( $bitcast ($uint<8> ) _b0 ) ) $on vars_for_out 
$endmerge
xx_x180 := (groups + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
xx_x181 := (xx_x180 << ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
xx_x182 := (in_channels - xx_x181)
xx_x186 := (ker_size * ker_size)
xx_x190 := ($cast ($uint<64>) xx_x180)
xx_x202 := (groups << ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
xx_x204 := (xx_x202 * ker_size)
xx_x206 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) xx_x204) )
xx_x211 := ($cast ($uint<64>) xx_x202)
xx_x215 := (xx_x190 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 ) )
xx_x303 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) ker_size) )
// compare instruction
xx_x19879 := (( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  < xx_x186 )
$if xx_x19879 $then  $place [for_out_for_bodyx_x1x_xlrx_xph] $else $place [for_out_for_outx_x2] $endif 
//begin: basic-block for_bodyx_x1x_xlrx_xph
$merge for_out_for_bodyx_x1x_xlrx_xph
$endmerge
$place [for_bodyx_x1x_xlrx_xph_for_bodyx_x1]
//begin: basic-block for_bodyx_x1
$merge for_bodyx_x1x_xlrx_xph_for_bodyx_x1 if_nextx_x10_for_bodyx_x1
$phi xx_x31285 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on for_bodyx_x1x_xlrx_xph_for_bodyx_x1 ( $cast ($uint<32>) xx_x313) $on if_nextx_x10_for_bodyx_x1 
$phi xx_x29884 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on for_bodyx_x1x_xlrx_xph_for_bodyx_x1 ( $cast ($uint<64>) xx_x2058) $on if_nextx_x10_for_bodyx_x1 
$phi xx_x21083 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on for_bodyx_x1x_xlrx_xph_for_bodyx_x1 ( $cast ($uint<64>) xx_x2109) $on if_nextx_x10_for_bodyx_x1 
$phi xx_x29081 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on for_bodyx_x1x_xlrx_xph_for_bodyx_x1 ( $cast ($uint<64>) xx_x29051) $on if_nextx_x10_for_bodyx_x1 
$phi xx_x285x_xpre6080 :=  ( $cast ($uint<8>) xx_x285x_xpre70x_xlcssa) $on for_bodyx_x1x_xlrx_xph_for_bodyx_x1 ( $cast ($uint<8>) xx_x285x_xpre67x_xlcssa) $on if_nextx_x10_for_bodyx_x1 
$endmerge
xx_x207 := (xx_x29884 * xx_x206)
xx_x212 := (xx_x21083 * xx_x211)
xx_x213 := (xx_x207 + xx_x212)
xx_x216 := (xx_x213 + xx_x215)
xx_x220 := ($cast ($uint<32>) xx_x216)
$call readModule_convolution (base_addr xx_x220 )  (xx_x221)
xx_x292 := ($cast ($uint<32>) xx_x29081)
// compare instruction
xx_x22775 := (( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  < xx_x182 )
$if xx_x22775 $then  $place [for_bodyx_x1_for_bodyx_x2x_xlrx_xph] $else $place [for_bodyx_x1_for_outx_x1] $endif 
//begin: basic-block for_bodyx_x2x_xlrx_xph
$merge for_bodyx_x1_for_bodyx_x2x_xlrx_xph
$endmerge
$place [for_bodyx_x2x_xlrx_xph_for_bodyx_x2]
//begin: basic-block for_bodyx_x2
$merge for_bodyx_x2x_xlrx_xph_for_bodyx_x2 if_nextx_x9_for_bodyx_x2
$phi xx_x29477 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on for_bodyx_x2x_xlrx_xph_for_bodyx_x2 ( $cast ($uint<32>) xx_x295) $on if_nextx_x9_for_bodyx_x2 
$phi xx_x285x_xpre6776 :=  ( $cast ($uint<8>) xx_x285x_xpre6080) $on for_bodyx_x2x_xlrx_xph_for_bodyx_x2 ( $cast ($uint<8>) xx_x285x_xpre68) $on if_nextx_x9_for_bodyx_x2 
$endmerge
// compare instruction
xx_x229 := (xx_x29477 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  )
$if xx_x229 $then  $place [for_bodyx_x2_if_truex_x2] $else $place [for_bodyx_x2_if_falsex_x2] $endif 
//begin: basic-block if_truex_x2
$merge for_bodyx_x2_if_truex_x2
$endmerge
xx_x232 := ($slice xx_x221 63 56)
$place [if_truex_x2_if_nextx_x9]
//begin: basic-block if_falsex_x2
$merge for_bodyx_x2_if_falsex_x2
$endmerge
// compare instruction
xx_x235 := (xx_x29477 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 )  )
$if xx_x235 $then  $place [if_falsex_x2_if_truex_x3] $else $place [if_falsex_x2_if_falsex_x3] $endif 
//begin: basic-block if_truex_x3
$merge if_falsex_x2_if_truex_x3
$endmerge
xx_x238 := ($slice xx_x221 55 48)
$place [if_truex_x3_if_nextx_x8]
//begin: basic-block if_falsex_x3
$merge if_falsex_x2_if_falsex_x3
$endmerge
// compare instruction
xx_x241 := (xx_x29477 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )
$if xx_x241 $then  $place [if_falsex_x3_if_truex_x4] $else $place [if_falsex_x3_if_falsex_x4] $endif 
//begin: basic-block if_truex_x4
$merge if_falsex_x3_if_truex_x4
$endmerge
xx_x244 := ($slice xx_x221 47 40)
$place [if_truex_x4_if_nextx_x7]
//begin: basic-block if_falsex_x4
$merge if_falsex_x3_if_falsex_x4
$endmerge
// compare instruction
xx_x247 := (xx_x29477 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 )  )
$if xx_x247 $then  $place [if_falsex_x4_if_truex_x5] $else $place [if_falsex_x4_if_falsex_x5] $endif 
//begin: basic-block if_truex_x5
$merge if_falsex_x4_if_truex_x5
$endmerge
xx_x250 := ($slice xx_x221 39 32)
$place [if_truex_x5_if_nextx_x6]
//begin: basic-block if_falsex_x5
$merge if_falsex_x4_if_falsex_x5
$endmerge
// compare instruction
xx_x253 := (xx_x29477 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 )  )
$if xx_x253 $then  $place [if_falsex_x5_if_truex_x6] $else $place [if_falsex_x5_if_falsex_x6] $endif 
//begin: basic-block if_truex_x6
$merge if_falsex_x5_if_truex_x6
$endmerge
xx_x256 := ($slice xx_x221 31 24)
$place [if_truex_x6_if_nextx_x5]
//begin: basic-block if_falsex_x6
$merge if_falsex_x5_if_falsex_x6
$endmerge
// compare instruction
xx_x259 := (xx_x29477 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000101 )  )
$if xx_x259 $then  $place [if_falsex_x6_if_truex_x7] $else $place [if_falsex_x6_if_falsex_x7] $endif 
//begin: basic-block if_truex_x7
$merge if_falsex_x6_if_truex_x7
$endmerge
xx_x262 := ($slice xx_x221 23 16)
$place [if_truex_x7_if_nextx_x4]
//begin: basic-block if_falsex_x7
$merge if_falsex_x6_if_falsex_x7
$endmerge
// compare instruction
xx_x265 := (xx_x29477 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000110 )  )
$if xx_x265 $then  $place [if_falsex_x7_if_truex_x8] $else $place [if_falsex_x7_if_falsex_x8] $endif 
//begin: basic-block if_truex_x8
$merge if_falsex_x7_if_truex_x8
$endmerge
xx_x268 := ($slice xx_x221 15 8)
$place [if_truex_x8_if_nextx_x3]
//begin: basic-block if_falsex_x8
$merge if_falsex_x7_if_falsex_x8
$endmerge
// compare instruction
xx_x271 := (xx_x29477 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000111 )  )
$if xx_x271 $then  $place [if_falsex_x8_if_truex_x9] $else $place [if_falsex_x8_if_falsex_x9] $endif 
//begin: basic-block if_truex_x9
$merge if_falsex_x8_if_truex_x9
$endmerge
xx_x274 := ($slice xx_x221 7 0)
$place [if_truex_x9_if_nextx_x2]
//begin: basic-block if_falsex_x9
$merge if_falsex_x8_if_falsex_x9
$endmerge
$place [if_falsex_x9_if_nextx_x2]
//begin: basic-block if_nextx_x2
$merge if_falsex_x9_if_nextx_x2 if_truex_x9_if_nextx_x2
$phi xx_x285x_xpre66 :=  ( $cast ($uint<8>) xx_x285x_xpre6776) $on if_falsex_x9_if_nextx_x2 ( $cast ($uint<8>) xx_x274) $on if_truex_x9_if_nextx_x2 
$endmerge
$place [if_nextx_x2_if_nextx_x3]
//begin: basic-block if_nextx_x3
$merge if_nextx_x2_if_nextx_x3 if_truex_x8_if_nextx_x3
$phi xx_x285x_xpre65 :=  ( $cast ($uint<8>) xx_x285x_xpre66) $on if_nextx_x2_if_nextx_x3 ( $cast ($uint<8>) xx_x268) $on if_truex_x8_if_nextx_x3 
$endmerge
$place [if_nextx_x3_if_nextx_x4]
//begin: basic-block if_nextx_x4
$merge if_nextx_x3_if_nextx_x4 if_truex_x7_if_nextx_x4
$phi xx_x285x_xpre64 :=  ( $cast ($uint<8>) xx_x285x_xpre65) $on if_nextx_x3_if_nextx_x4 ( $cast ($uint<8>) xx_x262) $on if_truex_x7_if_nextx_x4 
$endmerge
$place [if_nextx_x4_if_nextx_x5]
//begin: basic-block if_nextx_x5
$merge if_nextx_x4_if_nextx_x5 if_truex_x6_if_nextx_x5
$phi xx_x285x_xpre63 :=  ( $cast ($uint<8>) xx_x285x_xpre64) $on if_nextx_x4_if_nextx_x5 ( $cast ($uint<8>) xx_x256) $on if_truex_x6_if_nextx_x5 
$endmerge
$place [if_nextx_x5_if_nextx_x6]
//begin: basic-block if_nextx_x6
$merge if_nextx_x5_if_nextx_x6 if_truex_x5_if_nextx_x6
$phi xx_x285x_xpre62 :=  ( $cast ($uint<8>) xx_x285x_xpre63) $on if_nextx_x5_if_nextx_x6 ( $cast ($uint<8>) xx_x250) $on if_truex_x5_if_nextx_x6 
$endmerge
$place [if_nextx_x6_if_nextx_x7]
//begin: basic-block if_nextx_x7
$merge if_nextx_x6_if_nextx_x7 if_truex_x4_if_nextx_x7
$phi xx_x285x_xpre61 :=  ( $cast ($uint<8>) xx_x285x_xpre62) $on if_nextx_x6_if_nextx_x7 ( $cast ($uint<8>) xx_x244) $on if_truex_x4_if_nextx_x7 
$endmerge
$place [if_nextx_x7_if_nextx_x8]
//begin: basic-block if_nextx_x8
$merge if_nextx_x7_if_nextx_x8 if_truex_x3_if_nextx_x8
$phi xx_x285x_xpre :=  ( $cast ($uint<8>) xx_x285x_xpre61) $on if_nextx_x7_if_nextx_x8 ( $cast ($uint<8>) xx_x238) $on if_truex_x3_if_nextx_x8 
$endmerge
$place [if_nextx_x8_if_nextx_x9]
//begin: basic-block if_nextx_x9
$merge if_nextx_x8_if_nextx_x9 if_truex_x2_if_nextx_x9
$phi xx_x285x_xpre68 :=  ( $cast ($uint<8>) xx_x285x_xpre) $on if_nextx_x8_if_nextx_x9 ( $cast ($uint<8>) xx_x232) $on if_truex_x2_if_nextx_x9 
$phi xx_x285 :=  ( $cast ($uint<8>) xx_x285x_xpre) $on if_nextx_x8_if_nextx_x9 ( $cast ($uint<8>) xx_x232) $on if_truex_x2_if_nextx_x9 
$endmerge
$call dequant_ker (xx_x285 inp_scale inp_zero_point )  (xx_x288)
$call writeInpPipe (xx_x292 xx_x288 )  ()
xx_x295 := (xx_x29477 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
// compare instruction
xx_x227 := (xx_x295 < xx_x182 )
$if xx_x227 $then  $place [if_nextx_x9_for_bodyx_x2] $else $place [if_nextx_x9_forx_x2x_xfor_outx_x1_crit_edge] $endif 
//begin: basic-block forx_x2x_xfor_outx_x1_crit_edge
$merge if_nextx_x9_forx_x2x_xfor_outx_x1_crit_edge
$phi split :=  ( $cast ($uint<8>) xx_x285x_xpre68) $on if_nextx_x9_forx_x2x_xfor_outx_x1_crit_edge 
$phi split78 :=  ( $cast ($uint<64>) xx_x29081) $on if_nextx_x9_forx_x2x_xfor_outx_x1_crit_edge 
$endmerge
$place [forx_x2x_xfor_outx_x1_crit_edge_for_outx_x1]
//begin: basic-block for_outx_x1
$merge for_bodyx_x1_for_outx_x1 forx_x2x_xfor_outx_x1_crit_edge_for_outx_x1
$phi xx_x29082 :=  ( $cast ($uint<64>) xx_x29081) $on forx_x2x_xfor_outx_x1_crit_edge_for_outx_x1 ( $cast ($uint<64>) xx_x29081) $on for_bodyx_x1_for_outx_x1 
$phi xx_x285x_xpre67x_xlcssa :=  ( $cast ($uint<8>) split) $on forx_x2x_xfor_outx_x1_crit_edge_for_outx_x1 ( $cast ($uint<8>) xx_x285x_xpre6080) $on for_bodyx_x1_for_outx_x1 
$phi xx_x307x_xlcssa :=  ( $cast ($uint<64>) split78) $on forx_x2x_xfor_outx_x1_crit_edge_for_outx_x1 ( $cast ($uint<64>) xx_x21083) $on for_bodyx_x1_for_outx_x1 
$endmerge
xx_x299 := (xx_x29884 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
// compare instruction
xx_x304 := (xx_x299 == xx_x303 )
$if xx_x304 $then  $place [for_outx_x1_if_truex_x10] $else $place [for_outx_x1_if_falsex_x10] $endif 
//begin: basic-block if_truex_x10
$merge for_outx_x1_if_truex_x10
$endmerge
xx_x308 := (xx_x307x_xlcssa + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
$place [if_truex_x10_if_nextx_x10]
//begin: basic-block if_falsex_x10
$merge for_outx_x1_if_falsex_x10
$endmerge
$place [if_falsex_x10_if_nextx_x10]
//begin: basic-block if_nextx_x10
$merge if_falsex_x10_if_nextx_x10 if_truex_x10_if_nextx_x10
$phi xx_x29051 :=  ( $cast ($uint<64>) xx_x29082) $on if_falsex_x10_if_nextx_x10 ( $cast ($uint<64>) xx_x308) $on if_truex_x10_if_nextx_x10 
$phi xx_x2109 :=  ( $cast ($uint<64>) xx_x307x_xlcssa) $on if_falsex_x10_if_nextx_x10 ( $cast ($uint<64>) xx_x308) $on if_truex_x10_if_nextx_x10 
$phi xx_x2058 :=  ( $cast ($uint<64>) xx_x299) $on if_falsex_x10_if_nextx_x10 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on if_truex_x10_if_nextx_x10 
$endmerge
xx_x313 := (xx_x31285 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
// compare instruction
xx_x198 := (xx_x313 < xx_x186 )
$if xx_x198 $then  $place [if_nextx_x10_for_bodyx_x1] $else $place [if_nextx_x10_forx_x1x_xfor_outx_x2_crit_edge] $endif 
//begin: basic-block forx_x1x_xfor_outx_x2_crit_edge
$merge if_nextx_x10_forx_x1x_xfor_outx_x2_crit_edge
$endmerge
$place [forx_x1x_xfor_outx_x2_crit_edge_for_outx_x2]
//begin: basic-block for_outx_x2
$merge for_out_for_outx_x2 forx_x1x_xfor_outx_x2_crit_edge_for_outx_x2
$endmerge
}
}
$module [fetchKernel] 
 $in (base_addr : $uint<32> groups : $uint<32> ker_size : $uint<32> in_channels : $uint<32> ker_scale : $float<8,23> ker_zero_point : $float<8,23> )
 $out ()
 $is 
{
$branchblock [body] {
//begin: basic-block vars
xx_x15 := (groups + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
xx_x17 := (xx_x15 * ker_size)
xx_x19 := (xx_x17 * ker_size)
xx_x32 := (groups << ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
xx_x34 := (xx_x32 * ker_size)
xx_x36 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) xx_x34) )
xx_x41 := ($cast ($uint<64>) xx_x32)
xx_x138 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) ker_size) )
// compare instruction
xx_x2881 := (( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  < xx_x19 )
$if xx_x2881 $then  $place [vars_for_bodyx_xlrx_xph] $else $place [vars_for_out] $endif 
//begin: basic-block for_bodyx_xlrx_xph
$merge vars_for_bodyx_xlrx_xph
$endmerge
$place [for_bodyx_xlrx_xph_for_body]
//begin: basic-block for_body
//   this is a do-while loop.
$merge for_bodyx_xlrx_xph_for_body
$endmerge
$dopipeline $depth 31 $buffering 7 
$fullrate
$merge $entry $loopback
$phi xx_x15886 :=  ( $cast ($uint<32>) xx_x159) $on $loopback ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on $entry
$phi xx_x13385 :=  ( $cast ($uint<64>) xx_x3553) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x14284 :=  ( $cast ($uint<64>) xx_x4055) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x15383 :=  ( $cast ($uint<64>) xx_x4456) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x1475882 :=  ( $cast ($uint<64>) xx_x14759) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$endmerge
xx_x37 := (xx_x13385 * xx_x36)
xx_x42 := (xx_x14284 * xx_x41)
xx_x43 := (xx_x37 + xx_x42)
xx_x45 := (xx_x15383 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 ) )
xx_x46 := (xx_x43 + xx_x45)
xx_x50 := ($cast ($uint<32>) xx_x46)
$call readModule_convolution (base_addr xx_x50 )  (xx_x51)
xx_x54 := ($slice xx_x51 63 56)
$call dequant_ker (xx_x54 ker_scale ker_zero_point )  (xx_x59)
ker_data := ($bitcast ( $uint<64> ) xx_x59 )
xx_x64 := ($slice xx_x51 55 48)
$call dequant_ker (xx_x64 ker_scale ker_zero_point )  (xx_x69)
ker_data := ($bitcast ( $uint<64> ) xx_x69 )
xx_x74 := ($slice xx_x51 47 40)
$call dequant_ker (xx_x74 ker_scale ker_zero_point )  (xx_x79)
ker_data := ($bitcast ( $uint<64> ) xx_x79 )
xx_x84 := ($slice xx_x51 39 32)
$call dequant_ker (xx_x84 ker_scale ker_zero_point )  (xx_x89)
ker_data := ($bitcast ( $uint<64> ) xx_x89 )
xx_x94 := ($slice xx_x51 31 24)
$call dequant_ker (xx_x94 ker_scale ker_zero_point )  (xx_x99)
ker_data := ($bitcast ( $uint<64> ) xx_x99 )
xx_x104 := ($slice xx_x51 23 16)
$call dequant_ker (xx_x104 ker_scale ker_zero_point )  (xx_x109)
ker_data := ($bitcast ( $uint<64> ) xx_x109 )
xx_x114 := ($slice xx_x51 15 8)
$call dequant_ker (xx_x114 ker_scale ker_zero_point )  (xx_x119)
ker_data := ($bitcast ( $uint<64> ) xx_x119 )
xx_x124 := ($slice xx_x51 7 0)
$call dequant_ker (xx_x124 ker_scale ker_zero_point )  (xx_x129)
ker_data := ($bitcast ( $uint<64> ) xx_x129 )
xx_x134 := (xx_x13385 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
// compare instruction
xx_x139 := (xx_x134 == xx_x138 )
for_body_if_true_taken := xx_x139
for_body_if_false_taken := ( ~xx_x139)
if_false_exec_guard := for_body_if_false_taken
//begin: basic-block if_false
if_false_if_next_taken := if_false_exec_guard
if_true_exec_guard := for_body_if_true_taken
//begin: basic-block if_true
$guard (if_true_exec_guard) xx_x143 := (xx_x14284 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
if_true_if_next_taken := if_true_exec_guard
if_next_exec_guard := (if_false_if_next_taken | if_true_if_next_taken )
//begin: basic-block if_next
xx_x147 := ($mux if_false_if_next_taken ( $bitcast ($uint<64>) xx_x1475882) ($mux if_true_if_next_taken ( $bitcast ($uint<64>) xx_x143) ($bitcast ($uint<64>) 0)))
xx_x3553 := ($mux if_false_if_next_taken ( $bitcast ($uint<64>) xx_x134) ($mux if_true_if_next_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) ($bitcast ($uint<64>) 0)))
// compare instruction
$guard (if_next_exec_guard) xx_x150 := (xx_x147 == xx_x138 )
if_next_if_truex_x1_taken := (if_next_exec_guard & xx_x150)
if_next_if_falsex_x1_taken := (if_next_exec_guard & (~xx_x150))
if_falsex_x1_exec_guard := if_next_if_falsex_x1_taken
//begin: basic-block if_falsex_x1
if_falsex_x1_if_nextx_x1_taken := if_falsex_x1_exec_guard
if_truex_x1_exec_guard := if_next_if_truex_x1_taken
//begin: basic-block if_truex_x1
$guard (if_truex_x1_exec_guard) xx_x154 := (xx_x15383 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
if_truex_x1_if_nextx_x1_taken := if_truex_x1_exec_guard
//begin: basic-block if_nextx_x1
xx_x14759 := ($mux if_falsex_x1_if_nextx_x1_taken ( $bitcast ($uint<64>) xx_x147) ($mux if_truex_x1_if_nextx_x1_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) ($bitcast ($uint<64>) 0)))
xx_x4456 := ($mux if_falsex_x1_if_nextx_x1_taken ( $bitcast ($uint<64>) xx_x15383) ($mux if_truex_x1_if_nextx_x1_taken ( $bitcast ($uint<64>) xx_x154) ($bitcast ($uint<64>) 0)))
xx_x4055 := ($mux if_falsex_x1_if_nextx_x1_taken ( $bitcast ($uint<64>) xx_x147) ($mux if_truex_x1_if_nextx_x1_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) ($bitcast ($uint<64>) 0)))
xx_x159 := (xx_x15886 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
// compare instruction
xx_x28 := (xx_x159 < xx_x19 )
if_nextx_x1_forx_xfor_out_crit_edge_taken := ( ~xx_x28)
$while xx_x28
$if if_nextx_x1_forx_xfor_out_crit_edge_taken $then 
  $place [if_nextx_x1_forx_xfor_out_crit_edge]
$endif
//begin: basic-block forx_xfor_out_crit_edge
$merge if_nextx_x1_forx_xfor_out_crit_edge
$phi split87 :=  ( $cast ($uint<8>) xx_x124) $on if_nextx_x1_forx_xfor_out_crit_edge 
$endmerge
$place [forx_xfor_out_crit_edge_for_out]
//begin: basic-block for_out
$merge forx_xfor_out_crit_edge_for_out vars_for_out
$phi xx_x269x_xpre71x_xlcssa :=  ( $cast ($uint<8>) split87) $on forx_xfor_out_crit_edge_for_out ( $cast ($uint<8>) ( $bitcast ($uint<8> ) _b0 ) ) $on vars_for_out 
$endmerge
xx_x164 := (groups + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
xx_x165 := (xx_x164 << ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
xx_x166 := (in_channels - xx_x165)
xx_x170 := (ker_size * ker_size)
xx_x174 := ($cast ($uint<64>) xx_x164)
xx_x186 := (groups << ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
xx_x188 := (xx_x186 * ker_size)
xx_x190 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) xx_x188) )
xx_x195 := ($cast ($uint<64>) xx_x186)
xx_x199 := (xx_x174 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 ) )
xx_x285 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) ker_size) )
// compare instruction
xx_x18276 := (( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  < xx_x170 )
$if xx_x18276 $then  $place [for_out_for_bodyx_x1x_xlrx_xph] $else $place [for_out_for_outx_x2] $endif 
//begin: basic-block for_bodyx_x1x_xlrx_xph
$merge for_out_for_bodyx_x1x_xlrx_xph
$endmerge
$place [for_bodyx_x1x_xlrx_xph_for_bodyx_x1]
//begin: basic-block for_bodyx_x1
$merge for_bodyx_x1x_xlrx_xph_for_bodyx_x1 if_nextx_x10_for_bodyx_x1
$phi xx_x29480 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on for_bodyx_x1x_xlrx_xph_for_bodyx_x1 ( $cast ($uint<32>) xx_x295) $on if_nextx_x10_for_bodyx_x1 
$phi xx_x28079 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on for_bodyx_x1x_xlrx_xph_for_bodyx_x1 ( $cast ($uint<64>) xx_x1899) $on if_nextx_x10_for_bodyx_x1 
$phi xx_x28978 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on for_bodyx_x1x_xlrx_xph_for_bodyx_x1 ( $cast ($uint<64>) xx_x19410) $on if_nextx_x10_for_bodyx_x1 
$phi xx_x269x_xpre6177 :=  ( $cast ($uint<8>) xx_x269x_xpre71x_xlcssa) $on for_bodyx_x1x_xlrx_xph_for_bodyx_x1 ( $cast ($uint<8>) xx_x269x_xpre68x_xlcssa) $on if_nextx_x10_for_bodyx_x1 
$endmerge
xx_x191 := (xx_x28079 * xx_x190)
xx_x196 := (xx_x28978 * xx_x195)
xx_x197 := (xx_x191 + xx_x196)
xx_x200 := (xx_x197 + xx_x199)
xx_x204 := ($cast ($uint<32>) xx_x200)
$call readModule_convolution (base_addr xx_x204 )  (xx_x205)
// compare instruction
xx_x21173 := (( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  < xx_x166 )
$if xx_x21173 $then  $place [for_bodyx_x1_for_bodyx_x2x_xlrx_xph] $else $place [for_bodyx_x1_for_outx_x1] $endif 
//begin: basic-block for_bodyx_x2x_xlrx_xph
$merge for_bodyx_x1_for_bodyx_x2x_xlrx_xph
$endmerge
$place [for_bodyx_x2x_xlrx_xph_for_bodyx_x2]
//begin: basic-block for_bodyx_x2
$merge for_bodyx_x2x_xlrx_xph_for_bodyx_x2 if_nextx_x9_for_bodyx_x2
$phi xx_x27675 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on for_bodyx_x2x_xlrx_xph_for_bodyx_x2 ( $cast ($uint<32>) xx_x277) $on if_nextx_x9_for_bodyx_x2 
$phi xx_x269x_xpre6874 :=  ( $cast ($uint<8>) xx_x269x_xpre6177) $on for_bodyx_x2x_xlrx_xph_for_bodyx_x2 ( $cast ($uint<8>) xx_x269x_xpre69) $on if_nextx_x9_for_bodyx_x2 
$endmerge
// compare instruction
xx_x213 := (xx_x27675 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  )
$if xx_x213 $then  $place [for_bodyx_x2_if_truex_x2] $else $place [for_bodyx_x2_if_falsex_x2] $endif 
//begin: basic-block if_truex_x2
$merge for_bodyx_x2_if_truex_x2
$endmerge
xx_x216 := ($slice xx_x205 63 56)
$place [if_truex_x2_if_nextx_x9]
//begin: basic-block if_falsex_x2
$merge for_bodyx_x2_if_falsex_x2
$endmerge
// compare instruction
xx_x219 := (xx_x27675 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 )  )
$if xx_x219 $then  $place [if_falsex_x2_if_truex_x3] $else $place [if_falsex_x2_if_falsex_x3] $endif 
//begin: basic-block if_truex_x3
$merge if_falsex_x2_if_truex_x3
$endmerge
xx_x222 := ($slice xx_x205 55 48)
$place [if_truex_x3_if_nextx_x8]
//begin: basic-block if_falsex_x3
$merge if_falsex_x2_if_falsex_x3
$endmerge
// compare instruction
xx_x225 := (xx_x27675 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )
$if xx_x225 $then  $place [if_falsex_x3_if_truex_x4] $else $place [if_falsex_x3_if_falsex_x4] $endif 
//begin: basic-block if_truex_x4
$merge if_falsex_x3_if_truex_x4
$endmerge
xx_x228 := ($slice xx_x205 47 40)
$place [if_truex_x4_if_nextx_x7]
//begin: basic-block if_falsex_x4
$merge if_falsex_x3_if_falsex_x4
$endmerge
// compare instruction
xx_x231 := (xx_x27675 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 )  )
$if xx_x231 $then  $place [if_falsex_x4_if_truex_x5] $else $place [if_falsex_x4_if_falsex_x5] $endif 
//begin: basic-block if_truex_x5
$merge if_falsex_x4_if_truex_x5
$endmerge
xx_x234 := ($slice xx_x205 39 32)
$place [if_truex_x5_if_nextx_x6]
//begin: basic-block if_falsex_x5
$merge if_falsex_x4_if_falsex_x5
$endmerge
// compare instruction
xx_x237 := (xx_x27675 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 )  )
$if xx_x237 $then  $place [if_falsex_x5_if_truex_x6] $else $place [if_falsex_x5_if_falsex_x6] $endif 
//begin: basic-block if_truex_x6
$merge if_falsex_x5_if_truex_x6
$endmerge
xx_x240 := ($slice xx_x205 31 24)
$place [if_truex_x6_if_nextx_x5]
//begin: basic-block if_falsex_x6
$merge if_falsex_x5_if_falsex_x6
$endmerge
// compare instruction
xx_x243 := (xx_x27675 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000101 )  )
$if xx_x243 $then  $place [if_falsex_x6_if_truex_x7] $else $place [if_falsex_x6_if_falsex_x7] $endif 
//begin: basic-block if_truex_x7
$merge if_falsex_x6_if_truex_x7
$endmerge
xx_x246 := ($slice xx_x205 23 16)
$place [if_truex_x7_if_nextx_x4]
//begin: basic-block if_falsex_x7
$merge if_falsex_x6_if_falsex_x7
$endmerge
// compare instruction
xx_x249 := (xx_x27675 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000110 )  )
$if xx_x249 $then  $place [if_falsex_x7_if_truex_x8] $else $place [if_falsex_x7_if_falsex_x8] $endif 
//begin: basic-block if_truex_x8
$merge if_falsex_x7_if_truex_x8
$endmerge
xx_x252 := ($slice xx_x205 15 8)
$place [if_truex_x8_if_nextx_x3]
//begin: basic-block if_falsex_x8
$merge if_falsex_x7_if_falsex_x8
$endmerge
// compare instruction
xx_x255 := (xx_x27675 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000111 )  )
$if xx_x255 $then  $place [if_falsex_x8_if_truex_x9] $else $place [if_falsex_x8_if_falsex_x9] $endif 
//begin: basic-block if_truex_x9
$merge if_falsex_x8_if_truex_x9
$endmerge
xx_x258 := ($slice xx_x205 7 0)
$place [if_truex_x9_if_nextx_x2]
//begin: basic-block if_falsex_x9
$merge if_falsex_x8_if_falsex_x9
$endmerge
$place [if_falsex_x9_if_nextx_x2]
//begin: basic-block if_nextx_x2
$merge if_falsex_x9_if_nextx_x2 if_truex_x9_if_nextx_x2
$phi xx_x269x_xpre67 :=  ( $cast ($uint<8>) xx_x269x_xpre6874) $on if_falsex_x9_if_nextx_x2 ( $cast ($uint<8>) xx_x258) $on if_truex_x9_if_nextx_x2 
$endmerge
$place [if_nextx_x2_if_nextx_x3]
//begin: basic-block if_nextx_x3
$merge if_nextx_x2_if_nextx_x3 if_truex_x8_if_nextx_x3
$phi xx_x269x_xpre66 :=  ( $cast ($uint<8>) xx_x269x_xpre67) $on if_nextx_x2_if_nextx_x3 ( $cast ($uint<8>) xx_x252) $on if_truex_x8_if_nextx_x3 
$endmerge
$place [if_nextx_x3_if_nextx_x4]
//begin: basic-block if_nextx_x4
$merge if_nextx_x3_if_nextx_x4 if_truex_x7_if_nextx_x4
$phi xx_x269x_xpre65 :=  ( $cast ($uint<8>) xx_x269x_xpre66) $on if_nextx_x3_if_nextx_x4 ( $cast ($uint<8>) xx_x246) $on if_truex_x7_if_nextx_x4 
$endmerge
$place [if_nextx_x4_if_nextx_x5]
//begin: basic-block if_nextx_x5
$merge if_nextx_x4_if_nextx_x5 if_truex_x6_if_nextx_x5
$phi xx_x269x_xpre64 :=  ( $cast ($uint<8>) xx_x269x_xpre65) $on if_nextx_x4_if_nextx_x5 ( $cast ($uint<8>) xx_x240) $on if_truex_x6_if_nextx_x5 
$endmerge
$place [if_nextx_x5_if_nextx_x6]
//begin: basic-block if_nextx_x6
$merge if_nextx_x5_if_nextx_x6 if_truex_x5_if_nextx_x6
$phi xx_x269x_xpre63 :=  ( $cast ($uint<8>) xx_x269x_xpre64) $on if_nextx_x5_if_nextx_x6 ( $cast ($uint<8>) xx_x234) $on if_truex_x5_if_nextx_x6 
$endmerge
$place [if_nextx_x6_if_nextx_x7]
//begin: basic-block if_nextx_x7
$merge if_nextx_x6_if_nextx_x7 if_truex_x4_if_nextx_x7
$phi xx_x269x_xpre62 :=  ( $cast ($uint<8>) xx_x269x_xpre63) $on if_nextx_x6_if_nextx_x7 ( $cast ($uint<8>) xx_x228) $on if_truex_x4_if_nextx_x7 
$endmerge
$place [if_nextx_x7_if_nextx_x8]
//begin: basic-block if_nextx_x8
$merge if_nextx_x7_if_nextx_x8 if_truex_x3_if_nextx_x8
$phi xx_x269x_xpre :=  ( $cast ($uint<8>) xx_x269x_xpre62) $on if_nextx_x7_if_nextx_x8 ( $cast ($uint<8>) xx_x222) $on if_truex_x3_if_nextx_x8 
$endmerge
$place [if_nextx_x8_if_nextx_x9]
//begin: basic-block if_nextx_x9
$merge if_nextx_x8_if_nextx_x9 if_truex_x2_if_nextx_x9
$phi xx_x269x_xpre69 :=  ( $cast ($uint<8>) xx_x269x_xpre) $on if_nextx_x8_if_nextx_x9 ( $cast ($uint<8>) xx_x216) $on if_truex_x2_if_nextx_x9 
$phi xx_x269 :=  ( $cast ($uint<8>) xx_x269x_xpre) $on if_nextx_x8_if_nextx_x9 ( $cast ($uint<8>) xx_x216) $on if_truex_x2_if_nextx_x9 
$endmerge
$call dequant_ker (xx_x269 ker_scale ker_zero_point )  (xx_x272)
ker_data := ($bitcast ( $uint<64> ) xx_x272 )
xx_x277 := (xx_x27675 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
// compare instruction
xx_x211 := (xx_x277 < xx_x166 )
$if xx_x211 $then  $place [if_nextx_x9_for_bodyx_x2] $else $place [if_nextx_x9_forx_x2x_xfor_outx_x1_crit_edge] $endif 
//begin: basic-block forx_x2x_xfor_outx_x1_crit_edge
$merge if_nextx_x9_forx_x2x_xfor_outx_x1_crit_edge
$phi split :=  ( $cast ($uint<8>) xx_x269x_xpre69) $on if_nextx_x9_forx_x2x_xfor_outx_x1_crit_edge 
$endmerge
$place [forx_x2x_xfor_outx_x1_crit_edge_for_outx_x1]
//begin: basic-block for_outx_x1
$merge for_bodyx_x1_for_outx_x1 forx_x2x_xfor_outx_x1_crit_edge_for_outx_x1
$phi xx_x269x_xpre68x_xlcssa :=  ( $cast ($uint<8>) split) $on forx_x2x_xfor_outx_x1_crit_edge_for_outx_x1 ( $cast ($uint<8>) xx_x269x_xpre6177) $on for_bodyx_x1_for_outx_x1 
$endmerge
xx_x281 := (xx_x28079 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
// compare instruction
xx_x286 := (xx_x281 == xx_x285 )
$if xx_x286 $then  $place [for_outx_x1_if_truex_x10] $else $place [for_outx_x1_if_falsex_x10] $endif 
//begin: basic-block if_truex_x10
$merge for_outx_x1_if_truex_x10
$endmerge
xx_x290 := (xx_x28978 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
$place [if_truex_x10_if_nextx_x10]
//begin: basic-block if_falsex_x10
$merge for_outx_x1_if_falsex_x10
$endmerge
$place [if_falsex_x10_if_nextx_x10]
//begin: basic-block if_nextx_x10
$merge if_falsex_x10_if_nextx_x10 if_truex_x10_if_nextx_x10
$phi xx_x19410 :=  ( $cast ($uint<64>) xx_x28978) $on if_falsex_x10_if_nextx_x10 ( $cast ($uint<64>) xx_x290) $on if_truex_x10_if_nextx_x10 
$phi xx_x1899 :=  ( $cast ($uint<64>) xx_x281) $on if_falsex_x10_if_nextx_x10 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on if_truex_x10_if_nextx_x10 
$endmerge
xx_x295 := (xx_x29480 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
// compare instruction
xx_x182 := (xx_x295 < xx_x170 )
$if xx_x182 $then  $place [if_nextx_x10_for_bodyx_x1] $else $place [if_nextx_x10_forx_x1x_xfor_outx_x2_crit_edge] $endif 
//begin: basic-block forx_x1x_xfor_outx_x2_crit_edge
$merge if_nextx_x10_forx_x1x_xfor_outx_x2_crit_edge
$endmerge
$place [forx_x1x_xfor_outx_x2_crit_edge_for_outx_x2]
//begin: basic-block for_outx_x2
$merge for_out_for_outx_x2 forx_x1x_xfor_outx_x2_crit_edge_for_outx_x2
$endmerge
}
}
$module [writeInpPipePartial] 
 $in (data : $uint<64> num_chn_present : $uint<32> cur_stride_movement : $uint<8> inp_scale : $float<8,23> inp_zero_point : $float<8,23> )
 $out ()
 $is 
{
$branchblock [body] {
//begin: basic-block vars
// compare instruction
xx_x87 := (cur_stride_movement == ( $bitcast ($uint<8> ) _b00000010 )  )
// compare instruction
xx_x1648 := (( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  < num_chn_present )
$if xx_x1648 $then  $place [vars_for_bodyx_xlrx_xph] $else $place [vars_for_out] $endif 
//begin: basic-block for_bodyx_xlrx_xph
$merge vars_for_bodyx_xlrx_xph
$endmerge
$place [for_bodyx_xlrx_xph_for_body]
//begin: basic-block for_body
//   this is a do-while loop.
$merge for_bodyx_xlrx_xph_for_body
$endmerge
$dopipeline $depth 31 $buffering 7 
$fullrate
$merge $entry $loopback
$phi xx_x9451 :=  ( $cast ($uint<32>) xx_x95) $on $loopback ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on $entry
$phi xx_x754450 :=  ( $cast ($uint<8>) xx_x75) $on $loopback ( $cast ($uint<8>) ( $bitcast ($uint<8> ) _b0 ) ) $on $entry
$phi xx_x8049 :=  ( $cast ($uint<8>) xx_x8046) $on $loopback ( $cast ($uint<8>) cur_stride_movement) $on $entry
$endmerge
// compare instruction
xx_x19 := (xx_x9451 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  )
for_body_if_true_taken := xx_x19
for_body_if_false_taken := ( ~xx_x19)
if_false_exec_guard := for_body_if_false_taken
//begin: basic-block if_false
// compare instruction
$guard (if_false_exec_guard) xx_x25 := (xx_x9451 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 )  )
if_false_if_truex_x1_taken := (if_false_exec_guard & xx_x25)
if_false_if_falsex_x1_taken := (if_false_exec_guard & (~xx_x25))
if_falsex_x1_exec_guard := if_false_if_falsex_x1_taken
//begin: basic-block if_falsex_x1
// compare instruction
$guard (if_falsex_x1_exec_guard) xx_x31 := (xx_x9451 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 )  )
if_falsex_x1_if_truex_x2_taken := (if_falsex_x1_exec_guard & xx_x31)
if_falsex_x1_if_falsex_x2_taken := (if_falsex_x1_exec_guard & (~xx_x31))
if_falsex_x2_exec_guard := if_falsex_x1_if_falsex_x2_taken
//begin: basic-block if_falsex_x2
// compare instruction
$guard (if_falsex_x2_exec_guard) xx_x37 := (xx_x9451 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 )  )
if_falsex_x2_if_truex_x3_taken := (if_falsex_x2_exec_guard & xx_x37)
if_falsex_x2_if_falsex_x3_taken := (if_falsex_x2_exec_guard & (~xx_x37))
if_falsex_x3_exec_guard := if_falsex_x2_if_falsex_x3_taken
//begin: basic-block if_falsex_x3
// compare instruction
$guard (if_falsex_x3_exec_guard) xx_x43 := (xx_x9451 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000100 )  )
if_falsex_x3_if_truex_x4_taken := (if_falsex_x3_exec_guard & xx_x43)
if_falsex_x3_if_falsex_x4_taken := (if_falsex_x3_exec_guard & (~xx_x43))
if_falsex_x4_exec_guard := if_falsex_x3_if_falsex_x4_taken
//begin: basic-block if_falsex_x4
// compare instruction
$guard (if_falsex_x4_exec_guard) xx_x49 := (xx_x9451 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000101 )  )
if_falsex_x4_if_truex_x5_taken := (if_falsex_x4_exec_guard & xx_x49)
if_falsex_x4_if_falsex_x5_taken := (if_falsex_x4_exec_guard & (~xx_x49))
if_falsex_x5_exec_guard := if_falsex_x4_if_falsex_x5_taken
//begin: basic-block if_falsex_x5
// compare instruction
$guard (if_falsex_x5_exec_guard) xx_x55 := (xx_x9451 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000110 )  )
if_falsex_x5_if_truex_x6_taken := (if_falsex_x5_exec_guard & xx_x55)
if_falsex_x5_if_falsex_x6_taken := (if_falsex_x5_exec_guard & (~xx_x55))
if_falsex_x6_exec_guard := if_falsex_x5_if_falsex_x6_taken
//begin: basic-block if_falsex_x6
// compare instruction
$guard (if_falsex_x6_exec_guard) xx_x61 := (xx_x9451 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000111 )  )
if_falsex_x6_if_truex_x7_taken := (if_falsex_x6_exec_guard & xx_x61)
if_falsex_x6_if_falsex_x7_taken := (if_falsex_x6_exec_guard & (~xx_x61))
if_falsex_x7_exec_guard := if_falsex_x6_if_falsex_x7_taken
//begin: basic-block if_falsex_x7
if_falsex_x7_if_next_taken := if_falsex_x7_exec_guard
if_truex_x7_exec_guard := if_falsex_x6_if_truex_x7_taken
//begin: basic-block if_truex_x7
$guard (if_truex_x7_exec_guard) xx_x64 := ($slice data 7 0)
if_truex_x7_if_next_taken := if_truex_x7_exec_guard
if_next_exec_guard := (if_falsex_x7_if_next_taken | if_truex_x7_if_next_taken )
//begin: basic-block if_next
xx_x7543 := ($mux if_falsex_x7_if_next_taken ( $bitcast ($uint<8>) xx_x754450) ($mux if_truex_x7_if_next_taken ( $bitcast ($uint<8>) xx_x64) ($bitcast ($uint<8>) 0)))
if_next_if_nextx_x1_taken := if_next_exec_guard
if_truex_x6_exec_guard := if_falsex_x5_if_truex_x6_taken
//begin: basic-block if_truex_x6
$guard (if_truex_x6_exec_guard) xx_x58 := ($slice data 15 8)
if_truex_x6_if_nextx_x1_taken := if_truex_x6_exec_guard
if_nextx_x1_exec_guard := (if_next_if_nextx_x1_taken | if_truex_x6_if_nextx_x1_taken )
//begin: basic-block if_nextx_x1
xx_x7542 := ($mux if_next_if_nextx_x1_taken ( $bitcast ($uint<8>) xx_x7543) ($mux if_truex_x6_if_nextx_x1_taken ( $bitcast ($uint<8>) xx_x58) ($bitcast ($uint<8>) 0)))
if_nextx_x1_if_nextx_x2_taken := if_nextx_x1_exec_guard
if_truex_x5_exec_guard := if_falsex_x4_if_truex_x5_taken
//begin: basic-block if_truex_x5
$guard (if_truex_x5_exec_guard) xx_x52 := ($slice data 23 16)
if_truex_x5_if_nextx_x2_taken := if_truex_x5_exec_guard
if_nextx_x2_exec_guard := (if_nextx_x1_if_nextx_x2_taken | if_truex_x5_if_nextx_x2_taken )
//begin: basic-block if_nextx_x2
xx_x7541 := ($mux if_nextx_x1_if_nextx_x2_taken ( $bitcast ($uint<8>) xx_x7542) ($mux if_truex_x5_if_nextx_x2_taken ( $bitcast ($uint<8>) xx_x52) ($bitcast ($uint<8>) 0)))
if_nextx_x2_if_nextx_x3_taken := if_nextx_x2_exec_guard
if_truex_x4_exec_guard := if_falsex_x3_if_truex_x4_taken
//begin: basic-block if_truex_x4
$guard (if_truex_x4_exec_guard) xx_x46 := ($slice data 31 24)
if_truex_x4_if_nextx_x3_taken := if_truex_x4_exec_guard
if_nextx_x3_exec_guard := (if_nextx_x2_if_nextx_x3_taken | if_truex_x4_if_nextx_x3_taken )
//begin: basic-block if_nextx_x3
xx_x7540 := ($mux if_nextx_x2_if_nextx_x3_taken ( $bitcast ($uint<8>) xx_x7541) ($mux if_truex_x4_if_nextx_x3_taken ( $bitcast ($uint<8>) xx_x46) ($bitcast ($uint<8>) 0)))
if_nextx_x3_if_nextx_x4_taken := if_nextx_x3_exec_guard
if_truex_x3_exec_guard := if_falsex_x2_if_truex_x3_taken
//begin: basic-block if_truex_x3
$guard (if_truex_x3_exec_guard) xx_x40 := ($slice data 39 32)
if_truex_x3_if_nextx_x4_taken := if_truex_x3_exec_guard
if_nextx_x4_exec_guard := (if_nextx_x3_if_nextx_x4_taken | if_truex_x3_if_nextx_x4_taken )
//begin: basic-block if_nextx_x4
xx_x7539 := ($mux if_nextx_x3_if_nextx_x4_taken ( $bitcast ($uint<8>) xx_x7540) ($mux if_truex_x3_if_nextx_x4_taken ( $bitcast ($uint<8>) xx_x40) ($bitcast ($uint<8>) 0)))
if_nextx_x4_if_nextx_x5_taken := if_nextx_x4_exec_guard
if_truex_x2_exec_guard := if_falsex_x1_if_truex_x2_taken
//begin: basic-block if_truex_x2
$guard (if_truex_x2_exec_guard) xx_x34 := ($slice data 47 40)
if_truex_x2_if_nextx_x5_taken := if_truex_x2_exec_guard
if_nextx_x5_exec_guard := (if_nextx_x4_if_nextx_x5_taken | if_truex_x2_if_nextx_x5_taken )
//begin: basic-block if_nextx_x5
xx_x7538 := ($mux if_nextx_x4_if_nextx_x5_taken ( $bitcast ($uint<8>) xx_x7539) ($mux if_truex_x2_if_nextx_x5_taken ( $bitcast ($uint<8>) xx_x34) ($bitcast ($uint<8>) 0)))
if_nextx_x5_if_nextx_x6_taken := if_nextx_x5_exec_guard
if_truex_x1_exec_guard := if_false_if_truex_x1_taken
//begin: basic-block if_truex_x1
$guard (if_truex_x1_exec_guard) xx_x28 := ($slice data 55 48)
if_truex_x1_if_nextx_x6_taken := if_truex_x1_exec_guard
if_nextx_x6_exec_guard := (if_nextx_x5_if_nextx_x6_taken | if_truex_x1_if_nextx_x6_taken )
//begin: basic-block if_nextx_x6
xx_x7537 := ($mux if_nextx_x5_if_nextx_x6_taken ( $bitcast ($uint<8>) xx_x7538) ($mux if_truex_x1_if_nextx_x6_taken ( $bitcast ($uint<8>) xx_x28) ($bitcast ($uint<8>) 0)))
if_nextx_x6_if_nextx_x7_taken := if_nextx_x6_exec_guard
if_true_exec_guard := for_body_if_true_taken
//begin: basic-block if_true
$guard (if_true_exec_guard) xx_x22 := ($slice data 63 56)
if_true_if_nextx_x7_taken := if_true_exec_guard
if_nextx_x7_exec_guard := (if_nextx_x6_if_nextx_x7_taken | if_true_if_nextx_x7_taken )
//begin: basic-block if_nextx_x7
xx_x75 := ($mux if_nextx_x6_if_nextx_x7_taken ( $bitcast ($uint<8>) xx_x7537) ($mux if_true_if_nextx_x7_taken ( $bitcast ($uint<8>) xx_x22) ($bitcast ($uint<8>) 0)))
$guard (if_nextx_x7_exec_guard) $call dequant_inp (xx_x75 inp_scale inp_zero_point )  (xx_x78)
// compare instruction
$guard (if_nextx_x7_exec_guard) xx_x81 := (xx_x8049 == ( $bitcast ($uint<8> ) _b00000001 )  )
if_nextx_x7_if_truex_x8_taken := (if_nextx_x7_exec_guard & xx_x81)
if_nextx_x7_if_falsex_x8_taken := (if_nextx_x7_exec_guard & (~xx_x81))
if_falsex_x8_exec_guard := if_nextx_x7_if_falsex_x8_taken
//begin: basic-block if_falsex_x8
if_falsex_x8_if_truex_x9_taken := (if_falsex_x8_exec_guard & xx_x87)
if_falsex_x8_if_falsex_x9_taken := (if_falsex_x8_exec_guard & (~xx_x87))
if_falsex_x9_exec_guard := if_falsex_x8_if_falsex_x9_taken
//begin: basic-block if_falsex_x9
if_falsex_x9_if_nextx_x8_taken := if_falsex_x9_exec_guard
if_truex_x9_exec_guard := if_falsex_x8_if_truex_x9_taken
//begin: basic-block if_truex_x9
$guard (if_truex_x9_exec_guard) in_data_0 := xx_x78
if_truex_x9_if_nextx_x8_taken := if_truex_x9_exec_guard
if_nextx_x8_exec_guard := (if_falsex_x9_if_nextx_x8_taken | if_truex_x9_if_nextx_x8_taken )
//begin: basic-block if_nextx_x8
if_nextx_x8_if_nextx_x9_taken := if_nextx_x8_exec_guard
if_truex_x8_exec_guard := if_nextx_x7_if_truex_x8_taken
//begin: basic-block if_truex_x8
$guard (if_truex_x8_exec_guard) in_data_4 := xx_x78
if_truex_x8_if_nextx_x9_taken := if_truex_x8_exec_guard
//begin: basic-block if_nextx_x9
xx_x8046 := ($mux if_nextx_x8_if_nextx_x9_taken ( $bitcast ($uint<8>) cur_stride_movement) ($mux if_truex_x8_if_nextx_x9_taken ( $bitcast ($uint<8>) ( $bitcast ($uint<8> ) _b00000001 ) ) ($bitcast ($uint<8>) 0)))
xx_x95 := (xx_x9451 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
// compare instruction
xx_x16 := (xx_x95 < num_chn_present )
if_nextx_x9_forx_xfor_out_crit_edge_taken := ( ~xx_x16)
$while xx_x16
$if if_nextx_x9_forx_xfor_out_crit_edge_taken $then 
  $place [if_nextx_x9_forx_xfor_out_crit_edge]
$endif
//begin: basic-block forx_xfor_out_crit_edge
$merge if_nextx_x9_forx_xfor_out_crit_edge
$endmerge
$place [forx_xfor_out_crit_edge_for_out]
//begin: basic-block for_out
$merge forx_xfor_out_crit_edge_for_out vars_for_out
$endmerge
}
}
$module [fetchHorSlice] 
 $in (base_addr : $uint<32> ker_size : $uint<32> in_channels : $uint<32> groups : $uint<32> col : $uint<32> rowStartInd : $uint<32> in_cols : $uint<32> inp_scale : $float<8,23> inp_zero_point : $float<8,23> )
 $out ()
 $is 
{
$branchblock [body] {
//begin: basic-block vars
xx_x24 := (ker_size * groups)
xx_x34 := (groups << ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
xx_x36 := (xx_x34 * in_cols)
xx_x39 := (rowStartInd + ker_size)
xx_x40 := (xx_x39 + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
xx_x41 := (xx_x36 * xx_x40)
xx_x62 := ($cast ($uint<64>) in_channels)
xx_x70 := ($cast ($uint<64>) in_channels)
xx_x153 := ($cast ($uint<64>) groups)
// compare instruction
xx_x3159 := (( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  < xx_x24 )
$if xx_x3159 $then  $place [vars_for_bodyx_xlrx_xph] $else $place [vars_for_outx_x1] $endif 
//begin: basic-block for_bodyx_xlrx_xph
$merge vars_for_bodyx_xlrx_xph
$endmerge
$place [for_bodyx_xlrx_xph_for_body]
//begin: basic-block for_body
$merge for_bodyx_xlrx_xph_for_body if_nextx_x9_for_body
$phi xx_x16263 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<32>) xx_x163) $on if_nextx_x9_for_body 
$phi xx_x15762 :=  ( $cast ($uint<32>) col) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<32>) xx_x443) $on if_nextx_x9_for_body 
$phi xx_x14861 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<64>) xx_x476) $on if_nextx_x9_for_body 
$phi xx_x1374660 :=  ( $cast ($uint<8>) ( $bitcast ($uint<8> ) _b0 ) ) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<8>) xx_x13754x_xlcssa) $on if_nextx_x9_for_body 
$endmerge
xx_x45 := (xx_x34 * xx_x15762)
xx_x46 := (xx_x41 + xx_x45)
xx_x48 := (xx_x14861 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 ) )
iNsTr_3 := ($cast ($uint<32>) xx_x48)
xx_x54 := (xx_x46 + iNsTr_3)
$call readModule_convolution (base_addr xx_x54 )  (xx_x55)
xx_x60 := (xx_x14861 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
xx_x61 := (xx_x60 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 ) )
// compare instruction
xx_x63x_xnot := ( ($bitcast ( $int<64>) xx_x61) >  ($bitcast ( $int<64>) xx_x62 ) )
$if xx_x63x_xnot $then  $place [for_body_if_false] $else $place [for_body_if_true] $endif 
//begin: basic-block if_true
$merge for_body_if_true
$endmerge
$place [if_true_if_next]
//begin: basic-block if_false
$merge for_body_if_false
$endmerge
xx_x71 := (xx_x70 - xx_x48)
$place [if_false_if_next]
//begin: basic-block if_next
$merge if_false_if_next if_true_if_next
$phi xx_x74 :=  ( $cast ($uint<64>) xx_x71) $on if_false_if_next ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) ) $on if_true_if_next 
$endmerge
// compare instruction
xx_x7856 := (( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  < xx_x74 )
$if xx_x7856 $then  $place [if_next_for_bodyx_x1x_xlrx_xph] $else $place [if_next_for_out] $endif 
//begin: basic-block for_bodyx_x1x_xlrx_xph
$merge if_next_for_bodyx_x1x_xlrx_xph
$endmerge
$place [for_bodyx_x1x_xlrx_xph_for_bodyx_x1]
//begin: basic-block for_bodyx_x1
//   this is a do-while loop.
$merge for_bodyx_x1x_xlrx_xph_for_bodyx_x1
$endmerge
$dopipeline $depth 31 $buffering 7 
$fullrate
$merge $entry $loopback
$phi xx_x14458 :=  ( $cast ($uint<64>) xx_x145) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x1375457 :=  ( $cast ($uint<8>) xx_x137) $on $loopback ( $cast ($uint<8>) xx_x1374660) $on $entry
$endmerge
// compare instruction
xx_x81 := (xx_x14458 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
for_bodyx_x1_if_truex_x1_taken := xx_x81
for_bodyx_x1_if_falsex_x1_taken := ( ~xx_x81)
if_falsex_x1_exec_guard := for_bodyx_x1_if_falsex_x1_taken
//begin: basic-block if_falsex_x1
// compare instruction
$guard (if_falsex_x1_exec_guard) xx_x87 := (xx_x14458 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  )
if_falsex_x1_if_truex_x2_taken := (if_falsex_x1_exec_guard & xx_x87)
if_falsex_x1_if_falsex_x2_taken := (if_falsex_x1_exec_guard & (~xx_x87))
if_falsex_x2_exec_guard := if_falsex_x1_if_falsex_x2_taken
//begin: basic-block if_falsex_x2
// compare instruction
$guard (if_falsex_x2_exec_guard) xx_x93 := (xx_x14458 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 )  )
if_falsex_x2_if_truex_x3_taken := (if_falsex_x2_exec_guard & xx_x93)
if_falsex_x2_if_falsex_x3_taken := (if_falsex_x2_exec_guard & (~xx_x93))
if_falsex_x3_exec_guard := if_falsex_x2_if_falsex_x3_taken
//begin: basic-block if_falsex_x3
// compare instruction
$guard (if_falsex_x3_exec_guard) xx_x99 := (xx_x14458 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 )  )
if_falsex_x3_if_truex_x4_taken := (if_falsex_x3_exec_guard & xx_x99)
if_falsex_x3_if_falsex_x4_taken := (if_falsex_x3_exec_guard & (~xx_x99))
if_falsex_x4_exec_guard := if_falsex_x3_if_falsex_x4_taken
//begin: basic-block if_falsex_x4
// compare instruction
$guard (if_falsex_x4_exec_guard) xx_x105 := (xx_x14458 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000100 )  )
if_falsex_x4_if_truex_x5_taken := (if_falsex_x4_exec_guard & xx_x105)
if_falsex_x4_if_falsex_x5_taken := (if_falsex_x4_exec_guard & (~xx_x105))
if_falsex_x5_exec_guard := if_falsex_x4_if_falsex_x5_taken
//begin: basic-block if_falsex_x5
// compare instruction
$guard (if_falsex_x5_exec_guard) xx_x111 := (xx_x14458 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000101 )  )
if_falsex_x5_if_truex_x6_taken := (if_falsex_x5_exec_guard & xx_x111)
if_falsex_x5_if_falsex_x6_taken := (if_falsex_x5_exec_guard & (~xx_x111))
if_falsex_x6_exec_guard := if_falsex_x5_if_falsex_x6_taken
//begin: basic-block if_falsex_x6
// compare instruction
$guard (if_falsex_x6_exec_guard) xx_x117 := (xx_x14458 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000110 )  )
if_falsex_x6_if_truex_x7_taken := (if_falsex_x6_exec_guard & xx_x117)
if_falsex_x6_if_falsex_x7_taken := (if_falsex_x6_exec_guard & (~xx_x117))
if_falsex_x7_exec_guard := if_falsex_x6_if_falsex_x7_taken
//begin: basic-block if_falsex_x7
// compare instruction
$guard (if_falsex_x7_exec_guard) xx_x123 := (xx_x14458 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000111 )  )
if_falsex_x7_if_truex_x8_taken := (if_falsex_x7_exec_guard & xx_x123)
if_falsex_x7_if_falsex_x8_taken := (if_falsex_x7_exec_guard & (~xx_x123))
if_falsex_x8_exec_guard := if_falsex_x7_if_falsex_x8_taken
//begin: basic-block if_falsex_x8
if_falsex_x8_if_nextx_x1_taken := if_falsex_x8_exec_guard
if_truex_x8_exec_guard := if_falsex_x7_if_truex_x8_taken
//begin: basic-block if_truex_x8
$guard (if_truex_x8_exec_guard) xx_x126 := ($slice xx_x55 7 0)
if_truex_x8_if_nextx_x1_taken := if_truex_x8_exec_guard
if_nextx_x1_exec_guard := (if_falsex_x8_if_nextx_x1_taken | if_truex_x8_if_nextx_x1_taken )
//begin: basic-block if_nextx_x1
xx_x13753 := ($mux if_falsex_x8_if_nextx_x1_taken ( $bitcast ($uint<8>) xx_x1375457) ($mux if_truex_x8_if_nextx_x1_taken ( $bitcast ($uint<8>) xx_x126) ($bitcast ($uint<8>) 0)))
if_nextx_x1_if_nextx_x2_taken := if_nextx_x1_exec_guard
if_truex_x7_exec_guard := if_falsex_x6_if_truex_x7_taken
//begin: basic-block if_truex_x7
$guard (if_truex_x7_exec_guard) xx_x120 := ($slice xx_x55 15 8)
if_truex_x7_if_nextx_x2_taken := if_truex_x7_exec_guard
if_nextx_x2_exec_guard := (if_nextx_x1_if_nextx_x2_taken | if_truex_x7_if_nextx_x2_taken )
//begin: basic-block if_nextx_x2
xx_x13752 := ($mux if_nextx_x1_if_nextx_x2_taken ( $bitcast ($uint<8>) xx_x13753) ($mux if_truex_x7_if_nextx_x2_taken ( $bitcast ($uint<8>) xx_x120) ($bitcast ($uint<8>) 0)))
if_nextx_x2_if_nextx_x3_taken := if_nextx_x2_exec_guard
if_truex_x6_exec_guard := if_falsex_x5_if_truex_x6_taken
//begin: basic-block if_truex_x6
$guard (if_truex_x6_exec_guard) xx_x114 := ($slice xx_x55 23 16)
if_truex_x6_if_nextx_x3_taken := if_truex_x6_exec_guard
if_nextx_x3_exec_guard := (if_nextx_x2_if_nextx_x3_taken | if_truex_x6_if_nextx_x3_taken )
//begin: basic-block if_nextx_x3
xx_x13751 := ($mux if_nextx_x2_if_nextx_x3_taken ( $bitcast ($uint<8>) xx_x13752) ($mux if_truex_x6_if_nextx_x3_taken ( $bitcast ($uint<8>) xx_x114) ($bitcast ($uint<8>) 0)))
if_nextx_x3_if_nextx_x4_taken := if_nextx_x3_exec_guard
if_truex_x5_exec_guard := if_falsex_x4_if_truex_x5_taken
//begin: basic-block if_truex_x5
$guard (if_truex_x5_exec_guard) xx_x108 := ($slice xx_x55 31 24)
if_truex_x5_if_nextx_x4_taken := if_truex_x5_exec_guard
if_nextx_x4_exec_guard := (if_nextx_x3_if_nextx_x4_taken | if_truex_x5_if_nextx_x4_taken )
//begin: basic-block if_nextx_x4
xx_x13750 := ($mux if_nextx_x3_if_nextx_x4_taken ( $bitcast ($uint<8>) xx_x13751) ($mux if_truex_x5_if_nextx_x4_taken ( $bitcast ($uint<8>) xx_x108) ($bitcast ($uint<8>) 0)))
if_nextx_x4_if_nextx_x5_taken := if_nextx_x4_exec_guard
if_truex_x4_exec_guard := if_falsex_x3_if_truex_x4_taken
//begin: basic-block if_truex_x4
$guard (if_truex_x4_exec_guard) xx_x102 := ($slice xx_x55 39 32)
if_truex_x4_if_nextx_x5_taken := if_truex_x4_exec_guard
if_nextx_x5_exec_guard := (if_nextx_x4_if_nextx_x5_taken | if_truex_x4_if_nextx_x5_taken )
//begin: basic-block if_nextx_x5
xx_x13749 := ($mux if_nextx_x4_if_nextx_x5_taken ( $bitcast ($uint<8>) xx_x13750) ($mux if_truex_x4_if_nextx_x5_taken ( $bitcast ($uint<8>) xx_x102) ($bitcast ($uint<8>) 0)))
if_nextx_x5_if_nextx_x6_taken := if_nextx_x5_exec_guard
if_truex_x3_exec_guard := if_falsex_x2_if_truex_x3_taken
//begin: basic-block if_truex_x3
$guard (if_truex_x3_exec_guard) xx_x96 := ($slice xx_x55 47 40)
if_truex_x3_if_nextx_x6_taken := if_truex_x3_exec_guard
if_nextx_x6_exec_guard := (if_nextx_x5_if_nextx_x6_taken | if_truex_x3_if_nextx_x6_taken )
//begin: basic-block if_nextx_x6
xx_x13748 := ($mux if_nextx_x5_if_nextx_x6_taken ( $bitcast ($uint<8>) xx_x13749) ($mux if_truex_x3_if_nextx_x6_taken ( $bitcast ($uint<8>) xx_x96) ($bitcast ($uint<8>) 0)))
if_nextx_x6_if_nextx_x7_taken := if_nextx_x6_exec_guard
if_truex_x2_exec_guard := if_falsex_x1_if_truex_x2_taken
//begin: basic-block if_truex_x2
$guard (if_truex_x2_exec_guard) xx_x90 := ($slice xx_x55 55 48)
if_truex_x2_if_nextx_x7_taken := if_truex_x2_exec_guard
if_nextx_x7_exec_guard := (if_nextx_x6_if_nextx_x7_taken | if_truex_x2_if_nextx_x7_taken )
//begin: basic-block if_nextx_x7
xx_x13747 := ($mux if_nextx_x6_if_nextx_x7_taken ( $bitcast ($uint<8>) xx_x13748) ($mux if_truex_x2_if_nextx_x7_taken ( $bitcast ($uint<8>) xx_x90) ($bitcast ($uint<8>) 0)))
if_nextx_x7_if_nextx_x8_taken := if_nextx_x7_exec_guard
if_truex_x1_exec_guard := for_bodyx_x1_if_truex_x1_taken
//begin: basic-block if_truex_x1
$guard (if_truex_x1_exec_guard) xx_x84 := ($slice xx_x55 63 56)
if_truex_x1_if_nextx_x8_taken := if_truex_x1_exec_guard
//begin: basic-block if_nextx_x8
xx_x137 := ($mux if_nextx_x7_if_nextx_x8_taken ( $bitcast ($uint<8>) xx_x13747) ($mux if_truex_x1_if_nextx_x8_taken ( $bitcast ($uint<8>) xx_x84) ($bitcast ($uint<8>) 0)))
$call dequant_inp (xx_x137 inp_scale inp_zero_point )  (xx_x140)
hor_slice_pipe := xx_x140
xx_x145 := (xx_x14458 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
// compare instruction
xx_x78 := (xx_x145 < xx_x74 )
if_nextx_x8_forx_x1x_xfor_out_crit_edge_taken := ( ~xx_x78)
$while xx_x78
$if if_nextx_x8_forx_x1x_xfor_out_crit_edge_taken $then 
  $place [if_nextx_x8_forx_x1x_xfor_out_crit_edge]
$endif
//begin: basic-block forx_x1x_xfor_out_crit_edge
$merge if_nextx_x8_forx_x1x_xfor_out_crit_edge
$phi split :=  ( $cast ($uint<8>) xx_x137) $on if_nextx_x8_forx_x1x_xfor_out_crit_edge 
$endmerge
$place [forx_x1x_xfor_out_crit_edge_for_out]
//begin: basic-block for_out
$merge forx_x1x_xfor_out_crit_edge_for_out if_next_for_out
$phi xx_x13754x_xlcssa :=  ( $cast ($uint<8>) split) $on forx_x1x_xfor_out_crit_edge_for_out ( $cast ($uint<8>) xx_x1374660) $on if_next_for_out 
$endmerge
// compare instruction
xx_x154 := (xx_x60 == xx_x153 )
$if xx_x154 $then  $place [for_out_if_truex_x9] $else $place [for_out_if_falsex_x9] $endif 
//begin: basic-block if_truex_x9
$merge for_out_if_truex_x9
$endmerge
xx_x158 := (xx_x15762 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
$place [if_truex_x9_if_nextx_x9]
//begin: basic-block if_falsex_x9
$merge for_out_if_falsex_x9
$endmerge
$place [if_falsex_x9_if_nextx_x9]
//begin: basic-block if_nextx_x9
$merge if_falsex_x9_if_nextx_x9 if_truex_x9_if_nextx_x9
$phi xx_x476 :=  ( $cast ($uint<64>) xx_x60) $on if_falsex_x9_if_nextx_x9 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on if_truex_x9_if_nextx_x9 
$phi xx_x443 :=  ( $cast ($uint<32>) xx_x15762) $on if_falsex_x9_if_nextx_x9 ( $cast ($uint<32>) xx_x158) $on if_truex_x9_if_nextx_x9 
$endmerge
xx_x163 := (xx_x16263 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
// compare instruction
xx_x31 := (xx_x163 < xx_x24 )
$if xx_x31 $then  $place [if_nextx_x9_for_body] $else $place [if_nextx_x9_forx_xfor_outx_x1_crit_edge] $endif 
//begin: basic-block forx_xfor_outx_x1_crit_edge
$merge if_nextx_x9_forx_xfor_outx_x1_crit_edge
$endmerge
$place [forx_xfor_outx_x1_crit_edge_for_outx_x1]
//begin: basic-block for_outx_x1
$merge forx_xfor_outx_x1_crit_edge_for_outx_x1 vars_for_outx_x1
$endmerge
}
}
$module [fetchPartial] 
 $in (base_addr : $uint<32> ker_size : $uint<32> in_channels : $uint<32> groups : $uint<32> in_rows : $uint<32> in_cols : $uint<32> out_rows : $uint<32> out_cols : $uint<32> inp_scale : $uint<32> inp_zero_point : $uint<32> )
 $out ()
 $is 
{
$branchblock [body] {
//begin: basic-block vars
xx_x29 := (out_rows + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
xx_x31 := (xx_x29 * out_cols)
xx_x33 := (xx_x31 * groups)
xx_x35 := (xx_x33 * ker_size)
xx_x46 := (groups << ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
xx_x48 := (xx_x46 * in_cols)
xx_x52 := ($cast ($uint<64>) xx_x48)
xx_x55 := (groups << ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
xx_x74 := ($cast ($uint<64>) in_channels)
xx_x93 := ($cast ($float<8,23>) inp_scale)
xx_x94 := ($cast ($float<8,23>) inp_zero_point)
xx_x169 := ($cast ($uint<64>) ker_size)
xx_x180 := ($cast ($uint<64>) groups)
xx_x205 := ($cast ($uint<64>) out_rows)
xx_x217 := ($cast ($float<8,23>) inp_scale)
xx_x218 := ($cast ($float<8,23>) inp_zero_point)
xx_x104 := ($cast ($uint<64>) ker_size)
xx_x115 := ($cast ($uint<64>) groups)
xx_x133 := (in_cols - ker_size)
xx_x134 := (xx_x133 + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
xx_x140 := ($cast ($uint<64>) out_rows)
xx_x154 := ($cast ($float<8,23>) inp_scale)
xx_x155 := ($cast ($float<8,23>) inp_zero_point)
// compare instruction
xx_x43184 := (( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  < xx_x35 )
$if xx_x43184 $then  $place [vars_for_bodyx_xlrx_xph] $else $place [vars_for_out] $endif 
//begin: basic-block for_bodyx_xlrx_xph
$merge vars_for_bodyx_xlrx_xph
$endmerge
$place [for_bodyx_xlrx_xph_for_body]
//begin: basic-block for_body
$merge for_bodyx_xlrx_xph_for_body if_nextx_x10_for_body
$phi xx_x229199 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<32>) xx_x230) $on if_nextx_x10_for_body 
$phi xx_x128198 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<64>) xx_x4916) $on if_nextx_x10_for_body 
$phi xx_x96197 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<64>) xx_x5024) $on if_nextx_x10_for_body 
$phi xx_x184196 :=  ( $cast ($uint<32>) ker_size) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<32>) xx_x5631) $on if_nextx_x10_for_body 
$phi xx_x60195 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<64>) xx_x6038) $on if_nextx_x10_for_body 
$phi xx_x71194 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<64>) xx_x7158) $on if_nextx_x10_for_body 
$phi xx_x173192 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<64>) xx_x8069) $on if_nextx_x10_for_body 
$phi xx_x88x_xoff0191 :=  ( $cast ($uint<8>) ( $bitcast ($uint<8> ) _b00000001 ) ) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<8>) xx_x8874x_xoff0) $on if_nextx_x10_for_body 
$phi xx_x99190 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<64>) xx_x9992) $on if_nextx_x10_for_body 
$phi xx_x164189 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<64>) xx_x16495) $on if_nextx_x10_for_body 
$phi xx_x108188 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<64>) xx_x178108) $on if_nextx_x10_for_body 
$phi xx_x119187 :=  ( $cast ($uint<32>) ker_size) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<32>) xx_x189118) $on if_nextx_x10_for_body 
$phi xx_x113158186 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<64>) xx_x113159) $on if_nextx_x10_for_body 
$phi xx_x124169185 :=  ( $cast ($uint<32>) ker_size) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<32>) xx_x124170) $on if_nextx_x10_for_body 
$endmerge
xx_x51 := (xx_x128198 + xx_x96197)
xx_x53 := (xx_x51 * xx_x52)
xx_x57 := (xx_x55 * xx_x184196)
xx_x58 := ($cast ($uint<64>) xx_x57)
xx_x59 := (xx_x53 + xx_x58)
xx_x61 := (xx_x60195 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 ) )
xx_x62 := (xx_x59 + xx_x61)
xx_x66 := ($cast ($uint<32>) xx_x62)
$call readModule_convolution (base_addr xx_x66 )  (xx_x67)
xx_x72 := (xx_x71194 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 ) )
xx_x73 := (xx_x72 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) )
// compare instruction
xx_x75x_xnot := ( ($bitcast ( $int<64>) xx_x73) >  ($bitcast ( $int<64>) xx_x74 ) )
$if xx_x75x_xnot $then  $place [for_body_if_false] $else $place [for_body_if_true] $endif 
//begin: basic-block if_true
$merge for_body_if_true
$endmerge
$place [if_true_if_next]
//begin: basic-block if_false
$merge for_body_if_false
$endmerge
xx_x173x_xtr := ($cast ($uint<32>) xx_x173192)
iNsTr_4 := (xx_x173x_xtr << ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
extractx_xt181 := (in_channels - iNsTr_4)
$place [if_false_if_next]
//begin: basic-block if_next
$merge if_false_if_next if_true_if_next
$phi xx_x173193 :=  ( $cast ($uint<64>) xx_x173192) $on if_false_if_next ( $cast ($uint<64>) xx_x173192) $on if_true_if_next 
$phi xx_x87x_xoff0 :=  ( $cast ($uint<32>) extractx_xt181) $on if_false_if_next ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000001000 ) ) $on if_true_if_next 
$phi xx_x7160 :=  ( $cast ($uint<64>) xx_x173192) $on if_false_if_next ( $cast ($uint<64>) xx_x71194) $on if_true_if_next 
$phi xx_x6042 :=  ( $cast ($uint<64>) xx_x173192) $on if_false_if_next ( $cast ($uint<64>) xx_x71194) $on if_true_if_next 
$endmerge
$call writeInpPipePartial (xx_x67 xx_x87x_xoff0 xx_x88x_xoff0191 xx_x93 xx_x94 )  ()
xx_x97 := (xx_x96197 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
// compare instruction
xx_x100 := (xx_x99190 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  )
$if xx_x100 $then  $place [if_next_if_truex_x1] $else $place [if_next_if_falsex_x5] $endif 
//begin: basic-block if_truex_x1
$merge if_next_if_truex_x1
$endmerge
// compare instruction
xx_x105 := (xx_x97 == xx_x104 )
$if xx_x105 $then  $place [if_truex_x1_if_truex_x2] $else $place [if_truex_x1_if_falsex_x1] $endif 
//begin: basic-block if_truex_x2
$merge if_truex_x1_if_truex_x2
$endmerge
xx_x109 := (xx_x108188 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
$place [if_truex_x2_if_nextx_x1]
//begin: basic-block if_falsex_x1
$merge if_truex_x1_if_falsex_x1
$endmerge
$place [if_falsex_x1_if_nextx_x1]
//begin: basic-block if_nextx_x1
$merge if_falsex_x1_if_nextx_x1 if_truex_x2_if_nextx_x1
$phi xx_x113 :=  ( $cast ($uint<64>) xx_x113158186) $on if_falsex_x1_if_nextx_x1 ( $cast ($uint<64>) xx_x109) $on if_truex_x2_if_nextx_x1 
$phi xx_x5025 :=  ( $cast ($uint<64>) xx_x97) $on if_falsex_x1_if_nextx_x1 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on if_truex_x2_if_nextx_x1 
$endmerge
// compare instruction
xx_x116 := (xx_x113 == xx_x115 )
$if xx_x116 $then  $place [if_nextx_x1_if_truex_x3] $else $place [if_nextx_x1_if_falsex_x2] $endif 
//begin: basic-block if_truex_x3
$merge if_nextx_x1_if_truex_x3
$endmerge
xx_x120 := (xx_x119187 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
$place [if_truex_x3_if_nextx_x2]
//begin: basic-block if_falsex_x2
$merge if_nextx_x1_if_falsex_x2
$endmerge
$place [if_falsex_x2_if_nextx_x2]
//begin: basic-block if_nextx_x2
$merge if_falsex_x2_if_nextx_x2 if_truex_x3_if_nextx_x2
$phi xx_x131 :=  ( $cast ($uint<32>) xx_x124169185) $on if_falsex_x2_if_nextx_x2 ( $cast ($uint<32>) xx_x120) $on if_truex_x3_if_nextx_x2 
$phi xx_x113160 :=  ( $cast ($uint<64>) xx_x113) $on if_falsex_x2_if_nextx_x2 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on if_truex_x3_if_nextx_x2 
$phi xx_x6039 :=  ( $cast ($uint<64>) xx_x113) $on if_falsex_x2_if_nextx_x2 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on if_truex_x3_if_nextx_x2 
$endmerge
// compare instruction
xx_x126 := (xx_x131 == in_cols )
$if xx_x126 $then  $place [if_nextx_x2_if_truex_x4] $else $place [if_nextx_x2_if_falsex_x4] $endif 
//begin: basic-block if_truex_x4
$merge if_nextx_x2_if_truex_x4
$endmerge
xx_x129 := (xx_x128198 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
// compare instruction
xx_x141 := ( ($bitcast ( $int<64>) xx_x129) <   ($bitcast ( $int<64>) xx_x140 ) )
$if xx_x141 $then  $place [if_truex_x4_if_truex_x5] $else $place [if_truex_x4_if_falsex_x3] $endif 
//begin: basic-block if_truex_x5
$merge if_truex_x4_if_truex_x5
$endmerge
xx_x153 := ($cast ($uint<32>) xx_x129)
$call fetchHorSlice (base_addr ker_size in_channels groups xx_x133 xx_x153 in_cols xx_x154 xx_x155 )  ()
xx_x157 := fetch_start
$place [if_truex_x5_if_nextx_x3]
//begin: basic-block if_falsex_x3
$merge if_truex_x4_if_falsex_x3
$endmerge
$place [if_falsex_x3_if_nextx_x3]
//begin: basic-block if_nextx_x3
$merge if_falsex_x3_if_nextx_x3 if_truex_x5_if_nextx_x3
$endmerge
$place [if_nextx_x3_if_nextx_x4]
//begin: basic-block if_falsex_x4
$merge if_nextx_x2_if_falsex_x4
$endmerge
$place [if_falsex_x4_if_nextx_x4]
//begin: basic-block if_nextx_x4
$merge if_falsex_x4_if_nextx_x4 if_nextx_x3_if_nextx_x4
$phi xx_x124171 :=  ( $cast ($uint<32>) xx_x131) $on if_falsex_x4_if_nextx_x4 ( $cast ($uint<32>) xx_x134) $on if_nextx_x3_if_nextx_x4 
$phi xx_x16498 :=  ( $cast ($uint<64>) xx_x164189) $on if_falsex_x4_if_nextx_x4 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ) $on if_nextx_x3_if_nextx_x4 
$phi xx_x9993 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ) $on if_falsex_x4_if_nextx_x4 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ) $on if_nextx_x3_if_nextx_x4 
$phi xx_x8875 :=  ( $cast ($uint<8>) ( $bitcast ($uint<8> ) _b00000001 ) ) $on if_falsex_x4_if_nextx_x4 ( $cast ($uint<8>) ( $bitcast ($uint<8> ) _b00000010 ) ) $on if_nextx_x3_if_nextx_x4 
$phi xx_x5634 :=  ( $cast ($uint<32>) xx_x131) $on if_falsex_x4_if_nextx_x4 ( $cast ($uint<32>) xx_x134) $on if_nextx_x3_if_nextx_x4 
$phi xx_x4919 :=  ( $cast ($uint<64>) xx_x128198) $on if_falsex_x4_if_nextx_x4 ( $cast ($uint<64>) xx_x129) $on if_nextx_x3_if_nextx_x4 
$endmerge
$place [if_nextx_x4_if_nextx_x10]
//begin: basic-block if_falsex_x5
$merge if_next_if_falsex_x5
$endmerge
// compare instruction
xx_x165 := (xx_x164189 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 )  )
$if xx_x165 $then  $place [if_falsex_x5_if_truex_x6] $else $place [if_falsex_x5_if_falsex_x10] $endif 
//begin: basic-block if_truex_x6
$merge if_falsex_x5_if_truex_x6
$endmerge
// compare instruction
xx_x170 := (xx_x97 == xx_x169 )
$if xx_x170 $then  $place [if_truex_x6_if_truex_x7] $else $place [if_truex_x6_if_falsex_x6] $endif 
//begin: basic-block if_truex_x7
$merge if_truex_x6_if_truex_x7
$endmerge
xx_x174 := (xx_x173193 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
$place [if_truex_x7_if_nextx_x5]
//begin: basic-block if_falsex_x6
$merge if_truex_x6_if_falsex_x6
$endmerge
$place [if_falsex_x6_if_nextx_x5]
//begin: basic-block if_nextx_x5
$merge if_falsex_x6_if_nextx_x5 if_truex_x7_if_nextx_x5
$phi xx_x113157 :=  ( $cast ($uint<64>) xx_x113158186) $on if_falsex_x6_if_nextx_x5 ( $cast ($uint<64>) xx_x174) $on if_truex_x7_if_nextx_x5 
$phi xx_x178 :=  ( $cast ($uint<64>) xx_x108188) $on if_falsex_x6_if_nextx_x5 ( $cast ($uint<64>) xx_x174) $on if_truex_x7_if_nextx_x5 
$phi xx_x5027 :=  ( $cast ($uint<64>) xx_x97) $on if_falsex_x6_if_nextx_x5 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on if_truex_x7_if_nextx_x5 
$endmerge
// compare instruction
xx_x181 := (xx_x178 == xx_x180 )
$if xx_x181 $then  $place [if_nextx_x5_if_truex_x8] $else $place [if_nextx_x5_if_falsex_x7] $endif 
//begin: basic-block if_truex_x8
$merge if_nextx_x5_if_truex_x8
$endmerge
xx_x185 := (xx_x184196 + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
$place [if_truex_x8_if_nextx_x6]
//begin: basic-block if_falsex_x7
$merge if_nextx_x5_if_falsex_x7
$endmerge
$place [if_falsex_x7_if_nextx_x6]
//begin: basic-block if_nextx_x6
$merge if_falsex_x7_if_nextx_x6 if_truex_x8_if_nextx_x6
$phi xx_x124168 :=  ( $cast ($uint<32>) xx_x124169185) $on if_falsex_x7_if_nextx_x6 ( $cast ($uint<32>) xx_x185) $on if_truex_x8_if_nextx_x6 
$phi xx_x113156 :=  ( $cast ($uint<64>) xx_x113157) $on if_falsex_x7_if_nextx_x6 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on if_truex_x8_if_nextx_x6 
$phi xx_x196 :=  ( $cast ($uint<32>) xx_x119187) $on if_falsex_x7_if_nextx_x6 ( $cast ($uint<32>) xx_x185) $on if_truex_x8_if_nextx_x6 
$phi xx_x178110 :=  ( $cast ($uint<64>) xx_x178) $on if_falsex_x7_if_nextx_x6 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on if_truex_x8_if_nextx_x6 
$phi xx_x6041 :=  ( $cast ($uint<64>) xx_x178) $on if_falsex_x7_if_nextx_x6 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on if_truex_x8_if_nextx_x6 
$endmerge
// compare instruction
xx_x191 := (xx_x196 == ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 )  )
$if xx_x191 $then  $place [if_nextx_x6_if_truex_x9] $else $place [if_nextx_x6_if_falsex_x9] $endif 
//begin: basic-block if_truex_x9
$merge if_nextx_x6_if_truex_x9
$endmerge
xx_x194 := (xx_x128198 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
xx_x198 := (xx_x196 + ker_size)
xx_x199 := (xx_x198 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
// compare instruction
xx_x206 := ( ($bitcast ( $int<64>) xx_x194) <   ($bitcast ( $int<64>) xx_x205 ) )
$if xx_x206 $then  $place [if_truex_x9_if_truex_x10] $else $place [if_truex_x9_if_falsex_x8] $endif 
//begin: basic-block if_truex_x10
$merge if_truex_x9_if_truex_x10
$endmerge
xx_x216 := ($cast ($uint<32>) xx_x194)
$call fetchHorSlice (base_addr ker_size in_channels groups ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  xx_x216 in_cols xx_x217 xx_x218 )  ()
xx_x220 := fetch_start
$place [if_truex_x10_if_nextx_x7]
//begin: basic-block if_falsex_x8
$merge if_truex_x9_if_falsex_x8
$endmerge
$place [if_falsex_x8_if_nextx_x7]
//begin: basic-block if_nextx_x7
$merge if_falsex_x8_if_nextx_x7 if_truex_x10_if_nextx_x7
$endmerge
$place [if_nextx_x7_if_nextx_x8]
//begin: basic-block if_falsex_x9
$merge if_nextx_x6_if_falsex_x9
$endmerge
$place [if_falsex_x9_if_nextx_x8]
//begin: basic-block if_nextx_x8
$merge if_falsex_x9_if_nextx_x8 if_nextx_x7_if_nextx_x8
$phi xx_x124167 :=  ( $cast ($uint<32>) xx_x124168) $on if_falsex_x9_if_nextx_x8 ( $cast ($uint<32>) xx_x199) $on if_nextx_x7_if_nextx_x8 
$phi xx_x189120 :=  ( $cast ($uint<32>) xx_x196) $on if_falsex_x9_if_nextx_x8 ( $cast ($uint<32>) xx_x199) $on if_nextx_x7_if_nextx_x8 
$phi xx_x16497 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ) $on if_falsex_x9_if_nextx_x8 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ) $on if_nextx_x7_if_nextx_x8 
$phi xx_x8877 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ) $on if_falsex_x9_if_nextx_x8 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ) $on if_nextx_x7_if_nextx_x8 
$phi xx_x5636 :=  ( $cast ($uint<32>) xx_x196) $on if_falsex_x9_if_nextx_x8 ( $cast ($uint<32>) xx_x199) $on if_nextx_x7_if_nextx_x8 
$phi xx_x4918 :=  ( $cast ($uint<64>) xx_x128198) $on if_falsex_x9_if_nextx_x8 ( $cast ($uint<64>) xx_x194) $on if_nextx_x7_if_nextx_x8 
$endmerge
$place [if_nextx_x8_if_nextx_x9]
//begin: basic-block if_falsex_x10
$merge if_falsex_x5_if_falsex_x10
$endmerge
$place [if_falsex_x10_if_nextx_x9]
//begin: basic-block if_nextx_x9
$merge if_falsex_x10_if_nextx_x9 if_nextx_x8_if_nextx_x9
$phi xx_x124166 :=  ( $cast ($uint<32>) xx_x124169185) $on if_falsex_x10_if_nextx_x9 ( $cast ($uint<32>) xx_x124167) $on if_nextx_x8_if_nextx_x9 
$phi xx_x113155 :=  ( $cast ($uint<64>) xx_x113158186) $on if_falsex_x10_if_nextx_x9 ( $cast ($uint<64>) xx_x113156) $on if_nextx_x8_if_nextx_x9 
$phi xx_x189119 :=  ( $cast ($uint<32>) xx_x119187) $on if_falsex_x10_if_nextx_x9 ( $cast ($uint<32>) xx_x189120) $on if_nextx_x8_if_nextx_x9 
$phi xx_x178109 :=  ( $cast ($uint<64>) xx_x108188) $on if_falsex_x10_if_nextx_x9 ( $cast ($uint<64>) xx_x178110) $on if_nextx_x8_if_nextx_x9 
$phi xx_x16496 :=  ( $cast ($uint<64>) xx_x164189) $on if_falsex_x10_if_nextx_x9 ( $cast ($uint<64>) xx_x16497) $on if_nextx_x8_if_nextx_x9 
$phi xx_x8876 :=  ( $cast ($uint<64>) xx_x164189) $on if_falsex_x10_if_nextx_x9 ( $cast ($uint<64>) xx_x8877) $on if_nextx_x8_if_nextx_x9 
$phi xx_x8070 :=  ( $cast ($uint<64>) xx_x173193) $on if_falsex_x10_if_nextx_x9 ( $cast ($uint<64>) xx_x6041) $on if_nextx_x8_if_nextx_x9 
$phi xx_x7159 :=  ( $cast ($uint<64>) xx_x7160) $on if_falsex_x10_if_nextx_x9 ( $cast ($uint<64>) xx_x6041) $on if_nextx_x8_if_nextx_x9 
$phi xx_x6040 :=  ( $cast ($uint<64>) xx_x6042) $on if_falsex_x10_if_nextx_x9 ( $cast ($uint<64>) xx_x6041) $on if_nextx_x8_if_nextx_x9 
$phi xx_x5632 :=  ( $cast ($uint<32>) xx_x184196) $on if_falsex_x10_if_nextx_x9 ( $cast ($uint<32>) xx_x5636) $on if_nextx_x8_if_nextx_x9 
$phi xx_x5026 :=  ( $cast ($uint<64>) xx_x97) $on if_falsex_x10_if_nextx_x9 ( $cast ($uint<64>) xx_x5027) $on if_nextx_x8_if_nextx_x9 
$phi xx_x4917 :=  ( $cast ($uint<64>) xx_x128198) $on if_falsex_x10_if_nextx_x9 ( $cast ($uint<64>) xx_x4918) $on if_nextx_x8_if_nextx_x9 
$endmerge
extractx_xt182 := ($cast ($uint<8>) xx_x8876)
$place [if_nextx_x9_if_nextx_x10]
//begin: basic-block if_nextx_x10
$merge if_nextx_x4_if_nextx_x10 if_nextx_x9_if_nextx_x10
$phi xx_x124170 :=  ( $cast ($uint<32>) xx_x124166) $on if_nextx_x9_if_nextx_x10 ( $cast ($uint<32>) xx_x124171) $on if_nextx_x4_if_nextx_x10 
$phi xx_x113159 :=  ( $cast ($uint<64>) xx_x113155) $on if_nextx_x9_if_nextx_x10 ( $cast ($uint<64>) xx_x113160) $on if_nextx_x4_if_nextx_x10 
$phi xx_x189118 :=  ( $cast ($uint<32>) xx_x189119) $on if_nextx_x9_if_nextx_x10 ( $cast ($uint<32>) xx_x5634) $on if_nextx_x4_if_nextx_x10 
$phi xx_x178108 :=  ( $cast ($uint<64>) xx_x178109) $on if_nextx_x9_if_nextx_x10 ( $cast ($uint<64>) xx_x6039) $on if_nextx_x4_if_nextx_x10 
$phi xx_x16495 :=  ( $cast ($uint<64>) xx_x16496) $on if_nextx_x9_if_nextx_x10 ( $cast ($uint<64>) xx_x16498) $on if_nextx_x4_if_nextx_x10 
$phi xx_x9992 :=  ( $cast ($uint<64>) xx_x8876) $on if_nextx_x9_if_nextx_x10 ( $cast ($uint<64>) xx_x9993) $on if_nextx_x4_if_nextx_x10 
$phi xx_x8874x_xoff0 :=  ( $cast ($uint<8>) extractx_xt182) $on if_nextx_x9_if_nextx_x10 ( $cast ($uint<8>) xx_x8875) $on if_nextx_x4_if_nextx_x10 
$phi xx_x8069 :=  ( $cast ($uint<64>) xx_x8070) $on if_nextx_x9_if_nextx_x10 ( $cast ($uint<64>) xx_x6039) $on if_nextx_x4_if_nextx_x10 
$phi xx_x7158 :=  ( $cast ($uint<64>) xx_x7159) $on if_nextx_x9_if_nextx_x10 ( $cast ($uint<64>) xx_x6039) $on if_nextx_x4_if_nextx_x10 
$phi xx_x6038 :=  ( $cast ($uint<64>) xx_x6040) $on if_nextx_x9_if_nextx_x10 ( $cast ($uint<64>) xx_x6039) $on if_nextx_x4_if_nextx_x10 
$phi xx_x5631 :=  ( $cast ($uint<32>) xx_x5632) $on if_nextx_x9_if_nextx_x10 ( $cast ($uint<32>) xx_x5634) $on if_nextx_x4_if_nextx_x10 
$phi xx_x5024 :=  ( $cast ($uint<64>) xx_x5026) $on if_nextx_x9_if_nextx_x10 ( $cast ($uint<64>) xx_x5025) $on if_nextx_x4_if_nextx_x10 
$phi xx_x4916 :=  ( $cast ($uint<64>) xx_x4917) $on if_nextx_x9_if_nextx_x10 ( $cast ($uint<64>) xx_x4919) $on if_nextx_x4_if_nextx_x10 
$endmerge
xx_x230 := (xx_x229199 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
// compare instruction
xx_x43 := (xx_x230 < xx_x35 )
$if xx_x43 $then  $place [if_nextx_x10_for_body] $else $place [if_nextx_x10_forx_xfor_out_crit_edge] $endif 
//begin: basic-block forx_xfor_out_crit_edge
$merge if_nextx_x10_forx_xfor_out_crit_edge
$endmerge
$place [forx_xfor_out_crit_edge_for_out]
//begin: basic-block for_out
$merge forx_xfor_out_crit_edge_for_out vars_for_out
$endmerge
}
}
$module [loadForward] 
 $in (num_chn_present : $uint<32> ker_size : $uint<32> )
 $out ()
 $is 
{
$branchblock [body] {
//begin: basic-block vars
xx_x11 := (ker_size * ker_size)
xx_x13 := (xx_x11 * num_chn_present)
xx_x78 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) num_chn_present) )
xx_x89 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) ker_size) )
// compare instruction
xx_x1732 := (( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  < xx_x13 )
$if xx_x1732 $then  $place [vars_for_bodyx_xlrx_xph] $else $place [vars_for_out] $endif 
//begin: basic-block for_bodyx_xlrx_xph
$merge vars_for_bodyx_xlrx_xph
$endmerge
$place [for_bodyx_xlrx_xph_for_body]
//begin: basic-block for_body
//   this is a do-while loop.
$merge for_bodyx_xlrx_xph_for_body
$endmerge
$dopipeline $depth 31 $buffering 7 
$fullrate
$merge $entry $loopback
$phi xx_x9841 :=  ( $cast ($uint<32>) xx_x99) $on $loopback ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on $entry
$phi xx_x2040 :=  ( $cast ($uint<64>) xx_x202) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x2839 :=  ( $cast ($uint<64>) xx_x288) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x3838 :=  ( $cast ($uint<64>) xx_x3812) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x4837 :=  ( $cast ($uint<64>) xx_x4817) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x9236 :=  ( $cast ($uint<64>) xx_x5823) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x7335 :=  ( $cast ($uint<64>) xx_x7326) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x8234 :=  ( $cast ($uint<64>) xx_x8228) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x872933 :=  ( $cast ($uint<64>) xx_x8730) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$endmerge
// compare instruction
xx_x21 := (xx_x2040 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
for_body_if_true_taken := xx_x21
for_body_if_false_taken := ( ~xx_x21)
if_false_exec_guard := for_body_if_false_taken
//begin: basic-block if_false
// compare instruction
$guard (if_false_exec_guard) xx_x29 := (xx_x2839 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  )
if_false_if_truex_x1_taken := (if_false_exec_guard & xx_x29)
if_false_if_falsex_x1_taken := (if_false_exec_guard & (~xx_x29))
if_falsex_x1_exec_guard := if_false_if_falsex_x1_taken
//begin: basic-block if_falsex_x1
// compare instruction
$guard (if_falsex_x1_exec_guard) xx_x39 := (xx_x3838 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 )  )
if_falsex_x1_if_truex_x2_taken := (if_falsex_x1_exec_guard & xx_x39)
if_falsex_x1_if_falsex_x2_taken := (if_falsex_x1_exec_guard & (~xx_x39))
if_falsex_x2_exec_guard := if_falsex_x1_if_falsex_x2_taken
//begin: basic-block if_falsex_x2
// compare instruction
$guard (if_falsex_x2_exec_guard) xx_x49 := (xx_x4837 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 )  )
if_falsex_x2_if_truex_x3_taken := (if_falsex_x2_exec_guard & xx_x49)
if_falsex_x2_if_falsex_x3_taken := (if_falsex_x2_exec_guard & (~xx_x49))
if_falsex_x3_exec_guard := if_falsex_x2_if_falsex_x3_taken
//begin: basic-block if_falsex_x3
// compare instruction
$guard (if_falsex_x3_exec_guard) xx_x59 := (xx_x9236 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000100 )  )
if_falsex_x3_if_truex_x4_taken := (if_falsex_x3_exec_guard & xx_x59)
if_falsex_x3_if_falsex_x4_taken := (if_falsex_x3_exec_guard & (~xx_x59))
if_falsex_x4_exec_guard := if_falsex_x3_if_falsex_x4_taken
//begin: basic-block if_falsex_x4
if_falsex_x4_if_next_taken := if_falsex_x4_exec_guard
if_truex_x4_exec_guard := if_falsex_x3_if_truex_x4_taken
//begin: basic-block if_truex_x4
$guard (if_truex_x4_exec_guard) xx_x61 := in_data_4
$guard (if_truex_x4_exec_guard) conv_input_data := xx_x61
$guard (if_truex_x4_exec_guard) in_data_3 := xx_x61
if_truex_x4_if_next_taken := if_truex_x4_exec_guard
if_next_exec_guard := (if_falsex_x4_if_next_taken | if_truex_x4_if_next_taken )
//begin: basic-block if_next
if_next_if_nextx_x1_taken := if_next_exec_guard
if_truex_x3_exec_guard := if_falsex_x2_if_truex_x3_taken
//begin: basic-block if_truex_x3
$guard (if_truex_x3_exec_guard) xx_x51 := in_data_3
$guard (if_truex_x3_exec_guard) conv_input_data := xx_x51
$guard (if_truex_x3_exec_guard) in_data_2 := xx_x51
if_truex_x3_if_nextx_x1_taken := if_truex_x3_exec_guard
if_nextx_x1_exec_guard := (if_next_if_nextx_x1_taken | if_truex_x3_if_nextx_x1_taken )
//begin: basic-block if_nextx_x1
xx_x4821 := ($mux if_next_if_nextx_x1_taken ( $bitcast ($uint<64>) xx_x9236) ($mux if_truex_x3_if_nextx_x1_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 ) ) ($bitcast ($uint<64>) 0)))
xx_x207 := ($mux if_next_if_nextx_x1_taken ( $bitcast ($uint<64>) xx_x9236) ($mux if_truex_x3_if_nextx_x1_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 ) ) ($bitcast ($uint<64>) 0)))
if_nextx_x1_if_nextx_x2_taken := if_nextx_x1_exec_guard
if_truex_x2_exec_guard := if_falsex_x1_if_truex_x2_taken
//begin: basic-block if_truex_x2
$guard (if_truex_x2_exec_guard) xx_x41 := in_data_2
$guard (if_truex_x2_exec_guard) conv_input_data := xx_x41
$guard (if_truex_x2_exec_guard) in_data_1 := xx_x41
if_truex_x2_if_nextx_x2_taken := if_truex_x2_exec_guard
if_nextx_x2_exec_guard := (if_nextx_x1_if_nextx_x2_taken | if_truex_x2_if_nextx_x2_taken )
//begin: basic-block if_nextx_x2
xx_x4820 := ($mux if_nextx_x1_if_nextx_x2_taken ( $bitcast ($uint<64>) xx_x4821) ($mux if_truex_x2_if_nextx_x2_taken ( $bitcast ($uint<64>) xx_x4837) ($bitcast ($uint<64>) 0)))
xx_x3815 := ($mux if_nextx_x1_if_nextx_x2_taken ( $bitcast ($uint<64>) xx_x207) ($mux if_truex_x2_if_nextx_x2_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ) ($bitcast ($uint<64>) 0)))
xx_x206 := ($mux if_nextx_x1_if_nextx_x2_taken ( $bitcast ($uint<64>) xx_x207) ($mux if_truex_x2_if_nextx_x2_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ) ($bitcast ($uint<64>) 0)))
if_nextx_x2_if_nextx_x3_taken := if_nextx_x2_exec_guard
if_truex_x1_exec_guard := if_false_if_truex_x1_taken
//begin: basic-block if_truex_x1
$guard (if_truex_x1_exec_guard) xx_x31 := in_data_1
$guard (if_truex_x1_exec_guard) conv_input_data := xx_x31
$guard (if_truex_x1_exec_guard) in_data_0 := xx_x31
if_truex_x1_if_nextx_x3_taken := if_truex_x1_exec_guard
if_nextx_x3_exec_guard := (if_nextx_x2_if_nextx_x3_taken | if_truex_x1_if_nextx_x3_taken )
//begin: basic-block if_nextx_x3
xx_x4819 := ($mux if_nextx_x2_if_nextx_x3_taken ( $bitcast ($uint<64>) xx_x4820) ($mux if_truex_x1_if_nextx_x3_taken ( $bitcast ($uint<64>) xx_x4837) ($bitcast ($uint<64>) 0)))
xx_x3814 := ($mux if_nextx_x2_if_nextx_x3_taken ( $bitcast ($uint<64>) xx_x3815) ($mux if_truex_x1_if_nextx_x3_taken ( $bitcast ($uint<64>) xx_x3838) ($bitcast ($uint<64>) 0)))
xx_x2810 := ($mux if_nextx_x2_if_nextx_x3_taken ( $bitcast ($uint<64>) xx_x206) ($mux if_truex_x1_if_nextx_x3_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ) ($bitcast ($uint<64>) 0)))
xx_x205 := ($mux if_nextx_x2_if_nextx_x3_taken ( $bitcast ($uint<64>) xx_x206) ($mux if_truex_x1_if_nextx_x3_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ) ($bitcast ($uint<64>) 0)))
if_nextx_x3_if_nextx_x4_taken := if_nextx_x3_exec_guard
if_true_exec_guard := for_body_if_true_taken
//begin: basic-block if_true
$guard (if_true_exec_guard) xx_x23 := in_data_0
$guard (if_true_exec_guard) conv_input_data := xx_x23
if_true_if_nextx_x4_taken := if_true_exec_guard
if_nextx_x4_exec_guard := (if_nextx_x3_if_nextx_x4_taken | if_true_if_nextx_x4_taken )
//begin: basic-block if_nextx_x4
xx_x4818 := ($mux if_nextx_x3_if_nextx_x4_taken ( $bitcast ($uint<64>) xx_x4819) ($mux if_true_if_nextx_x4_taken ( $bitcast ($uint<64>) xx_x4837) ($bitcast ($uint<64>) 0)))
xx_x3813 := ($mux if_nextx_x3_if_nextx_x4_taken ( $bitcast ($uint<64>) xx_x3814) ($mux if_true_if_nextx_x4_taken ( $bitcast ($uint<64>) xx_x3838) ($bitcast ($uint<64>) 0)))
xx_x289 := ($mux if_nextx_x3_if_nextx_x4_taken ( $bitcast ($uint<64>) xx_x2810) ($mux if_true_if_nextx_x4_taken ( $bitcast ($uint<64>) xx_x2839) ($bitcast ($uint<64>) 0)))
xx_x203 := ($mux if_nextx_x3_if_nextx_x4_taken ( $bitcast ($uint<64>) xx_x205) ($mux if_true_if_nextx_x4_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) ($bitcast ($uint<64>) 0)))
$guard (if_nextx_x4_exec_guard) xx_x74 := (xx_x7335 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
// compare instruction
$guard (if_nextx_x4_exec_guard) xx_x79 := (xx_x74 == xx_x78 )
if_nextx_x4_if_truex_x5_taken := (if_nextx_x4_exec_guard & xx_x79)
if_nextx_x4_if_falsex_x5_taken := (if_nextx_x4_exec_guard & (~xx_x79))
if_falsex_x5_exec_guard := if_nextx_x4_if_falsex_x5_taken
//begin: basic-block if_falsex_x5
if_falsex_x5_if_nextx_x5_taken := if_falsex_x5_exec_guard
if_truex_x5_exec_guard := if_nextx_x4_if_truex_x5_taken
//begin: basic-block if_truex_x5
$guard (if_truex_x5_exec_guard) xx_x83 := (xx_x8234 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
if_truex_x5_if_nextx_x5_taken := if_truex_x5_exec_guard
if_nextx_x5_exec_guard := (if_falsex_x5_if_nextx_x5_taken | if_truex_x5_if_nextx_x5_taken )
//begin: basic-block if_nextx_x5
xx_x87 := ($mux if_falsex_x5_if_nextx_x5_taken ( $bitcast ($uint<64>) xx_x872933) ($mux if_truex_x5_if_nextx_x5_taken ( $bitcast ($uint<64>) xx_x83) ($bitcast ($uint<64>) 0)))
xx_x7326 := ($mux if_falsex_x5_if_nextx_x5_taken ( $bitcast ($uint<64>) xx_x74) ($mux if_truex_x5_if_nextx_x5_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) ($bitcast ($uint<64>) 0)))
// compare instruction
$guard (if_nextx_x5_exec_guard) xx_x90 := (xx_x87 == xx_x89 )
if_nextx_x5_if_truex_x6_taken := (if_nextx_x5_exec_guard & xx_x90)
if_nextx_x5_if_falsex_x6_taken := (if_nextx_x5_exec_guard & (~xx_x90))
if_falsex_x6_exec_guard := if_nextx_x5_if_falsex_x6_taken
//begin: basic-block if_falsex_x6
if_falsex_x6_if_nextx_x6_taken := if_falsex_x6_exec_guard
if_truex_x6_exec_guard := if_nextx_x5_if_truex_x6_taken
//begin: basic-block if_truex_x6
$guard (if_truex_x6_exec_guard) xx_x93 := (xx_x9236 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
if_truex_x6_if_nextx_x6_taken := if_truex_x6_exec_guard
//begin: basic-block if_nextx_x6
xx_x8730 := ($mux if_falsex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x87) ($mux if_truex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) ($bitcast ($uint<64>) 0)))
xx_x8228 := ($mux if_falsex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x87) ($mux if_truex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) ($bitcast ($uint<64>) 0)))
xx_x5823 := ($mux if_falsex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x9236) ($mux if_truex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x93) ($bitcast ($uint<64>) 0)))
xx_x4817 := ($mux if_falsex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x4818) ($mux if_truex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x93) ($bitcast ($uint<64>) 0)))
xx_x3812 := ($mux if_falsex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x3813) ($mux if_truex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x93) ($bitcast ($uint<64>) 0)))
xx_x288 := ($mux if_falsex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x289) ($mux if_truex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x93) ($bitcast ($uint<64>) 0)))
xx_x202 := ($mux if_falsex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x203) ($mux if_truex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x93) ($bitcast ($uint<64>) 0)))
xx_x99 := (xx_x9841 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
// compare instruction
xx_x17 := (xx_x99 < xx_x13 )
if_nextx_x6_forx_xfor_out_crit_edge_taken := ( ~xx_x17)
$while xx_x17
$if if_nextx_x6_forx_xfor_out_crit_edge_taken $then 
  $place [if_nextx_x6_forx_xfor_out_crit_edge]
$endif
//begin: basic-block forx_xfor_out_crit_edge
$merge if_nextx_x6_forx_xfor_out_crit_edge
$endmerge
$place [forx_xfor_out_crit_edge_for_out]
//begin: basic-block for_out
$merge forx_xfor_out_crit_edge_for_out vars_for_out
$endmerge
}
}
$module [loadBackward] 
 $in (num_chn_present : $uint<32> ker_size : $uint<32> )
 $out ()
 $is 
{
$branchblock [body] {
//begin: basic-block vars
xx_x11 := (ker_size * ker_size)
xx_x13 := (xx_x11 * num_chn_present)
xx_x78 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) num_chn_present) )
xx_x89 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) ker_size) )
// compare instruction
xx_x1732 := (( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  < xx_x13 )
$if xx_x1732 $then  $place [vars_for_bodyx_xlrx_xph] $else $place [vars_for_out] $endif 
//begin: basic-block for_bodyx_xlrx_xph
$merge vars_for_bodyx_xlrx_xph
$endmerge
$place [for_bodyx_xlrx_xph_for_body]
//begin: basic-block for_body
//   this is a do-while loop.
$merge for_bodyx_xlrx_xph_for_body
$endmerge
$dopipeline $depth 31 $buffering 7 
$fullrate
$merge $entry $loopback
$phi xx_x9841 :=  ( $cast ($uint<32>) xx_x99) $on $loopback ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on $entry
$phi xx_x2040 :=  ( $cast ($uint<64>) xx_x202) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x3039 :=  ( $cast ($uint<64>) xx_x308) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x4038 :=  ( $cast ($uint<64>) xx_x4012) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x5037 :=  ( $cast ($uint<64>) xx_x5017) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x9236 :=  ( $cast ($uint<64>) xx_x6023) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x7335 :=  ( $cast ($uint<64>) xx_x7326) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x8234 :=  ( $cast ($uint<64>) xx_x8228) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x872933 :=  ( $cast ($uint<64>) xx_x8730) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$endmerge
// compare instruction
xx_x21 := (xx_x2040 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
for_body_if_true_taken := xx_x21
for_body_if_false_taken := ( ~xx_x21)
if_false_exec_guard := for_body_if_false_taken
//begin: basic-block if_false
// compare instruction
$guard (if_false_exec_guard) xx_x31 := (xx_x3039 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  )
if_false_if_truex_x1_taken := (if_false_exec_guard & xx_x31)
if_false_if_falsex_x1_taken := (if_false_exec_guard & (~xx_x31))
if_falsex_x1_exec_guard := if_false_if_falsex_x1_taken
//begin: basic-block if_falsex_x1
// compare instruction
$guard (if_falsex_x1_exec_guard) xx_x41 := (xx_x4038 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 )  )
if_falsex_x1_if_truex_x2_taken := (if_falsex_x1_exec_guard & xx_x41)
if_falsex_x1_if_falsex_x2_taken := (if_falsex_x1_exec_guard & (~xx_x41))
if_falsex_x2_exec_guard := if_falsex_x1_if_falsex_x2_taken
//begin: basic-block if_falsex_x2
// compare instruction
$guard (if_falsex_x2_exec_guard) xx_x51 := (xx_x5037 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 )  )
if_falsex_x2_if_truex_x3_taken := (if_falsex_x2_exec_guard & xx_x51)
if_falsex_x2_if_falsex_x3_taken := (if_falsex_x2_exec_guard & (~xx_x51))
if_falsex_x3_exec_guard := if_falsex_x2_if_falsex_x3_taken
//begin: basic-block if_falsex_x3
// compare instruction
$guard (if_falsex_x3_exec_guard) xx_x61 := (xx_x9236 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000100 )  )
if_falsex_x3_if_truex_x4_taken := (if_falsex_x3_exec_guard & xx_x61)
if_falsex_x3_if_falsex_x4_taken := (if_falsex_x3_exec_guard & (~xx_x61))
if_falsex_x4_exec_guard := if_falsex_x3_if_falsex_x4_taken
//begin: basic-block if_falsex_x4
if_falsex_x4_if_next_taken := if_falsex_x4_exec_guard
if_truex_x4_exec_guard := if_falsex_x3_if_truex_x4_taken
//begin: basic-block if_truex_x4
$guard (if_truex_x4_exec_guard) xx_x63 := in_data_4
$guard (if_truex_x4_exec_guard) conv_input_data := xx_x63
if_truex_x4_if_next_taken := if_truex_x4_exec_guard
if_next_exec_guard := (if_falsex_x4_if_next_taken | if_truex_x4_if_next_taken )
//begin: basic-block if_next
if_next_if_nextx_x1_taken := if_next_exec_guard
if_truex_x3_exec_guard := if_falsex_x2_if_truex_x3_taken
//begin: basic-block if_truex_x3
$guard (if_truex_x3_exec_guard) xx_x53 := in_data_3
$guard (if_truex_x3_exec_guard) conv_input_data := xx_x53
$guard (if_truex_x3_exec_guard) in_data_4 := xx_x53
if_truex_x3_if_nextx_x1_taken := if_truex_x3_exec_guard
if_nextx_x1_exec_guard := (if_next_if_nextx_x1_taken | if_truex_x3_if_nextx_x1_taken )
//begin: basic-block if_nextx_x1
xx_x5021 := ($mux if_next_if_nextx_x1_taken ( $bitcast ($uint<64>) xx_x9236) ($mux if_truex_x3_if_nextx_x1_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 ) ) ($bitcast ($uint<64>) 0)))
xx_x207 := ($mux if_next_if_nextx_x1_taken ( $bitcast ($uint<64>) xx_x9236) ($mux if_truex_x3_if_nextx_x1_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 ) ) ($bitcast ($uint<64>) 0)))
if_nextx_x1_if_nextx_x2_taken := if_nextx_x1_exec_guard
if_truex_x2_exec_guard := if_falsex_x1_if_truex_x2_taken
//begin: basic-block if_truex_x2
$guard (if_truex_x2_exec_guard) xx_x43 := in_data_2
$guard (if_truex_x2_exec_guard) conv_input_data := xx_x43
$guard (if_truex_x2_exec_guard) in_data_3 := xx_x43
if_truex_x2_if_nextx_x2_taken := if_truex_x2_exec_guard
if_nextx_x2_exec_guard := (if_nextx_x1_if_nextx_x2_taken | if_truex_x2_if_nextx_x2_taken )
//begin: basic-block if_nextx_x2
xx_x5020 := ($mux if_nextx_x1_if_nextx_x2_taken ( $bitcast ($uint<64>) xx_x5021) ($mux if_truex_x2_if_nextx_x2_taken ( $bitcast ($uint<64>) xx_x5037) ($bitcast ($uint<64>) 0)))
xx_x4015 := ($mux if_nextx_x1_if_nextx_x2_taken ( $bitcast ($uint<64>) xx_x207) ($mux if_truex_x2_if_nextx_x2_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ) ($bitcast ($uint<64>) 0)))
xx_x206 := ($mux if_nextx_x1_if_nextx_x2_taken ( $bitcast ($uint<64>) xx_x207) ($mux if_truex_x2_if_nextx_x2_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ) ($bitcast ($uint<64>) 0)))
if_nextx_x2_if_nextx_x3_taken := if_nextx_x2_exec_guard
if_truex_x1_exec_guard := if_false_if_truex_x1_taken
//begin: basic-block if_truex_x1
$guard (if_truex_x1_exec_guard) xx_x33 := in_data_1
$guard (if_truex_x1_exec_guard) conv_input_data := xx_x33
$guard (if_truex_x1_exec_guard) in_data_2 := xx_x33
if_truex_x1_if_nextx_x3_taken := if_truex_x1_exec_guard
if_nextx_x3_exec_guard := (if_nextx_x2_if_nextx_x3_taken | if_truex_x1_if_nextx_x3_taken )
//begin: basic-block if_nextx_x3
xx_x5019 := ($mux if_nextx_x2_if_nextx_x3_taken ( $bitcast ($uint<64>) xx_x5020) ($mux if_truex_x1_if_nextx_x3_taken ( $bitcast ($uint<64>) xx_x5037) ($bitcast ($uint<64>) 0)))
xx_x4014 := ($mux if_nextx_x2_if_nextx_x3_taken ( $bitcast ($uint<64>) xx_x4015) ($mux if_truex_x1_if_nextx_x3_taken ( $bitcast ($uint<64>) xx_x4038) ($bitcast ($uint<64>) 0)))
xx_x3010 := ($mux if_nextx_x2_if_nextx_x3_taken ( $bitcast ($uint<64>) xx_x206) ($mux if_truex_x1_if_nextx_x3_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ) ($bitcast ($uint<64>) 0)))
xx_x205 := ($mux if_nextx_x2_if_nextx_x3_taken ( $bitcast ($uint<64>) xx_x206) ($mux if_truex_x1_if_nextx_x3_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ) ($bitcast ($uint<64>) 0)))
if_nextx_x3_if_nextx_x4_taken := if_nextx_x3_exec_guard
if_true_exec_guard := for_body_if_true_taken
//begin: basic-block if_true
$guard (if_true_exec_guard) xx_x23 := in_data_0
$guard (if_true_exec_guard) conv_input_data := xx_x23
$guard (if_true_exec_guard) in_data_1 := xx_x23
if_true_if_nextx_x4_taken := if_true_exec_guard
if_nextx_x4_exec_guard := (if_nextx_x3_if_nextx_x4_taken | if_true_if_nextx_x4_taken )
//begin: basic-block if_nextx_x4
xx_x5018 := ($mux if_nextx_x3_if_nextx_x4_taken ( $bitcast ($uint<64>) xx_x5019) ($mux if_true_if_nextx_x4_taken ( $bitcast ($uint<64>) xx_x5037) ($bitcast ($uint<64>) 0)))
xx_x4013 := ($mux if_nextx_x3_if_nextx_x4_taken ( $bitcast ($uint<64>) xx_x4014) ($mux if_true_if_nextx_x4_taken ( $bitcast ($uint<64>) xx_x4038) ($bitcast ($uint<64>) 0)))
xx_x309 := ($mux if_nextx_x3_if_nextx_x4_taken ( $bitcast ($uint<64>) xx_x3010) ($mux if_true_if_nextx_x4_taken ( $bitcast ($uint<64>) xx_x3039) ($bitcast ($uint<64>) 0)))
xx_x203 := ($mux if_nextx_x3_if_nextx_x4_taken ( $bitcast ($uint<64>) xx_x205) ($mux if_true_if_nextx_x4_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) ($bitcast ($uint<64>) 0)))
$guard (if_nextx_x4_exec_guard) xx_x74 := (xx_x7335 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
// compare instruction
$guard (if_nextx_x4_exec_guard) xx_x79 := (xx_x74 == xx_x78 )
if_nextx_x4_if_truex_x5_taken := (if_nextx_x4_exec_guard & xx_x79)
if_nextx_x4_if_falsex_x5_taken := (if_nextx_x4_exec_guard & (~xx_x79))
if_falsex_x5_exec_guard := if_nextx_x4_if_falsex_x5_taken
//begin: basic-block if_falsex_x5
if_falsex_x5_if_nextx_x5_taken := if_falsex_x5_exec_guard
if_truex_x5_exec_guard := if_nextx_x4_if_truex_x5_taken
//begin: basic-block if_truex_x5
$guard (if_truex_x5_exec_guard) xx_x83 := (xx_x8234 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
if_truex_x5_if_nextx_x5_taken := if_truex_x5_exec_guard
if_nextx_x5_exec_guard := (if_falsex_x5_if_nextx_x5_taken | if_truex_x5_if_nextx_x5_taken )
//begin: basic-block if_nextx_x5
xx_x87 := ($mux if_falsex_x5_if_nextx_x5_taken ( $bitcast ($uint<64>) xx_x872933) ($mux if_truex_x5_if_nextx_x5_taken ( $bitcast ($uint<64>) xx_x83) ($bitcast ($uint<64>) 0)))
xx_x7326 := ($mux if_falsex_x5_if_nextx_x5_taken ( $bitcast ($uint<64>) xx_x74) ($mux if_truex_x5_if_nextx_x5_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) ($bitcast ($uint<64>) 0)))
// compare instruction
$guard (if_nextx_x5_exec_guard) xx_x90 := (xx_x87 == xx_x89 )
if_nextx_x5_if_truex_x6_taken := (if_nextx_x5_exec_guard & xx_x90)
if_nextx_x5_if_falsex_x6_taken := (if_nextx_x5_exec_guard & (~xx_x90))
if_falsex_x6_exec_guard := if_nextx_x5_if_falsex_x6_taken
//begin: basic-block if_falsex_x6
if_falsex_x6_if_nextx_x6_taken := if_falsex_x6_exec_guard
if_truex_x6_exec_guard := if_nextx_x5_if_truex_x6_taken
//begin: basic-block if_truex_x6
$guard (if_truex_x6_exec_guard) xx_x93 := (xx_x9236 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
if_truex_x6_if_nextx_x6_taken := if_truex_x6_exec_guard
//begin: basic-block if_nextx_x6
xx_x8730 := ($mux if_falsex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x87) ($mux if_truex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) ($bitcast ($uint<64>) 0)))
xx_x8228 := ($mux if_falsex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x87) ($mux if_truex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) ($bitcast ($uint<64>) 0)))
xx_x6023 := ($mux if_falsex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x9236) ($mux if_truex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x93) ($bitcast ($uint<64>) 0)))
xx_x5017 := ($mux if_falsex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x5018) ($mux if_truex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x93) ($bitcast ($uint<64>) 0)))
xx_x4012 := ($mux if_falsex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x4013) ($mux if_truex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x93) ($bitcast ($uint<64>) 0)))
xx_x308 := ($mux if_falsex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x309) ($mux if_truex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x93) ($bitcast ($uint<64>) 0)))
xx_x202 := ($mux if_falsex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x203) ($mux if_truex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x93) ($bitcast ($uint<64>) 0)))
xx_x99 := (xx_x9841 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
// compare instruction
xx_x17 := (xx_x99 < xx_x13 )
if_nextx_x6_forx_xfor_out_crit_edge_taken := ( ~xx_x17)
$while xx_x17
$if if_nextx_x6_forx_xfor_out_crit_edge_taken $then 
  $place [if_nextx_x6_forx_xfor_out_crit_edge]
$endif
//begin: basic-block forx_xfor_out_crit_edge
$merge if_nextx_x6_forx_xfor_out_crit_edge
$endmerge
$place [forx_xfor_out_crit_edge_for_out]
//begin: basic-block for_out
$merge forx_xfor_out_crit_edge_for_out vars_for_out
$endmerge
}
}
$module [loadNeutral] 
 $in (num_chn_present : $uint<32> ker_size : $uint<32> )
 $out ()
 $is 
{
$branchblock [body] {
//begin: basic-block vars
xx_x11 := (ker_size * ker_size)
xx_x13 := (xx_x11 * num_chn_present)
xx_x105 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) num_chn_present) )
xx_x116 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) ker_size) )
// compare instruction
xx_x1769 := (( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  < xx_x13 )
$if xx_x1769 $then  $place [vars_for_bodyx_xlrx_xph] $else $place [vars_for_out] $endif 
//begin: basic-block for_bodyx_xlrx_xph
$merge vars_for_bodyx_xlrx_xph
$endmerge
$place [for_bodyx_xlrx_xph_for_body]
//begin: basic-block for_body
//   this is a do-while loop.
$merge for_bodyx_xlrx_xph_for_body
$endmerge
$dopipeline $depth 31 $buffering 7 
$fullrate
$merge $entry $loopback
$phi xx_x12578 :=  ( $cast ($uint<32>) xx_x126) $on $loopback ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on $entry
$phi xx_x2077 :=  ( $cast ($uint<64>) xx_x2031) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x3576 :=  ( $cast ($uint<64>) xx_x3537) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x5075 :=  ( $cast ($uint<64>) xx_x5041) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x6574 :=  ( $cast ($uint<64>) xx_x6546) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x11973 :=  ( $cast ($uint<64>) xx_x8052) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x10972 :=  ( $cast ($uint<64>) xx_x8755) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x10071 :=  ( $cast ($uint<64>) xx_x10057) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x1145870 :=  ( $cast ($uint<64>) xx_x11459) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$endmerge
// compare instruction
xx_x21 := (xx_x2077 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
for_body_if_true_taken := xx_x21
for_body_if_falsex_x1_taken := ( ~xx_x21)
if_falsex_x1_exec_guard := for_body_if_falsex_x1_taken
//begin: basic-block if_falsex_x1
// compare instruction
$guard (if_falsex_x1_exec_guard) xx_x36 := (xx_x3576 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  )
if_falsex_x1_if_truex_x2_taken := (if_falsex_x1_exec_guard & xx_x36)
if_falsex_x1_if_falsex_x3_taken := (if_falsex_x1_exec_guard & (~xx_x36))
if_falsex_x3_exec_guard := if_falsex_x1_if_falsex_x3_taken
//begin: basic-block if_falsex_x3
// compare instruction
$guard (if_falsex_x3_exec_guard) xx_x51 := (xx_x5075 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 )  )
if_falsex_x3_if_truex_x4_taken := (if_falsex_x3_exec_guard & xx_x51)
if_falsex_x3_if_falsex_x5_taken := (if_falsex_x3_exec_guard & (~xx_x51))
if_falsex_x5_exec_guard := if_falsex_x3_if_falsex_x5_taken
//begin: basic-block if_falsex_x5
// compare instruction
$guard (if_falsex_x5_exec_guard) xx_x66 := (xx_x6574 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 )  )
if_falsex_x5_if_truex_x6_taken := (if_falsex_x5_exec_guard & xx_x66)
if_falsex_x5_if_falsex_x7_taken := (if_falsex_x5_exec_guard & (~xx_x66))
if_falsex_x7_exec_guard := if_falsex_x5_if_falsex_x7_taken
//begin: basic-block if_falsex_x7
// compare instruction
$guard (if_falsex_x7_exec_guard) xx_x81 := (xx_x11973 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000100 )  )
if_falsex_x7_if_truex_x8_taken := (if_falsex_x7_exec_guard & xx_x81)
if_falsex_x7_if_falsex_x9_taken := (if_falsex_x7_exec_guard & (~xx_x81))
if_falsex_x9_exec_guard := if_falsex_x7_if_falsex_x9_taken
//begin: basic-block if_falsex_x9
if_falsex_x9_if_nextx_x5_taken := if_falsex_x9_exec_guard
if_truex_x8_exec_guard := if_falsex_x7_if_truex_x8_taken
//begin: basic-block if_truex_x8
$guard (if_truex_x8_exec_guard) xx_x83 := in_data_4
$guard (if_truex_x8_exec_guard) conv_input_data := xx_x83
// compare instruction
$guard (if_truex_x8_exec_guard) xx_x88 := ( ($bitcast ( $int<64>) xx_x10972) >  ($bitcast ( $int<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  ) )
if_truex_x8_if_truex_x9_taken := (if_truex_x8_exec_guard & xx_x88)
if_truex_x8_if_falsex_x8_taken := (if_truex_x8_exec_guard & (~xx_x88))
if_falsex_x8_exec_guard := if_truex_x8_if_falsex_x8_taken
//begin: basic-block if_falsex_x8
if_falsex_x8_if_nextx_x4_taken := if_falsex_x8_exec_guard
if_truex_x9_exec_guard := if_truex_x8_if_truex_x9_taken
//begin: basic-block if_truex_x9
$guard (if_truex_x9_exec_guard) in_data_4 := xx_x83
if_truex_x9_if_nextx_x4_taken := if_truex_x9_exec_guard
if_nextx_x4_exec_guard := (if_falsex_x8_if_nextx_x4_taken | if_truex_x9_if_nextx_x4_taken )
//begin: basic-block if_nextx_x4
if_nextx_x4_if_nextx_x5_taken := if_nextx_x4_exec_guard
if_nextx_x5_exec_guard := (if_falsex_x9_if_nextx_x5_taken | if_nextx_x4_if_nextx_x5_taken )
//begin: basic-block if_nextx_x5
if_nextx_x5_if_nextx_x6_taken := if_nextx_x5_exec_guard
if_truex_x6_exec_guard := if_falsex_x5_if_truex_x6_taken
//begin: basic-block if_truex_x6
$guard (if_truex_x6_exec_guard) xx_x68 := in_data_3
$guard (if_truex_x6_exec_guard) conv_input_data := xx_x68
// compare instruction
$guard (if_truex_x6_exec_guard) xx_x73 := ( ($bitcast ( $int<64>) xx_x10972) >  ($bitcast ( $int<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  ) )
if_truex_x6_if_truex_x7_taken := (if_truex_x6_exec_guard & xx_x73)
if_truex_x6_if_falsex_x6_taken := (if_truex_x6_exec_guard & (~xx_x73))
if_falsex_x6_exec_guard := if_truex_x6_if_falsex_x6_taken
//begin: basic-block if_falsex_x6
if_falsex_x6_if_nextx_x3_taken := if_falsex_x6_exec_guard
if_truex_x7_exec_guard := if_truex_x6_if_truex_x7_taken
//begin: basic-block if_truex_x7
$guard (if_truex_x7_exec_guard) in_data_3 := xx_x68
if_truex_x7_if_nextx_x3_taken := if_truex_x7_exec_guard
if_nextx_x3_exec_guard := (if_falsex_x6_if_nextx_x3_taken | if_truex_x7_if_nextx_x3_taken )
//begin: basic-block if_nextx_x3
if_nextx_x3_if_nextx_x6_taken := if_nextx_x3_exec_guard
if_nextx_x6_exec_guard := (if_nextx_x3_if_nextx_x6_taken | if_nextx_x5_if_nextx_x6_taken )
//begin: basic-block if_nextx_x6
xx_x6550 := ($mux if_nextx_x5_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x11973) ($mux if_nextx_x3_if_nextx_x6_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 ) ) ($bitcast ($uint<64>) 0)))
xx_x2036 := ($mux if_nextx_x5_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x11973) ($mux if_nextx_x3_if_nextx_x6_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 ) ) ($bitcast ($uint<64>) 0)))
if_nextx_x6_if_nextx_x7_taken := if_nextx_x6_exec_guard
if_truex_x4_exec_guard := if_falsex_x3_if_truex_x4_taken
//begin: basic-block if_truex_x4
$guard (if_truex_x4_exec_guard) xx_x53 := in_data_2
$guard (if_truex_x4_exec_guard) conv_input_data := xx_x53
// compare instruction
$guard (if_truex_x4_exec_guard) xx_x58 := ( ($bitcast ( $int<64>) xx_x10972) >  ($bitcast ( $int<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  ) )
if_truex_x4_if_truex_x5_taken := (if_truex_x4_exec_guard & xx_x58)
if_truex_x4_if_falsex_x4_taken := (if_truex_x4_exec_guard & (~xx_x58))
if_falsex_x4_exec_guard := if_truex_x4_if_falsex_x4_taken
//begin: basic-block if_falsex_x4
if_falsex_x4_if_nextx_x2_taken := if_falsex_x4_exec_guard
if_truex_x5_exec_guard := if_truex_x4_if_truex_x5_taken
//begin: basic-block if_truex_x5
$guard (if_truex_x5_exec_guard) in_data_2 := xx_x53
if_truex_x5_if_nextx_x2_taken := if_truex_x5_exec_guard
if_nextx_x2_exec_guard := (if_falsex_x4_if_nextx_x2_taken | if_truex_x5_if_nextx_x2_taken )
//begin: basic-block if_nextx_x2
if_nextx_x2_if_nextx_x7_taken := if_nextx_x2_exec_guard
if_nextx_x7_exec_guard := (if_nextx_x2_if_nextx_x7_taken | if_nextx_x6_if_nextx_x7_taken )
//begin: basic-block if_nextx_x7
xx_x6549 := ($mux if_nextx_x6_if_nextx_x7_taken ( $bitcast ($uint<64>) xx_x6550) ($mux if_nextx_x2_if_nextx_x7_taken ( $bitcast ($uint<64>) xx_x6574) ($bitcast ($uint<64>) 0)))
xx_x5044 := ($mux if_nextx_x6_if_nextx_x7_taken ( $bitcast ($uint<64>) xx_x2036) ($mux if_nextx_x2_if_nextx_x7_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ) ($bitcast ($uint<64>) 0)))
xx_x2035 := ($mux if_nextx_x6_if_nextx_x7_taken ( $bitcast ($uint<64>) xx_x2036) ($mux if_nextx_x2_if_nextx_x7_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ) ($bitcast ($uint<64>) 0)))
if_nextx_x7_if_nextx_x8_taken := if_nextx_x7_exec_guard
if_truex_x2_exec_guard := if_falsex_x1_if_truex_x2_taken
//begin: basic-block if_truex_x2
$guard (if_truex_x2_exec_guard) xx_x38 := in_data_1
$guard (if_truex_x2_exec_guard) conv_input_data := xx_x38
// compare instruction
$guard (if_truex_x2_exec_guard) xx_x43 := ( ($bitcast ( $int<64>) xx_x10972) >  ($bitcast ( $int<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  ) )
if_truex_x2_if_truex_x3_taken := (if_truex_x2_exec_guard & xx_x43)
if_truex_x2_if_falsex_x2_taken := (if_truex_x2_exec_guard & (~xx_x43))
if_falsex_x2_exec_guard := if_truex_x2_if_falsex_x2_taken
//begin: basic-block if_falsex_x2
if_falsex_x2_if_nextx_x1_taken := if_falsex_x2_exec_guard
if_truex_x3_exec_guard := if_truex_x2_if_truex_x3_taken
//begin: basic-block if_truex_x3
$guard (if_truex_x3_exec_guard) in_data_1 := xx_x38
if_truex_x3_if_nextx_x1_taken := if_truex_x3_exec_guard
if_nextx_x1_exec_guard := (if_falsex_x2_if_nextx_x1_taken | if_truex_x3_if_nextx_x1_taken )
//begin: basic-block if_nextx_x1
if_nextx_x1_if_nextx_x8_taken := if_nextx_x1_exec_guard
if_nextx_x8_exec_guard := (if_nextx_x1_if_nextx_x8_taken | if_nextx_x7_if_nextx_x8_taken )
//begin: basic-block if_nextx_x8
xx_x6548 := ($mux if_nextx_x7_if_nextx_x8_taken ( $bitcast ($uint<64>) xx_x6549) ($mux if_nextx_x1_if_nextx_x8_taken ( $bitcast ($uint<64>) xx_x6574) ($bitcast ($uint<64>) 0)))
xx_x5043 := ($mux if_nextx_x7_if_nextx_x8_taken ( $bitcast ($uint<64>) xx_x5044) ($mux if_nextx_x1_if_nextx_x8_taken ( $bitcast ($uint<64>) xx_x5075) ($bitcast ($uint<64>) 0)))
xx_x3539 := ($mux if_nextx_x7_if_nextx_x8_taken ( $bitcast ($uint<64>) xx_x2035) ($mux if_nextx_x1_if_nextx_x8_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ) ($bitcast ($uint<64>) 0)))
xx_x2034 := ($mux if_nextx_x7_if_nextx_x8_taken ( $bitcast ($uint<64>) xx_x2035) ($mux if_nextx_x1_if_nextx_x8_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ) ($bitcast ($uint<64>) 0)))
if_nextx_x8_if_nextx_x9_taken := if_nextx_x8_exec_guard
if_true_exec_guard := for_body_if_true_taken
//begin: basic-block if_true
$guard (if_true_exec_guard) xx_x23 := in_data_0
$guard (if_true_exec_guard) conv_input_data := xx_x23
// compare instruction
$guard (if_true_exec_guard) xx_x28 := ( ($bitcast ( $int<64>) xx_x10972) >  ($bitcast ( $int<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  ) )
if_true_if_truex_x1_taken := (if_true_exec_guard & xx_x28)
if_true_if_false_taken := (if_true_exec_guard & (~xx_x28))
if_false_exec_guard := if_true_if_false_taken
//begin: basic-block if_false
if_false_if_next_taken := if_false_exec_guard
if_truex_x1_exec_guard := if_true_if_truex_x1_taken
//begin: basic-block if_truex_x1
$guard (if_truex_x1_exec_guard) in_data_0 := xx_x23
if_truex_x1_if_next_taken := if_truex_x1_exec_guard
if_next_exec_guard := (if_false_if_next_taken | if_truex_x1_if_next_taken )
//begin: basic-block if_next
if_next_if_nextx_x9_taken := if_next_exec_guard
if_nextx_x9_exec_guard := (if_next_if_nextx_x9_taken | if_nextx_x8_if_nextx_x9_taken )
//begin: basic-block if_nextx_x9
xx_x6547 := ($mux if_nextx_x8_if_nextx_x9_taken ( $bitcast ($uint<64>) xx_x6548) ($mux if_next_if_nextx_x9_taken ( $bitcast ($uint<64>) xx_x6574) ($bitcast ($uint<64>) 0)))
xx_x5042 := ($mux if_nextx_x8_if_nextx_x9_taken ( $bitcast ($uint<64>) xx_x5043) ($mux if_next_if_nextx_x9_taken ( $bitcast ($uint<64>) xx_x5075) ($bitcast ($uint<64>) 0)))
xx_x3538 := ($mux if_nextx_x8_if_nextx_x9_taken ( $bitcast ($uint<64>) xx_x3539) ($mux if_next_if_nextx_x9_taken ( $bitcast ($uint<64>) xx_x3576) ($bitcast ($uint<64>) 0)))
xx_x2032 := ($mux if_nextx_x8_if_nextx_x9_taken ( $bitcast ($uint<64>) xx_x2034) ($mux if_next_if_nextx_x9_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) ($bitcast ($uint<64>) 0)))
$guard (if_nextx_x9_exec_guard) xx_x101 := (xx_x10071 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
// compare instruction
$guard (if_nextx_x9_exec_guard) xx_x106 := (xx_x101 == xx_x105 )
if_nextx_x9_if_truex_x10_taken := (if_nextx_x9_exec_guard & xx_x106)
if_nextx_x9_if_falsex_x10_taken := (if_nextx_x9_exec_guard & (~xx_x106))
if_falsex_x10_exec_guard := if_nextx_x9_if_falsex_x10_taken
//begin: basic-block if_falsex_x10
if_falsex_x10_if_nextx_x10_taken := if_falsex_x10_exec_guard
if_truex_x10_exec_guard := if_nextx_x9_if_truex_x10_taken
//begin: basic-block if_truex_x10
$guard (if_truex_x10_exec_guard) xx_x110 := (xx_x10972 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
if_truex_x10_if_nextx_x10_taken := if_truex_x10_exec_guard
if_nextx_x10_exec_guard := (if_falsex_x10_if_nextx_x10_taken | if_truex_x10_if_nextx_x10_taken )
//begin: basic-block if_nextx_x10
xx_x114 := ($mux if_falsex_x10_if_nextx_x10_taken ( $bitcast ($uint<64>) xx_x1145870) ($mux if_truex_x10_if_nextx_x10_taken ( $bitcast ($uint<64>) xx_x110) ($bitcast ($uint<64>) 0)))
xx_x10057 := ($mux if_falsex_x10_if_nextx_x10_taken ( $bitcast ($uint<64>) xx_x101) ($mux if_truex_x10_if_nextx_x10_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) ($bitcast ($uint<64>) 0)))
// compare instruction
$guard (if_nextx_x10_exec_guard) xx_x117 := (xx_x114 == xx_x116 )
if_nextx_x10_if_truex_x11_taken := (if_nextx_x10_exec_guard & xx_x117)
if_nextx_x10_if_falsex_x11_taken := (if_nextx_x10_exec_guard & (~xx_x117))
if_falsex_x11_exec_guard := if_nextx_x10_if_falsex_x11_taken
//begin: basic-block if_falsex_x11
if_falsex_x11_if_nextx_x11_taken := if_falsex_x11_exec_guard
if_truex_x11_exec_guard := if_nextx_x10_if_truex_x11_taken
//begin: basic-block if_truex_x11
$guard (if_truex_x11_exec_guard) xx_x120 := (xx_x11973 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
if_truex_x11_if_nextx_x11_taken := if_truex_x11_exec_guard
//begin: basic-block if_nextx_x11
xx_x11459 := ($mux if_falsex_x11_if_nextx_x11_taken ( $bitcast ($uint<64>) xx_x114) ($mux if_truex_x11_if_nextx_x11_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) ($bitcast ($uint<64>) 0)))
xx_x8755 := ($mux if_falsex_x11_if_nextx_x11_taken ( $bitcast ($uint<64>) xx_x114) ($mux if_truex_x11_if_nextx_x11_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) ($bitcast ($uint<64>) 0)))
xx_x8052 := ($mux if_falsex_x11_if_nextx_x11_taken ( $bitcast ($uint<64>) xx_x11973) ($mux if_truex_x11_if_nextx_x11_taken ( $bitcast ($uint<64>) xx_x120) ($bitcast ($uint<64>) 0)))
xx_x6546 := ($mux if_falsex_x11_if_nextx_x11_taken ( $bitcast ($uint<64>) xx_x6547) ($mux if_truex_x11_if_nextx_x11_taken ( $bitcast ($uint<64>) xx_x120) ($bitcast ($uint<64>) 0)))
xx_x5041 := ($mux if_falsex_x11_if_nextx_x11_taken ( $bitcast ($uint<64>) xx_x5042) ($mux if_truex_x11_if_nextx_x11_taken ( $bitcast ($uint<64>) xx_x120) ($bitcast ($uint<64>) 0)))
xx_x3537 := ($mux if_falsex_x11_if_nextx_x11_taken ( $bitcast ($uint<64>) xx_x3538) ($mux if_truex_x11_if_nextx_x11_taken ( $bitcast ($uint<64>) xx_x120) ($bitcast ($uint<64>) 0)))
xx_x2031 := ($mux if_falsex_x11_if_nextx_x11_taken ( $bitcast ($uint<64>) xx_x2032) ($mux if_truex_x11_if_nextx_x11_taken ( $bitcast ($uint<64>) xx_x120) ($bitcast ($uint<64>) 0)))
xx_x126 := (xx_x12578 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
// compare instruction
xx_x17 := (xx_x126 < xx_x13 )
if_nextx_x11_forx_xfor_out_crit_edge_taken := ( ~xx_x17)
$while xx_x17
$if if_nextx_x11_forx_xfor_out_crit_edge_taken $then 
  $place [if_nextx_x11_forx_xfor_out_crit_edge]
$endif
//begin: basic-block forx_xfor_out_crit_edge
$merge if_nextx_x11_forx_xfor_out_crit_edge
$endmerge
$place [forx_xfor_out_crit_edge_for_out]
//begin: basic-block for_out
$merge forx_xfor_out_crit_edge_for_out vars_for_out
$endmerge
xx_x133 := (ker_size * num_chn_present)
xx_x182 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) num_chn_present) )
// compare instruction
xx_x13761 := (( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  < xx_x133 )
$if xx_x13761 $then  $place [for_out_for_bodyx_x1x_xlrx_xph] $else $place [for_out_for_outx_x1] $endif 
//begin: basic-block for_bodyx_x1x_xlrx_xph
$merge for_out_for_bodyx_x1x_xlrx_xph
$endmerge
$place [for_bodyx_x1x_xlrx_xph_for_bodyx_x1]
//begin: basic-block for_bodyx_x1
//   this is a do-while loop.
$merge for_bodyx_x1x_xlrx_xph_for_bodyx_x1
$endmerge
$dopipeline $depth 31 $buffering 7 
$fullrate
$merge $entry $loopback
$phi xx_x19168 :=  ( $cast ($uint<32>) xx_x192) $on $loopback ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on $entry
$phi xx_x14267 :=  ( $cast ($uint<64>) xx_x1426) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x14866 :=  ( $cast ($uint<64>) xx_x14812) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x15465 :=  ( $cast ($uint<64>) xx_x15416) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x16064 :=  ( $cast ($uint<64>) xx_x16021) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x18663 :=  ( $cast ($uint<64>) xx_x16627) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x17762 :=  ( $cast ($uint<64>) xx_x17730) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$endmerge
xx_x140 := hor_slice_pipe
// compare instruction
xx_x143 := (xx_x14267 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
for_bodyx_x1_if_truex_x12_taken := xx_x143
for_bodyx_x1_if_falsex_x12_taken := ( ~xx_x143)
if_falsex_x12_exec_guard := for_bodyx_x1_if_falsex_x12_taken
//begin: basic-block if_falsex_x12
// compare instruction
$guard (if_falsex_x12_exec_guard) xx_x149 := (xx_x14866 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  )
if_falsex_x12_if_truex_x13_taken := (if_falsex_x12_exec_guard & xx_x149)
if_falsex_x12_if_falsex_x13_taken := (if_falsex_x12_exec_guard & (~xx_x149))
if_falsex_x13_exec_guard := if_falsex_x12_if_falsex_x13_taken
//begin: basic-block if_falsex_x13
// compare instruction
$guard (if_falsex_x13_exec_guard) xx_x155 := (xx_x15465 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 )  )
if_falsex_x13_if_truex_x14_taken := (if_falsex_x13_exec_guard & xx_x155)
if_falsex_x13_if_falsex_x14_taken := (if_falsex_x13_exec_guard & (~xx_x155))
if_falsex_x14_exec_guard := if_falsex_x13_if_falsex_x14_taken
//begin: basic-block if_falsex_x14
// compare instruction
$guard (if_falsex_x14_exec_guard) xx_x161 := (xx_x16064 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 )  )
if_falsex_x14_if_truex_x15_taken := (if_falsex_x14_exec_guard & xx_x161)
if_falsex_x14_if_falsex_x15_taken := (if_falsex_x14_exec_guard & (~xx_x161))
if_falsex_x15_exec_guard := if_falsex_x14_if_falsex_x15_taken
//begin: basic-block if_falsex_x15
// compare instruction
$guard (if_falsex_x15_exec_guard) xx_x167 := (xx_x18663 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000100 )  )
if_falsex_x15_if_truex_x16_taken := (if_falsex_x15_exec_guard & xx_x167)
if_falsex_x15_if_falsex_x16_taken := (if_falsex_x15_exec_guard & (~xx_x167))
if_falsex_x16_exec_guard := if_falsex_x15_if_falsex_x16_taken
//begin: basic-block if_falsex_x16
if_falsex_x16_if_nextx_x12_taken := if_falsex_x16_exec_guard
if_truex_x16_exec_guard := if_falsex_x15_if_truex_x16_taken
//begin: basic-block if_truex_x16
$guard (if_truex_x16_exec_guard) in_data_4 := xx_x140
if_truex_x16_if_nextx_x12_taken := if_truex_x16_exec_guard
if_nextx_x12_exec_guard := (if_falsex_x16_if_nextx_x12_taken | if_truex_x16_if_nextx_x12_taken )
//begin: basic-block if_nextx_x12
if_nextx_x12_if_nextx_x13_taken := if_nextx_x12_exec_guard
if_truex_x15_exec_guard := if_falsex_x14_if_truex_x15_taken
//begin: basic-block if_truex_x15
$guard (if_truex_x15_exec_guard) in_data_3 := xx_x140
if_truex_x15_if_nextx_x13_taken := if_truex_x15_exec_guard
if_nextx_x13_exec_guard := (if_nextx_x12_if_nextx_x13_taken | if_truex_x15_if_nextx_x13_taken )
//begin: basic-block if_nextx_x13
xx_x16025 := ($mux if_nextx_x12_if_nextx_x13_taken ( $bitcast ($uint<64>) xx_x18663) ($mux if_truex_x15_if_nextx_x13_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 ) ) ($bitcast ($uint<64>) 0)))
xx_x14211 := ($mux if_nextx_x12_if_nextx_x13_taken ( $bitcast ($uint<64>) xx_x18663) ($mux if_truex_x15_if_nextx_x13_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 ) ) ($bitcast ($uint<64>) 0)))
if_nextx_x13_if_nextx_x14_taken := if_nextx_x13_exec_guard
if_truex_x14_exec_guard := if_falsex_x13_if_truex_x14_taken
//begin: basic-block if_truex_x14
$guard (if_truex_x14_exec_guard) in_data_2 := xx_x140
if_truex_x14_if_nextx_x14_taken := if_truex_x14_exec_guard
if_nextx_x14_exec_guard := (if_nextx_x13_if_nextx_x14_taken | if_truex_x14_if_nextx_x14_taken )
//begin: basic-block if_nextx_x14
xx_x16024 := ($mux if_nextx_x13_if_nextx_x14_taken ( $bitcast ($uint<64>) xx_x16025) ($mux if_truex_x14_if_nextx_x14_taken ( $bitcast ($uint<64>) xx_x16064) ($bitcast ($uint<64>) 0)))
xx_x15419 := ($mux if_nextx_x13_if_nextx_x14_taken ( $bitcast ($uint<64>) xx_x14211) ($mux if_truex_x14_if_nextx_x14_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ) ($bitcast ($uint<64>) 0)))
xx_x14210 := ($mux if_nextx_x13_if_nextx_x14_taken ( $bitcast ($uint<64>) xx_x14211) ($mux if_truex_x14_if_nextx_x14_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ) ($bitcast ($uint<64>) 0)))
if_nextx_x14_if_nextx_x15_taken := if_nextx_x14_exec_guard
if_truex_x13_exec_guard := if_falsex_x12_if_truex_x13_taken
//begin: basic-block if_truex_x13
$guard (if_truex_x13_exec_guard) in_data_1 := xx_x140
if_truex_x13_if_nextx_x15_taken := if_truex_x13_exec_guard
if_nextx_x15_exec_guard := (if_nextx_x14_if_nextx_x15_taken | if_truex_x13_if_nextx_x15_taken )
//begin: basic-block if_nextx_x15
xx_x16023 := ($mux if_nextx_x14_if_nextx_x15_taken ( $bitcast ($uint<64>) xx_x16024) ($mux if_truex_x13_if_nextx_x15_taken ( $bitcast ($uint<64>) xx_x16064) ($bitcast ($uint<64>) 0)))
xx_x15418 := ($mux if_nextx_x14_if_nextx_x15_taken ( $bitcast ($uint<64>) xx_x15419) ($mux if_truex_x13_if_nextx_x15_taken ( $bitcast ($uint<64>) xx_x15465) ($bitcast ($uint<64>) 0)))
xx_x14814 := ($mux if_nextx_x14_if_nextx_x15_taken ( $bitcast ($uint<64>) xx_x14210) ($mux if_truex_x13_if_nextx_x15_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ) ($bitcast ($uint<64>) 0)))
xx_x1429 := ($mux if_nextx_x14_if_nextx_x15_taken ( $bitcast ($uint<64>) xx_x14210) ($mux if_truex_x13_if_nextx_x15_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ) ($bitcast ($uint<64>) 0)))
if_nextx_x15_if_nextx_x16_taken := if_nextx_x15_exec_guard
if_truex_x12_exec_guard := for_bodyx_x1_if_truex_x12_taken
//begin: basic-block if_truex_x12
$guard (if_truex_x12_exec_guard) in_data_0 := xx_x140
if_truex_x12_if_nextx_x16_taken := if_truex_x12_exec_guard
if_nextx_x16_exec_guard := (if_nextx_x15_if_nextx_x16_taken | if_truex_x12_if_nextx_x16_taken )
//begin: basic-block if_nextx_x16
xx_x16022 := ($mux if_nextx_x15_if_nextx_x16_taken ( $bitcast ($uint<64>) xx_x16023) ($mux if_truex_x12_if_nextx_x16_taken ( $bitcast ($uint<64>) xx_x16064) ($bitcast ($uint<64>) 0)))
xx_x15417 := ($mux if_nextx_x15_if_nextx_x16_taken ( $bitcast ($uint<64>) xx_x15418) ($mux if_truex_x12_if_nextx_x16_taken ( $bitcast ($uint<64>) xx_x15465) ($bitcast ($uint<64>) 0)))
xx_x14813 := ($mux if_nextx_x15_if_nextx_x16_taken ( $bitcast ($uint<64>) xx_x14814) ($mux if_truex_x12_if_nextx_x16_taken ( $bitcast ($uint<64>) xx_x14866) ($bitcast ($uint<64>) 0)))
xx_x1427 := ($mux if_nextx_x15_if_nextx_x16_taken ( $bitcast ($uint<64>) xx_x1429) ($mux if_truex_x12_if_nextx_x16_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) ($bitcast ($uint<64>) 0)))
$guard (if_nextx_x16_exec_guard) xx_x178 := (xx_x17762 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
// compare instruction
$guard (if_nextx_x16_exec_guard) xx_x183 := (xx_x178 == xx_x182 )
if_nextx_x16_if_truex_x17_taken := (if_nextx_x16_exec_guard & xx_x183)
if_nextx_x16_if_falsex_x17_taken := (if_nextx_x16_exec_guard & (~xx_x183))
if_falsex_x17_exec_guard := if_nextx_x16_if_falsex_x17_taken
//begin: basic-block if_falsex_x17
if_falsex_x17_if_nextx_x17_taken := if_falsex_x17_exec_guard
if_truex_x17_exec_guard := if_nextx_x16_if_truex_x17_taken
//begin: basic-block if_truex_x17
$guard (if_truex_x17_exec_guard) xx_x187 := (xx_x18663 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
if_truex_x17_if_nextx_x17_taken := if_truex_x17_exec_guard
//begin: basic-block if_nextx_x17
xx_x17730 := ($mux if_falsex_x17_if_nextx_x17_taken ( $bitcast ($uint<64>) xx_x178) ($mux if_truex_x17_if_nextx_x17_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) ($bitcast ($uint<64>) 0)))
xx_x16627 := ($mux if_falsex_x17_if_nextx_x17_taken ( $bitcast ($uint<64>) xx_x18663) ($mux if_truex_x17_if_nextx_x17_taken ( $bitcast ($uint<64>) xx_x187) ($bitcast ($uint<64>) 0)))
xx_x16021 := ($mux if_falsex_x17_if_nextx_x17_taken ( $bitcast ($uint<64>) xx_x16022) ($mux if_truex_x17_if_nextx_x17_taken ( $bitcast ($uint<64>) xx_x187) ($bitcast ($uint<64>) 0)))
xx_x15416 := ($mux if_falsex_x17_if_nextx_x17_taken ( $bitcast ($uint<64>) xx_x15417) ($mux if_truex_x17_if_nextx_x17_taken ( $bitcast ($uint<64>) xx_x187) ($bitcast ($uint<64>) 0)))
xx_x14812 := ($mux if_falsex_x17_if_nextx_x17_taken ( $bitcast ($uint<64>) xx_x14813) ($mux if_truex_x17_if_nextx_x17_taken ( $bitcast ($uint<64>) xx_x187) ($bitcast ($uint<64>) 0)))
xx_x1426 := ($mux if_falsex_x17_if_nextx_x17_taken ( $bitcast ($uint<64>) xx_x1427) ($mux if_truex_x17_if_nextx_x17_taken ( $bitcast ($uint<64>) xx_x187) ($bitcast ($uint<64>) 0)))
xx_x192 := (xx_x19168 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
// compare instruction
xx_x137 := (xx_x192 < xx_x133 )
if_nextx_x17_forx_x1x_xfor_outx_x1_crit_edge_taken := ( ~xx_x137)
$while xx_x137
$if if_nextx_x17_forx_x1x_xfor_outx_x1_crit_edge_taken $then 
  $place [if_nextx_x17_forx_x1x_xfor_outx_x1_crit_edge]
$endif
//begin: basic-block forx_x1x_xfor_outx_x1_crit_edge
$merge if_nextx_x17_forx_x1x_xfor_outx_x1_crit_edge
$endmerge
$place [forx_x1x_xfor_outx_x1_crit_edge_for_outx_x1]
//begin: basic-block for_outx_x1
$merge for_out_for_outx_x1 forx_x1x_xfor_outx_x1_crit_edge_for_outx_x1
$endmerge
}
}
$module [loadNeutralLast] 
 $in (num_chn_present : $uint<32> ker_size : $uint<32> )
 $out ()
 $is 
{
$branchblock [body] {
//begin: basic-block vars
xx_x11 := (ker_size * ker_size)
xx_x13 := (xx_x11 * num_chn_present)
xx_x70 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) num_chn_present) )
xx_x81 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) ker_size) )
// compare instruction
xx_x1732 := (( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  < xx_x13 )
$if xx_x1732 $then  $place [vars_for_bodyx_xlrx_xph] $else $place [vars_for_out] $endif 
//begin: basic-block for_bodyx_xlrx_xph
$merge vars_for_bodyx_xlrx_xph
$endmerge
$place [for_bodyx_xlrx_xph_for_body]
//begin: basic-block for_body
//   this is a do-while loop.
$merge for_bodyx_xlrx_xph_for_body
$endmerge
$dopipeline $depth 31 $buffering 7 
$fullrate
$merge $entry $loopback
$phi xx_x9041 :=  ( $cast ($uint<32>) xx_x91) $on $loopback ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on $entry
$phi xx_x2040 :=  ( $cast ($uint<64>) xx_x202) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x2839 :=  ( $cast ($uint<64>) xx_x288) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x3638 :=  ( $cast ($uint<64>) xx_x3612) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x4437 :=  ( $cast ($uint<64>) xx_x4417) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x8436 :=  ( $cast ($uint<64>) xx_x5223) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x6535 :=  ( $cast ($uint<64>) xx_x6526) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x7434 :=  ( $cast ($uint<64>) xx_x7428) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x792933 :=  ( $cast ($uint<64>) xx_x7930) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$endmerge
// compare instruction
xx_x21 := (xx_x2040 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
for_body_if_true_taken := xx_x21
for_body_if_false_taken := ( ~xx_x21)
if_false_exec_guard := for_body_if_false_taken
//begin: basic-block if_false
// compare instruction
$guard (if_false_exec_guard) xx_x29 := (xx_x2839 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  )
if_false_if_truex_x1_taken := (if_false_exec_guard & xx_x29)
if_false_if_falsex_x1_taken := (if_false_exec_guard & (~xx_x29))
if_falsex_x1_exec_guard := if_false_if_falsex_x1_taken
//begin: basic-block if_falsex_x1
// compare instruction
$guard (if_falsex_x1_exec_guard) xx_x37 := (xx_x3638 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 )  )
if_falsex_x1_if_truex_x2_taken := (if_falsex_x1_exec_guard & xx_x37)
if_falsex_x1_if_falsex_x2_taken := (if_falsex_x1_exec_guard & (~xx_x37))
if_falsex_x2_exec_guard := if_falsex_x1_if_falsex_x2_taken
//begin: basic-block if_falsex_x2
// compare instruction
$guard (if_falsex_x2_exec_guard) xx_x45 := (xx_x4437 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 )  )
if_falsex_x2_if_truex_x3_taken := (if_falsex_x2_exec_guard & xx_x45)
if_falsex_x2_if_falsex_x3_taken := (if_falsex_x2_exec_guard & (~xx_x45))
if_falsex_x3_exec_guard := if_falsex_x2_if_falsex_x3_taken
//begin: basic-block if_falsex_x3
// compare instruction
$guard (if_falsex_x3_exec_guard) xx_x53 := (xx_x8436 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000100 )  )
if_falsex_x3_if_truex_x4_taken := (if_falsex_x3_exec_guard & xx_x53)
if_falsex_x3_if_falsex_x4_taken := (if_falsex_x3_exec_guard & (~xx_x53))
if_falsex_x4_exec_guard := if_falsex_x3_if_falsex_x4_taken
//begin: basic-block if_falsex_x4
if_falsex_x4_if_next_taken := if_falsex_x4_exec_guard
if_truex_x4_exec_guard := if_falsex_x3_if_truex_x4_taken
//begin: basic-block if_truex_x4
$guard (if_truex_x4_exec_guard) xx_x55 := in_data_4
$guard (if_truex_x4_exec_guard) conv_input_data := xx_x55
if_truex_x4_if_next_taken := if_truex_x4_exec_guard
if_next_exec_guard := (if_falsex_x4_if_next_taken | if_truex_x4_if_next_taken )
//begin: basic-block if_next
if_next_if_nextx_x1_taken := if_next_exec_guard
if_truex_x3_exec_guard := if_falsex_x2_if_truex_x3_taken
//begin: basic-block if_truex_x3
$guard (if_truex_x3_exec_guard) xx_x47 := in_data_3
$guard (if_truex_x3_exec_guard) conv_input_data := xx_x47
if_truex_x3_if_nextx_x1_taken := if_truex_x3_exec_guard
if_nextx_x1_exec_guard := (if_next_if_nextx_x1_taken | if_truex_x3_if_nextx_x1_taken )
//begin: basic-block if_nextx_x1
xx_x4421 := ($mux if_next_if_nextx_x1_taken ( $bitcast ($uint<64>) xx_x8436) ($mux if_truex_x3_if_nextx_x1_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 ) ) ($bitcast ($uint<64>) 0)))
xx_x207 := ($mux if_next_if_nextx_x1_taken ( $bitcast ($uint<64>) xx_x8436) ($mux if_truex_x3_if_nextx_x1_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 ) ) ($bitcast ($uint<64>) 0)))
if_nextx_x1_if_nextx_x2_taken := if_nextx_x1_exec_guard
if_truex_x2_exec_guard := if_falsex_x1_if_truex_x2_taken
//begin: basic-block if_truex_x2
$guard (if_truex_x2_exec_guard) xx_x39 := in_data_2
$guard (if_truex_x2_exec_guard) conv_input_data := xx_x39
if_truex_x2_if_nextx_x2_taken := if_truex_x2_exec_guard
if_nextx_x2_exec_guard := (if_nextx_x1_if_nextx_x2_taken | if_truex_x2_if_nextx_x2_taken )
//begin: basic-block if_nextx_x2
xx_x4420 := ($mux if_nextx_x1_if_nextx_x2_taken ( $bitcast ($uint<64>) xx_x4421) ($mux if_truex_x2_if_nextx_x2_taken ( $bitcast ($uint<64>) xx_x4437) ($bitcast ($uint<64>) 0)))
xx_x3615 := ($mux if_nextx_x1_if_nextx_x2_taken ( $bitcast ($uint<64>) xx_x207) ($mux if_truex_x2_if_nextx_x2_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ) ($bitcast ($uint<64>) 0)))
xx_x206 := ($mux if_nextx_x1_if_nextx_x2_taken ( $bitcast ($uint<64>) xx_x207) ($mux if_truex_x2_if_nextx_x2_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ) ($bitcast ($uint<64>) 0)))
if_nextx_x2_if_nextx_x3_taken := if_nextx_x2_exec_guard
if_truex_x1_exec_guard := if_false_if_truex_x1_taken
//begin: basic-block if_truex_x1
$guard (if_truex_x1_exec_guard) xx_x31 := in_data_1
$guard (if_truex_x1_exec_guard) conv_input_data := xx_x31
if_truex_x1_if_nextx_x3_taken := if_truex_x1_exec_guard
if_nextx_x3_exec_guard := (if_nextx_x2_if_nextx_x3_taken | if_truex_x1_if_nextx_x3_taken )
//begin: basic-block if_nextx_x3
xx_x4419 := ($mux if_nextx_x2_if_nextx_x3_taken ( $bitcast ($uint<64>) xx_x4420) ($mux if_truex_x1_if_nextx_x3_taken ( $bitcast ($uint<64>) xx_x4437) ($bitcast ($uint<64>) 0)))
xx_x3614 := ($mux if_nextx_x2_if_nextx_x3_taken ( $bitcast ($uint<64>) xx_x3615) ($mux if_truex_x1_if_nextx_x3_taken ( $bitcast ($uint<64>) xx_x3638) ($bitcast ($uint<64>) 0)))
xx_x2810 := ($mux if_nextx_x2_if_nextx_x3_taken ( $bitcast ($uint<64>) xx_x206) ($mux if_truex_x1_if_nextx_x3_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ) ($bitcast ($uint<64>) 0)))
xx_x205 := ($mux if_nextx_x2_if_nextx_x3_taken ( $bitcast ($uint<64>) xx_x206) ($mux if_truex_x1_if_nextx_x3_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ) ($bitcast ($uint<64>) 0)))
if_nextx_x3_if_nextx_x4_taken := if_nextx_x3_exec_guard
if_true_exec_guard := for_body_if_true_taken
//begin: basic-block if_true
$guard (if_true_exec_guard) xx_x23 := in_data_0
$guard (if_true_exec_guard) conv_input_data := xx_x23
if_true_if_nextx_x4_taken := if_true_exec_guard
if_nextx_x4_exec_guard := (if_nextx_x3_if_nextx_x4_taken | if_true_if_nextx_x4_taken )
//begin: basic-block if_nextx_x4
xx_x4418 := ($mux if_nextx_x3_if_nextx_x4_taken ( $bitcast ($uint<64>) xx_x4419) ($mux if_true_if_nextx_x4_taken ( $bitcast ($uint<64>) xx_x4437) ($bitcast ($uint<64>) 0)))
xx_x3613 := ($mux if_nextx_x3_if_nextx_x4_taken ( $bitcast ($uint<64>) xx_x3614) ($mux if_true_if_nextx_x4_taken ( $bitcast ($uint<64>) xx_x3638) ($bitcast ($uint<64>) 0)))
xx_x289 := ($mux if_nextx_x3_if_nextx_x4_taken ( $bitcast ($uint<64>) xx_x2810) ($mux if_true_if_nextx_x4_taken ( $bitcast ($uint<64>) xx_x2839) ($bitcast ($uint<64>) 0)))
xx_x203 := ($mux if_nextx_x3_if_nextx_x4_taken ( $bitcast ($uint<64>) xx_x205) ($mux if_true_if_nextx_x4_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) ($bitcast ($uint<64>) 0)))
$guard (if_nextx_x4_exec_guard) xx_x66 := (xx_x6535 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
// compare instruction
$guard (if_nextx_x4_exec_guard) xx_x71 := (xx_x66 == xx_x70 )
if_nextx_x4_if_truex_x5_taken := (if_nextx_x4_exec_guard & xx_x71)
if_nextx_x4_if_falsex_x5_taken := (if_nextx_x4_exec_guard & (~xx_x71))
if_falsex_x5_exec_guard := if_nextx_x4_if_falsex_x5_taken
//begin: basic-block if_falsex_x5
if_falsex_x5_if_nextx_x5_taken := if_falsex_x5_exec_guard
if_truex_x5_exec_guard := if_nextx_x4_if_truex_x5_taken
//begin: basic-block if_truex_x5
$guard (if_truex_x5_exec_guard) xx_x75 := (xx_x7434 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
if_truex_x5_if_nextx_x5_taken := if_truex_x5_exec_guard
if_nextx_x5_exec_guard := (if_falsex_x5_if_nextx_x5_taken | if_truex_x5_if_nextx_x5_taken )
//begin: basic-block if_nextx_x5
xx_x79 := ($mux if_falsex_x5_if_nextx_x5_taken ( $bitcast ($uint<64>) xx_x792933) ($mux if_truex_x5_if_nextx_x5_taken ( $bitcast ($uint<64>) xx_x75) ($bitcast ($uint<64>) 0)))
xx_x6526 := ($mux if_falsex_x5_if_nextx_x5_taken ( $bitcast ($uint<64>) xx_x66) ($mux if_truex_x5_if_nextx_x5_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) ($bitcast ($uint<64>) 0)))
// compare instruction
$guard (if_nextx_x5_exec_guard) xx_x82 := (xx_x79 == xx_x81 )
if_nextx_x5_if_truex_x6_taken := (if_nextx_x5_exec_guard & xx_x82)
if_nextx_x5_if_falsex_x6_taken := (if_nextx_x5_exec_guard & (~xx_x82))
if_falsex_x6_exec_guard := if_nextx_x5_if_falsex_x6_taken
//begin: basic-block if_falsex_x6
if_falsex_x6_if_nextx_x6_taken := if_falsex_x6_exec_guard
if_truex_x6_exec_guard := if_nextx_x5_if_truex_x6_taken
//begin: basic-block if_truex_x6
$guard (if_truex_x6_exec_guard) xx_x85 := (xx_x8436 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
if_truex_x6_if_nextx_x6_taken := if_truex_x6_exec_guard
//begin: basic-block if_nextx_x6
xx_x7930 := ($mux if_falsex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x79) ($mux if_truex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) ($bitcast ($uint<64>) 0)))
xx_x7428 := ($mux if_falsex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x79) ($mux if_truex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) ($bitcast ($uint<64>) 0)))
xx_x5223 := ($mux if_falsex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x8436) ($mux if_truex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x85) ($bitcast ($uint<64>) 0)))
xx_x4417 := ($mux if_falsex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x4418) ($mux if_truex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x85) ($bitcast ($uint<64>) 0)))
xx_x3612 := ($mux if_falsex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x3613) ($mux if_truex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x85) ($bitcast ($uint<64>) 0)))
xx_x288 := ($mux if_falsex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x289) ($mux if_truex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x85) ($bitcast ($uint<64>) 0)))
xx_x202 := ($mux if_falsex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x203) ($mux if_truex_x6_if_nextx_x6_taken ( $bitcast ($uint<64>) xx_x85) ($bitcast ($uint<64>) 0)))
xx_x91 := (xx_x9041 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
// compare instruction
xx_x17 := (xx_x91 < xx_x13 )
if_nextx_x6_forx_xfor_out_crit_edge_taken := ( ~xx_x17)
$while xx_x17
$if if_nextx_x6_forx_xfor_out_crit_edge_taken $then 
  $place [if_nextx_x6_forx_xfor_out_crit_edge]
$endif
//begin: basic-block forx_xfor_out_crit_edge
$merge if_nextx_x6_forx_xfor_out_crit_edge
$endmerge
$place [forx_xfor_out_crit_edge_for_out]
//begin: basic-block for_out
$merge forx_xfor_out_crit_edge_for_out vars_for_out
$endmerge
}
}
$module [inputLoader] 
 $in (ker_size : $uint<32> in_channels : $uint<32> groups : $uint<32> out_rows : $uint<32> out_cols : $uint<32> )
 $out ()
 $is 
{
$branchblock [body] {
//begin: basic-block vars
xx_x18 := (out_rows * out_cols)
xx_x20 := (xx_x18 * groups)
xx_x38 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) in_channels) )
xx_x85 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) groups) )
xx_x96 := (out_cols + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
xx_x97 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) xx_x96) )
xx_x116 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) out_cols) )
xx_x129 := (xx_x20 + ( $bitcast ($uint<32> ) _b11111111111111111111111111111111 ) )
xx_x130 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) xx_x129) )
// compare instruction
xx_x2844 := (( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  < xx_x20 )
$if xx_x2844 $then  $place [vars_for_bodyx_xlrx_xph] $else $place [vars_for_out] $endif 
//begin: basic-block for_bodyx_xlrx_xph
$merge vars_for_bodyx_xlrx_xph
$endmerge
$place [for_bodyx_xlrx_xph_for_body]
//begin: basic-block for_body
$merge for_bodyx_xlrx_xph_for_body if_nextx_x9_for_body
$phi xx_x13656 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<32>) xx_x137) $on if_nextx_x9_for_body 
$phi xx_x3055 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<64>) xx_x31) $on if_nextx_x9_for_body 
$phi xx_x8054 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<64>) xx_x356) $on if_nextx_x9_for_body 
$phi xx_x5053 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<64>) xx_x507) $on if_nextx_x9_for_body 
$phi xx_x10552 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<64>) xx_x5811) $on if_nextx_x9_for_body 
$phi xx_x6649 :=  ( $cast ($uint<1>) ( $bitcast ($uint<1> ) _b0 ) ) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<1>) xx_x6614) $on if_nextx_x9_for_body 
$phi xx_x8948 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<64>) xx_x8927) $on if_nextx_x9_for_body 
$phi xx_x942947 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<64>) xx_x9430) $on if_nextx_x9_for_body 
$phi xx_x1143446 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<64>) xx_x11435) $on if_nextx_x9_for_body 
$phi xx_x12045 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<64>) xx_x12038) $on if_nextx_x9_for_body 
$endmerge
xx_x31 := (xx_x3055 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
xx_x36 := (xx_x8054 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
xx_x37 := (xx_x36 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 ) )
// compare instruction
xx_x39x_xnot := ( ($bitcast ( $int<64>) xx_x37) >  ($bitcast ( $int<64>) xx_x38 ) )
$if xx_x39x_xnot $then  $place [for_body_if_false] $else $place [for_body_if_true] $endif 
//begin: basic-block if_true
$merge for_body_if_true
$endmerge
$place [if_true_if_next]
//begin: basic-block if_false
$merge for_body_if_false
$endmerge
xx_x80x_xtr := ($cast ($uint<32>) xx_x8054)
iNsTr_4 := (xx_x80x_xtr << ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
extractx_xt := (in_channels - iNsTr_4)
$place [if_false_if_next]
//begin: basic-block if_next
$merge if_false_if_next if_true_if_next
$phi xx_x53x_xoff0 :=  ( $cast ($uint<32>) extractx_xt) $on if_false_if_next ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000001000 ) ) $on if_true_if_next 
$endmerge
// compare instruction
xx_x51 := (xx_x5053 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  )
$if xx_x51 $then  $place [if_next_if_truex_x1] $else $place [if_next_if_falsex_x1] $endif 
//begin: basic-block if_truex_x1
$merge if_next_if_truex_x1
$endmerge
$call loadForward (xx_x53x_xoff0 ker_size )  ()
$place [if_truex_x1_if_nextx_x3]
//begin: basic-block if_falsex_x1
$merge if_next_if_falsex_x1
$endmerge
// compare instruction
xx_x59 := (xx_x10552 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 )  )
$if xx_x59 $then  $place [if_falsex_x1_if_truex_x2] $else $place [if_falsex_x1_if_falsex_x2] $endif 
//begin: basic-block if_truex_x2
$merge if_falsex_x1_if_truex_x2
$endmerge
$call loadBackward (xx_x53x_xoff0 ker_size )  ()
$place [if_truex_x2_if_nextx_x2]
//begin: basic-block if_falsex_x2
$merge if_falsex_x1_if_falsex_x2
$endmerge
$if xx_x6649 $then  $place [if_falsex_x2_if_truex_x3] $else $place [if_falsex_x2_if_falsex_x3] $endif 
//begin: basic-block if_truex_x3
$merge if_falsex_x2_if_truex_x3
$endmerge
$call loadNeutralLast (xx_x53x_xoff0 ker_size )  ()
$place [if_truex_x3_if_nextx_x1]
//begin: basic-block if_falsex_x3
$merge if_falsex_x2_if_falsex_x3
$endmerge
$call loadNeutral (xx_x53x_xoff0 ker_size )  ()
$place [if_falsex_x3_if_nextx_x1]
//begin: basic-block if_nextx_x1
$merge if_falsex_x3_if_nextx_x1 if_truex_x3_if_nextx_x1
$endmerge
$place [if_nextx_x1_if_nextx_x2]
//begin: basic-block if_nextx_x2
$merge if_nextx_x1_if_nextx_x2 if_truex_x2_if_nextx_x2
$phi xx_x6651 :=  ( $cast ($uint<1>) xx_x6649) $on if_nextx_x1_if_nextx_x2 ( $cast ($uint<1>) xx_x6649) $on if_truex_x2_if_nextx_x2 
$endmerge
$place [if_nextx_x2_if_nextx_x3]
//begin: basic-block if_nextx_x3
$merge if_nextx_x2_if_nextx_x3 if_truex_x1_if_nextx_x3
$phi xx_x6650 :=  ( $cast ($uint<1>) xx_x6651) $on if_nextx_x2_if_nextx_x3 ( $cast ($uint<1>) xx_x6649) $on if_truex_x1_if_nextx_x3 
$phi xx_x509 :=  ( $cast ($uint<64>) xx_x10552) $on if_nextx_x2_if_nextx_x3 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ) $on if_truex_x1_if_nextx_x3 
$endmerge
// compare instruction
xx_x86 := (xx_x36 == xx_x85 )
$if xx_x86 $then  $place [if_nextx_x3_if_truex_x4] $else $place [if_nextx_x3_if_falsex_x4] $endif 
//begin: basic-block if_truex_x4
$merge if_nextx_x3_if_truex_x4
$endmerge
xx_x90 := (xx_x8948 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
$place [if_truex_x4_if_nextx_x4]
//begin: basic-block if_falsex_x4
$merge if_nextx_x3_if_falsex_x4
$endmerge
$place [if_falsex_x4_if_nextx_x4]
//begin: basic-block if_nextx_x4
$merge if_falsex_x4_if_nextx_x4 if_truex_x4_if_nextx_x4
$phi xx_x114 :=  ( $cast ($uint<64>) xx_x1143446) $on if_falsex_x4_if_nextx_x4 ( $cast ($uint<64>) xx_x90) $on if_truex_x4_if_nextx_x4 
$phi xx_x94 :=  ( $cast ($uint<64>) xx_x942947) $on if_falsex_x4_if_nextx_x4 ( $cast ($uint<64>) xx_x90) $on if_truex_x4_if_nextx_x4 
$phi xx_x356 :=  ( $cast ($uint<64>) xx_x36) $on if_falsex_x4_if_nextx_x4 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on if_truex_x4_if_nextx_x4 
$endmerge
// compare instruction
xx_x98 := (xx_x94 == xx_x97 )
$if xx_x98 $then  $place [if_nextx_x4_if_truex_x5] $else $place [if_nextx_x4_if_falsex_x7] $endif 
//begin: basic-block if_truex_x5
$merge if_nextx_x4_if_truex_x5
$endmerge
// compare instruction
xx_x101 := (xx_x10552 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  )
$if xx_x101 $then  $place [if_truex_x5_if_truex_x6] $else $place [if_truex_x5_if_falsex_x5] $endif 
//begin: basic-block if_truex_x6
$merge if_truex_x5_if_truex_x6
$endmerge
$place [if_truex_x6_if_nextx_x6]
//begin: basic-block if_falsex_x5
$merge if_truex_x5_if_falsex_x5
$endmerge
// compare instruction
xx_x106 := (xx_x10552 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 )  )
$if xx_x106 $then  $place [if_falsex_x5_if_truex_x7] $else $place [if_falsex_x5_if_falsex_x6] $endif 
//begin: basic-block if_truex_x7
$merge if_falsex_x5_if_truex_x7
$endmerge
$place [if_truex_x7_if_nextx_x5]
//begin: basic-block if_falsex_x6
$merge if_falsex_x5_if_falsex_x6
$endmerge
$place [if_falsex_x6_if_nextx_x5]
//begin: basic-block if_nextx_x5
$merge if_falsex_x6_if_nextx_x5 if_truex_x7_if_nextx_x5
$phi xx_x12041 :=  ( $cast ($uint<64>) xx_x12045) $on if_falsex_x6_if_nextx_x5 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ) $on if_truex_x7_if_nextx_x5 
$endmerge
$place [if_nextx_x5_if_nextx_x6]
//begin: basic-block if_nextx_x6
$merge if_nextx_x5_if_nextx_x6 if_truex_x6_if_nextx_x6
$phi xx_x12040 :=  ( $cast ($uint<64>) xx_x12041) $on if_nextx_x5_if_nextx_x6 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ) $on if_truex_x6_if_nextx_x6 
$endmerge
$place [if_nextx_x6_if_nextx_x8]
//begin: basic-block if_falsex_x7
$merge if_nextx_x4_if_falsex_x7
$endmerge
// compare instruction
xx_x117 := (xx_x114 == xx_x116 )
$if xx_x117 $then  $place [if_falsex_x7_if_truex_x8] $else $place [if_falsex_x7_if_falsex_x8] $endif 
//begin: basic-block if_truex_x8
$merge if_falsex_x7_if_truex_x8
$endmerge
fetch_start := ( $bitcast ($uint<8> ) _b00000001 ) 
$place [if_truex_x8_if_nextx_x7]
//begin: basic-block if_falsex_x8
$merge if_falsex_x7_if_falsex_x8
$endmerge
$place [if_falsex_x8_if_nextx_x7]
//begin: basic-block if_nextx_x7
$merge if_falsex_x8_if_nextx_x7 if_truex_x8_if_nextx_x7
$phi xx_x12039 :=  ( $cast ($uint<64>) xx_x12045) $on if_falsex_x8_if_nextx_x7 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on if_truex_x8_if_nextx_x7 
$phi xx_x11436 :=  ( $cast ($uint<64>) xx_x114) $on if_falsex_x8_if_nextx_x7 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on if_truex_x8_if_nextx_x7 
$phi xx_x8928 :=  ( $cast ($uint<64>) xx_x114) $on if_falsex_x8_if_nextx_x7 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on if_truex_x8_if_nextx_x7 
$phi xx_x5812 :=  ( $cast ($uint<64>) xx_x10552) $on if_falsex_x8_if_nextx_x7 ( $cast ($uint<64>) xx_x12045) $on if_truex_x8_if_nextx_x7 
$phi xx_x508 :=  ( $cast ($uint<64>) xx_x509) $on if_falsex_x8_if_nextx_x7 ( $cast ($uint<64>) xx_x12045) $on if_truex_x8_if_nextx_x7 
$endmerge
$place [if_nextx_x7_if_nextx_x8]
//begin: basic-block if_nextx_x8
$merge if_nextx_x6_if_nextx_x8 if_nextx_x7_if_nextx_x8
$phi xx_x12038 :=  ( $cast ($uint<64>) xx_x12039) $on if_nextx_x7_if_nextx_x8 ( $cast ($uint<64>) xx_x12040) $on if_nextx_x6_if_nextx_x8 
$phi xx_x11435 :=  ( $cast ($uint<64>) xx_x11436) $on if_nextx_x7_if_nextx_x8 ( $cast ($uint<64>) xx_x114) $on if_nextx_x6_if_nextx_x8 
$phi xx_x9430 :=  ( $cast ($uint<64>) xx_x8928) $on if_nextx_x7_if_nextx_x8 ( $cast ($uint<64>) xx_x94) $on if_nextx_x6_if_nextx_x8 
$phi xx_x8927 :=  ( $cast ($uint<64>) xx_x8928) $on if_nextx_x7_if_nextx_x8 ( $cast ($uint<64>) xx_x94) $on if_nextx_x6_if_nextx_x8 
$phi xx_x5811 :=  ( $cast ($uint<64>) xx_x5812) $on if_nextx_x7_if_nextx_x8 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on if_nextx_x6_if_nextx_x8 
$phi xx_x507 :=  ( $cast ($uint<64>) xx_x508) $on if_nextx_x7_if_nextx_x8 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on if_nextx_x6_if_nextx_x8 
$endmerge
// compare instruction
xx_x131 := (xx_x31 == xx_x130 )
$if xx_x131 $then  $place [if_nextx_x8_if_truex_x9] $else $place [if_nextx_x8_if_falsex_x9] $endif 
//begin: basic-block if_truex_x9
$merge if_nextx_x8_if_truex_x9
$endmerge
$place [if_truex_x9_if_nextx_x9]
//begin: basic-block if_falsex_x9
$merge if_nextx_x8_if_falsex_x9
$endmerge
$place [if_falsex_x9_if_nextx_x9]
//begin: basic-block if_nextx_x9
$merge if_falsex_x9_if_nextx_x9 if_truex_x9_if_nextx_x9
$phi xx_x6614 :=  ( $cast ($uint<1>) xx_x6650) $on if_falsex_x9_if_nextx_x9 ( $cast ($uint<1>) ( $bitcast ($uint<1> ) _b1 ) ) $on if_truex_x9_if_nextx_x9 
$endmerge
xx_x137 := (xx_x13656 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
// compare instruction
xx_x28 := (xx_x137 < xx_x20 )
$if xx_x28 $then  $place [if_nextx_x9_for_body] $else $place [if_nextx_x9_forx_xfor_out_crit_edge] $endif 
//begin: basic-block forx_xfor_out_crit_edge
$merge if_nextx_x9_forx_xfor_out_crit_edge
$endmerge
$place [forx_xfor_out_crit_edge_for_out]
//begin: basic-block for_out
$merge forx_xfor_out_crit_edge_for_out vars_for_out
$endmerge
}
}
$module [kernelLoader] 
 $in (num_iterations : $uint<32> stopCond : $uint<32> )
 $out ()
 $is 
{
$branchblock [body] {
//begin: basic-block vars
xx_x32 := (num_iterations - stopCond)
xx_x33 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) xx_x32) )
// compare instruction
xx_x125 := (( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  < num_iterations )
$if xx_x125 $then  $place [vars_for_bodyx_xlrx_xph] $else $place [vars_for_out] $endif 
//begin: basic-block for_bodyx_xlrx_xph
$merge vars_for_bodyx_xlrx_xph
$endmerge
$place [for_bodyx_xlrx_xph_for_body]
//begin: basic-block for_body
//   this is a do-while loop.
$merge for_bodyx_xlrx_xph_for_body
$endmerge
$dopipeline $depth 31 $buffering 7 
$fullrate
$merge $entry $loopback
$phi xx_x398 :=  ( $cast ($uint<32>) xx_x40) $on $loopback ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on $entry
$phi xx_x157 :=  ( $cast ($uint<64>) xx_x16) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x206 :=  ( $cast ($uint<1>) xx_x203) $on $loopback ( $cast ($uint<1>) ( $bitcast ($uint<1> ) _b0 ) ) $on $entry
$endmerge
xx_x16 := (xx_x157 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
xx_x18 := ($bitcast ($float<8,23> ) ker_data ) 
for_body_if_false_taken := xx_x206
for_body_if_true_taken := ( ~xx_x206)
if_true_exec_guard := for_body_if_true_taken
//begin: basic-block if_true
$guard (if_true_exec_guard) ker_data := ($bitcast ( $uint<64> ) xx_x18 )
if_true_if_next_taken := if_true_exec_guard
if_false_exec_guard := for_body_if_false_taken
//begin: basic-block if_false
if_false_if_next_taken := if_false_exec_guard
if_next_exec_guard := (if_false_if_next_taken | if_true_if_next_taken )
//begin: basic-block if_next
$guard (if_next_exec_guard) conv_ker_data := xx_x18
// compare instruction
$guard (if_next_exec_guard) xx_x34 := (xx_x16 == xx_x33 )
if_next_if_truex_x1_taken := (if_next_exec_guard & xx_x34)
if_next_if_falsex_x1_taken := (if_next_exec_guard & (~xx_x34))
if_falsex_x1_exec_guard := if_next_if_falsex_x1_taken
//begin: basic-block if_falsex_x1
if_falsex_x1_if_nextx_x1_taken := if_falsex_x1_exec_guard
if_truex_x1_exec_guard := if_next_if_truex_x1_taken
//begin: basic-block if_truex_x1
if_truex_x1_if_nextx_x1_taken := if_truex_x1_exec_guard
//begin: basic-block if_nextx_x1
xx_x203 := ($mux if_falsex_x1_if_nextx_x1_taken ( $bitcast ($uint<1>) xx_x206) ($mux if_truex_x1_if_nextx_x1_taken ( $bitcast ($uint<1>) ( $bitcast ($uint<1> ) _b1 ) ) ($bitcast ($uint<1>) 0)))
xx_x40 := (xx_x398 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
// compare instruction
xx_x12 := (xx_x40 < num_iterations )
if_nextx_x1_forx_xfor_out_crit_edge_taken := ( ~xx_x12)
$while xx_x12
$if if_nextx_x1_forx_xfor_out_crit_edge_taken $then 
  $place [if_nextx_x1_forx_xfor_out_crit_edge]
$endif
//begin: basic-block forx_xfor_out_crit_edge
$merge if_nextx_x1_forx_xfor_out_crit_edge
$endmerge
$place [forx_xfor_out_crit_edge_for_out]
//begin: basic-block for_out
$merge forx_xfor_out_crit_edge_for_out vars_for_out
$endmerge
}
}
$module [fetchInputLinear] 
 $in (base_addr : $uint<32> groups : $uint<32> in_channels : $uint<32> inp_scale : $float<8,23> inp_zero_point : $float<8,23> )
 $out ()
 $is 
{
$branchblock [body] {
//begin: basic-block vars
// compare instruction
xx_x1654 := (( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  < groups )
$if xx_x1654 $then  $place [vars_for_bodyx_xlrx_xph] $else $place [vars_for_outx_x1] $endif 
//begin: basic-block for_bodyx_xlrx_xph
$merge vars_for_bodyx_xlrx_xph
$endmerge
$place [for_bodyx_xlrx_xph_for_body]
//begin: basic-block for_body
$merge for_bodyx_xlrx_xph_for_body for_out_for_body
$phi xx_x11056 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<32>) xx_x24) $on for_out_for_body 
$phi xx_x984155 :=  ( $cast ($uint<8>) ( $bitcast ($uint<8> ) _b0 ) ) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<8>) xx_x9849x_xlcssa) $on for_out_for_body 
$endmerge
xx_x19 := (xx_x11056 << ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
$call readModule_convolution (base_addr xx_x19 )  (xx_x20)
xx_x24 := (xx_x11056 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
xx_x25 := (xx_x24 << ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
// compare instruction
xx_x26x_xnot := ( ($bitcast ( $int<32>) xx_x25) >  ($bitcast ( $int<32>) in_channels ) )
$if xx_x26x_xnot $then  $place [for_body_if_false] $else $place [for_body_if_true] $endif 
//begin: basic-block if_true
$merge for_body_if_true
$endmerge
$place [if_true_if_next]
//begin: basic-block if_false
$merge for_body_if_false
$endmerge
xx_x32 := (in_channels - xx_x19)
xx_x33 := ($cast ($uint<64>) xx_x32)
$place [if_false_if_next]
//begin: basic-block if_next
$merge if_false_if_next if_true_if_next
$phi xx_x36 :=  ( $cast ($uint<64>) xx_x33) $on if_false_if_next ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) ) $on if_true_if_next 
$endmerge
// compare instruction
xx_x4051 := (( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  < xx_x36 )
$if xx_x4051 $then  $place [if_next_for_bodyx_x1x_xlrx_xph] $else $place [if_next_for_out] $endif 
//begin: basic-block for_bodyx_x1x_xlrx_xph
$merge if_next_for_bodyx_x1x_xlrx_xph
$endmerge
$place [for_bodyx_x1x_xlrx_xph_for_bodyx_x1]
//begin: basic-block for_bodyx_x1
$merge for_bodyx_x1x_xlrx_xph_for_bodyx_x1 if_nextx_x8_for_bodyx_x1
$phi xx_x10653 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on for_bodyx_x1x_xlrx_xph_for_bodyx_x1 ( $cast ($uint<64>) xx_x107) $on if_nextx_x8_for_bodyx_x1 
$phi xx_x984952 :=  ( $cast ($uint<8>) xx_x984155) $on for_bodyx_x1x_xlrx_xph_for_bodyx_x1 ( $cast ($uint<8>) xx_x98) $on if_nextx_x8_for_bodyx_x1 
$endmerge
// compare instruction
xx_x42 := (xx_x10653 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
$if xx_x42 $then  $place [for_bodyx_x1_if_truex_x1] $else $place [for_bodyx_x1_if_falsex_x1] $endif 
//begin: basic-block if_truex_x1
$merge for_bodyx_x1_if_truex_x1
$endmerge
xx_x45 := ($slice xx_x20 63 56)
$place [if_truex_x1_if_nextx_x8]
//begin: basic-block if_falsex_x1
$merge for_bodyx_x1_if_falsex_x1
$endmerge
// compare instruction
xx_x48 := (xx_x10653 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  )
$if xx_x48 $then  $place [if_falsex_x1_if_truex_x2] $else $place [if_falsex_x1_if_falsex_x2] $endif 
//begin: basic-block if_truex_x2
$merge if_falsex_x1_if_truex_x2
$endmerge
xx_x51 := ($slice xx_x20 55 48)
$place [if_truex_x2_if_nextx_x7]
//begin: basic-block if_falsex_x2
$merge if_falsex_x1_if_falsex_x2
$endmerge
// compare instruction
xx_x54 := (xx_x10653 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 )  )
$if xx_x54 $then  $place [if_falsex_x2_if_truex_x3] $else $place [if_falsex_x2_if_falsex_x3] $endif 
//begin: basic-block if_truex_x3
$merge if_falsex_x2_if_truex_x3
$endmerge
xx_x57 := ($slice xx_x20 47 40)
$place [if_truex_x3_if_nextx_x6]
//begin: basic-block if_falsex_x3
$merge if_falsex_x2_if_falsex_x3
$endmerge
// compare instruction
xx_x60 := (xx_x10653 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 )  )
$if xx_x60 $then  $place [if_falsex_x3_if_truex_x4] $else $place [if_falsex_x3_if_falsex_x4] $endif 
//begin: basic-block if_truex_x4
$merge if_falsex_x3_if_truex_x4
$endmerge
xx_x63 := ($slice xx_x20 39 32)
$place [if_truex_x4_if_nextx_x5]
//begin: basic-block if_falsex_x4
$merge if_falsex_x3_if_falsex_x4
$endmerge
// compare instruction
xx_x66 := (xx_x10653 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000100 )  )
$if xx_x66 $then  $place [if_falsex_x4_if_truex_x5] $else $place [if_falsex_x4_if_falsex_x5] $endif 
//begin: basic-block if_truex_x5
$merge if_falsex_x4_if_truex_x5
$endmerge
xx_x69 := ($slice xx_x20 31 24)
$place [if_truex_x5_if_nextx_x4]
//begin: basic-block if_falsex_x5
$merge if_falsex_x4_if_falsex_x5
$endmerge
// compare instruction
xx_x72 := (xx_x10653 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000101 )  )
$if xx_x72 $then  $place [if_falsex_x5_if_truex_x6] $else $place [if_falsex_x5_if_falsex_x6] $endif 
//begin: basic-block if_truex_x6
$merge if_falsex_x5_if_truex_x6
$endmerge
xx_x75 := ($slice xx_x20 23 16)
$place [if_truex_x6_if_nextx_x3]
//begin: basic-block if_falsex_x6
$merge if_falsex_x5_if_falsex_x6
$endmerge
// compare instruction
xx_x78 := (xx_x10653 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000110 )  )
$if xx_x78 $then  $place [if_falsex_x6_if_truex_x7] $else $place [if_falsex_x6_if_falsex_x7] $endif 
//begin: basic-block if_truex_x7
$merge if_falsex_x6_if_truex_x7
$endmerge
xx_x81 := ($slice xx_x20 15 8)
$place [if_truex_x7_if_nextx_x2]
//begin: basic-block if_falsex_x7
$merge if_falsex_x6_if_falsex_x7
$endmerge
// compare instruction
xx_x84 := (xx_x10653 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000111 )  )
$if xx_x84 $then  $place [if_falsex_x7_if_truex_x8] $else $place [if_falsex_x7_if_falsex_x8] $endif 
//begin: basic-block if_truex_x8
$merge if_falsex_x7_if_truex_x8
$endmerge
xx_x87 := ($slice xx_x20 7 0)
$place [if_truex_x8_if_nextx_x1]
//begin: basic-block if_falsex_x8
$merge if_falsex_x7_if_falsex_x8
$endmerge
$place [if_falsex_x8_if_nextx_x1]
//begin: basic-block if_nextx_x1
$merge if_falsex_x8_if_nextx_x1 if_truex_x8_if_nextx_x1
$phi xx_x9848 :=  ( $cast ($uint<8>) xx_x984952) $on if_falsex_x8_if_nextx_x1 ( $cast ($uint<8>) xx_x87) $on if_truex_x8_if_nextx_x1 
$endmerge
$place [if_nextx_x1_if_nextx_x2]
//begin: basic-block if_nextx_x2
$merge if_nextx_x1_if_nextx_x2 if_truex_x7_if_nextx_x2
$phi xx_x9847 :=  ( $cast ($uint<8>) xx_x9848) $on if_nextx_x1_if_nextx_x2 ( $cast ($uint<8>) xx_x81) $on if_truex_x7_if_nextx_x2 
$endmerge
$place [if_nextx_x2_if_nextx_x3]
//begin: basic-block if_nextx_x3
$merge if_nextx_x2_if_nextx_x3 if_truex_x6_if_nextx_x3
$phi xx_x9846 :=  ( $cast ($uint<8>) xx_x9847) $on if_nextx_x2_if_nextx_x3 ( $cast ($uint<8>) xx_x75) $on if_truex_x6_if_nextx_x3 
$endmerge
$place [if_nextx_x3_if_nextx_x4]
//begin: basic-block if_nextx_x4
$merge if_nextx_x3_if_nextx_x4 if_truex_x5_if_nextx_x4
$phi xx_x9845 :=  ( $cast ($uint<8>) xx_x9846) $on if_nextx_x3_if_nextx_x4 ( $cast ($uint<8>) xx_x69) $on if_truex_x5_if_nextx_x4 
$endmerge
$place [if_nextx_x4_if_nextx_x5]
//begin: basic-block if_nextx_x5
$merge if_nextx_x4_if_nextx_x5 if_truex_x4_if_nextx_x5
$phi xx_x9844 :=  ( $cast ($uint<8>) xx_x9845) $on if_nextx_x4_if_nextx_x5 ( $cast ($uint<8>) xx_x63) $on if_truex_x4_if_nextx_x5 
$endmerge
$place [if_nextx_x5_if_nextx_x6]
//begin: basic-block if_nextx_x6
$merge if_nextx_x5_if_nextx_x6 if_truex_x3_if_nextx_x6
$phi xx_x9843 :=  ( $cast ($uint<8>) xx_x9844) $on if_nextx_x5_if_nextx_x6 ( $cast ($uint<8>) xx_x57) $on if_truex_x3_if_nextx_x6 
$endmerge
$place [if_nextx_x6_if_nextx_x7]
//begin: basic-block if_nextx_x7
$merge if_nextx_x6_if_nextx_x7 if_truex_x2_if_nextx_x7
$phi xx_x9842 :=  ( $cast ($uint<8>) xx_x9843) $on if_nextx_x6_if_nextx_x7 ( $cast ($uint<8>) xx_x51) $on if_truex_x2_if_nextx_x7 
$endmerge
$place [if_nextx_x7_if_nextx_x8]
//begin: basic-block if_nextx_x8
$merge if_nextx_x7_if_nextx_x8 if_truex_x1_if_nextx_x8
$phi xx_x98 :=  ( $cast ($uint<8>) xx_x9842) $on if_nextx_x7_if_nextx_x8 ( $cast ($uint<8>) xx_x45) $on if_truex_x1_if_nextx_x8 
$endmerge
$call dequant_inp (xx_x98 inp_scale inp_zero_point )  (xx_x101)
xx_x104 := ( $bitcast ($uint<32> ) ( $cast ( $int< 32 > ) xx_x101) )
in_data_0 := ($bitcast ( $float<8,23> ) xx_x104 )
xx_x107 := (xx_x10653 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
// compare instruction
xx_x40 := (xx_x107 < xx_x36 )
$if xx_x40 $then  $place [if_nextx_x8_for_bodyx_x1] $else $place [if_nextx_x8_forx_x1x_xfor_out_crit_edge] $endif 
//begin: basic-block forx_x1x_xfor_out_crit_edge
$merge if_nextx_x8_forx_x1x_xfor_out_crit_edge
$phi split :=  ( $cast ($uint<8>) xx_x98) $on if_nextx_x8_forx_x1x_xfor_out_crit_edge 
$endmerge
$place [forx_x1x_xfor_out_crit_edge_for_out]
//begin: basic-block for_out
$merge forx_x1x_xfor_out_crit_edge_for_out if_next_for_out
$phi xx_x9849x_xlcssa :=  ( $cast ($uint<8>) split) $on forx_x1x_xfor_out_crit_edge_for_out ( $cast ($uint<8>) xx_x984155) $on if_next_for_out 
$endmerge
// compare instruction
xx_x16 := (xx_x24 < groups )
$if xx_x16 $then  $place [for_out_for_body] $else $place [for_out_forx_xfor_outx_x1_crit_edge] $endif 
//begin: basic-block forx_xfor_outx_x1_crit_edge
$merge for_out_forx_xfor_outx_x1_crit_edge
$endmerge
$place [forx_xfor_outx_x1_crit_edge_for_outx_x1]
//begin: basic-block for_outx_x1
$merge forx_xfor_outx_x1_crit_edge_for_outx_x1 vars_for_outx_x1
$endmerge
}
}
$module [fetchKernelLinear] 
 $in (base_addr : $uint<32> groups : $uint<32> chn_no : $uint<32> in_channels : $uint<32> ker_scale : $float<8,23> ker_zero_point : $float<8,23> )
 $out ()
 $is 
{
$branchblock [body] {
//begin: basic-block vars
xx_x24 := (groups * chn_no)
xx_x25 := (xx_x24 << ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
// compare instruction
xx_x1854 := (( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  < groups )
$if xx_x1854 $then  $place [vars_for_bodyx_xlrx_xph] $else $place [vars_for_outx_x1] $endif 
//begin: basic-block for_bodyx_xlrx_xph
$merge vars_for_bodyx_xlrx_xph
$endmerge
$place [for_bodyx_xlrx_xph_for_body]
//begin: basic-block for_body
$merge for_bodyx_xlrx_xph_for_body for_out_for_body
$phi xx_x11756 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<32>) xx_x31) $on for_out_for_body 
$phi xx_x1054155 :=  ( $cast ($uint<8>) ( $bitcast ($uint<8> ) _b0 ) ) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<8>) xx_x10549x_xlcssa) $on for_out_for_body 
$endmerge
xx_x21 := (xx_x11756 << ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
xx_x26 := (xx_x21 + xx_x25)
$call readModule_convolution (base_addr xx_x26 )  (xx_x27)
xx_x31 := (xx_x11756 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
xx_x32 := (xx_x31 << ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
// compare instruction
xx_x33x_xnot := ( ($bitcast ( $int<32>) xx_x32) >  ($bitcast ( $int<32>) in_channels ) )
$if xx_x33x_xnot $then  $place [for_body_if_false] $else $place [for_body_if_true] $endif 
//begin: basic-block if_true
$merge for_body_if_true
$endmerge
$place [if_true_if_next]
//begin: basic-block if_false
$merge for_body_if_false
$endmerge
xx_x39 := (in_channels - xx_x21)
xx_x40 := ($cast ($uint<64>) xx_x39)
$place [if_false_if_next]
//begin: basic-block if_next
$merge if_false_if_next if_true_if_next
$phi xx_x43 :=  ( $cast ($uint<64>) xx_x40) $on if_false_if_next ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) ) $on if_true_if_next 
$endmerge
// compare instruction
xx_x4751 := (( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  < xx_x43 )
$if xx_x4751 $then  $place [if_next_for_bodyx_x1x_xlrx_xph] $else $place [if_next_for_out] $endif 
//begin: basic-block for_bodyx_x1x_xlrx_xph
$merge if_next_for_bodyx_x1x_xlrx_xph
$endmerge
$place [for_bodyx_x1x_xlrx_xph_for_bodyx_x1]
//begin: basic-block for_bodyx_x1
$merge for_bodyx_x1x_xlrx_xph_for_bodyx_x1 if_nextx_x8_for_bodyx_x1
$phi xx_x11353 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on for_bodyx_x1x_xlrx_xph_for_bodyx_x1 ( $cast ($uint<64>) xx_x114) $on if_nextx_x8_for_bodyx_x1 
$phi xx_x1054952 :=  ( $cast ($uint<8>) xx_x1054155) $on for_bodyx_x1x_xlrx_xph_for_bodyx_x1 ( $cast ($uint<8>) xx_x105) $on if_nextx_x8_for_bodyx_x1 
$endmerge
// compare instruction
xx_x49 := (xx_x11353 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
$if xx_x49 $then  $place [for_bodyx_x1_if_truex_x1] $else $place [for_bodyx_x1_if_falsex_x1] $endif 
//begin: basic-block if_truex_x1
$merge for_bodyx_x1_if_truex_x1
$endmerge
xx_x52 := ($slice xx_x27 63 56)
$place [if_truex_x1_if_nextx_x8]
//begin: basic-block if_falsex_x1
$merge for_bodyx_x1_if_falsex_x1
$endmerge
// compare instruction
xx_x55 := (xx_x11353 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  )
$if xx_x55 $then  $place [if_falsex_x1_if_truex_x2] $else $place [if_falsex_x1_if_falsex_x2] $endif 
//begin: basic-block if_truex_x2
$merge if_falsex_x1_if_truex_x2
$endmerge
xx_x58 := ($slice xx_x27 55 48)
$place [if_truex_x2_if_nextx_x7]
//begin: basic-block if_falsex_x2
$merge if_falsex_x1_if_falsex_x2
$endmerge
// compare instruction
xx_x61 := (xx_x11353 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 )  )
$if xx_x61 $then  $place [if_falsex_x2_if_truex_x3] $else $place [if_falsex_x2_if_falsex_x3] $endif 
//begin: basic-block if_truex_x3
$merge if_falsex_x2_if_truex_x3
$endmerge
xx_x64 := ($slice xx_x27 47 40)
$place [if_truex_x3_if_nextx_x6]
//begin: basic-block if_falsex_x3
$merge if_falsex_x2_if_falsex_x3
$endmerge
// compare instruction
xx_x67 := (xx_x11353 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 )  )
$if xx_x67 $then  $place [if_falsex_x3_if_truex_x4] $else $place [if_falsex_x3_if_falsex_x4] $endif 
//begin: basic-block if_truex_x4
$merge if_falsex_x3_if_truex_x4
$endmerge
xx_x70 := ($slice xx_x27 39 32)
$place [if_truex_x4_if_nextx_x5]
//begin: basic-block if_falsex_x4
$merge if_falsex_x3_if_falsex_x4
$endmerge
// compare instruction
xx_x73 := (xx_x11353 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000100 )  )
$if xx_x73 $then  $place [if_falsex_x4_if_truex_x5] $else $place [if_falsex_x4_if_falsex_x5] $endif 
//begin: basic-block if_truex_x5
$merge if_falsex_x4_if_truex_x5
$endmerge
xx_x76 := ($slice xx_x27 31 24)
$place [if_truex_x5_if_nextx_x4]
//begin: basic-block if_falsex_x5
$merge if_falsex_x4_if_falsex_x5
$endmerge
// compare instruction
xx_x79 := (xx_x11353 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000101 )  )
$if xx_x79 $then  $place [if_falsex_x5_if_truex_x6] $else $place [if_falsex_x5_if_falsex_x6] $endif 
//begin: basic-block if_truex_x6
$merge if_falsex_x5_if_truex_x6
$endmerge
xx_x82 := ($slice xx_x27 23 16)
$place [if_truex_x6_if_nextx_x3]
//begin: basic-block if_falsex_x6
$merge if_falsex_x5_if_falsex_x6
$endmerge
// compare instruction
xx_x85 := (xx_x11353 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000110 )  )
$if xx_x85 $then  $place [if_falsex_x6_if_truex_x7] $else $place [if_falsex_x6_if_falsex_x7] $endif 
//begin: basic-block if_truex_x7
$merge if_falsex_x6_if_truex_x7
$endmerge
xx_x88 := ($slice xx_x27 15 8)
$place [if_truex_x7_if_nextx_x2]
//begin: basic-block if_falsex_x7
$merge if_falsex_x6_if_falsex_x7
$endmerge
// compare instruction
xx_x91 := (xx_x11353 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000111 )  )
$if xx_x91 $then  $place [if_falsex_x7_if_truex_x8] $else $place [if_falsex_x7_if_falsex_x8] $endif 
//begin: basic-block if_truex_x8
$merge if_falsex_x7_if_truex_x8
$endmerge
xx_x94 := ($slice xx_x27 7 0)
$place [if_truex_x8_if_nextx_x1]
//begin: basic-block if_falsex_x8
$merge if_falsex_x7_if_falsex_x8
$endmerge
$place [if_falsex_x8_if_nextx_x1]
//begin: basic-block if_nextx_x1
$merge if_falsex_x8_if_nextx_x1 if_truex_x8_if_nextx_x1
$phi xx_x10548 :=  ( $cast ($uint<8>) xx_x1054952) $on if_falsex_x8_if_nextx_x1 ( $cast ($uint<8>) xx_x94) $on if_truex_x8_if_nextx_x1 
$endmerge
$place [if_nextx_x1_if_nextx_x2]
//begin: basic-block if_nextx_x2
$merge if_nextx_x1_if_nextx_x2 if_truex_x7_if_nextx_x2
$phi xx_x10547 :=  ( $cast ($uint<8>) xx_x10548) $on if_nextx_x1_if_nextx_x2 ( $cast ($uint<8>) xx_x88) $on if_truex_x7_if_nextx_x2 
$endmerge
$place [if_nextx_x2_if_nextx_x3]
//begin: basic-block if_nextx_x3
$merge if_nextx_x2_if_nextx_x3 if_truex_x6_if_nextx_x3
$phi xx_x10546 :=  ( $cast ($uint<8>) xx_x10547) $on if_nextx_x2_if_nextx_x3 ( $cast ($uint<8>) xx_x82) $on if_truex_x6_if_nextx_x3 
$endmerge
$place [if_nextx_x3_if_nextx_x4]
//begin: basic-block if_nextx_x4
$merge if_nextx_x3_if_nextx_x4 if_truex_x5_if_nextx_x4
$phi xx_x10545 :=  ( $cast ($uint<8>) xx_x10546) $on if_nextx_x3_if_nextx_x4 ( $cast ($uint<8>) xx_x76) $on if_truex_x5_if_nextx_x4 
$endmerge
$place [if_nextx_x4_if_nextx_x5]
//begin: basic-block if_nextx_x5
$merge if_nextx_x4_if_nextx_x5 if_truex_x4_if_nextx_x5
$phi xx_x10544 :=  ( $cast ($uint<8>) xx_x10545) $on if_nextx_x4_if_nextx_x5 ( $cast ($uint<8>) xx_x70) $on if_truex_x4_if_nextx_x5 
$endmerge
$place [if_nextx_x5_if_nextx_x6]
//begin: basic-block if_nextx_x6
$merge if_nextx_x5_if_nextx_x6 if_truex_x3_if_nextx_x6
$phi xx_x10543 :=  ( $cast ($uint<8>) xx_x10544) $on if_nextx_x5_if_nextx_x6 ( $cast ($uint<8>) xx_x64) $on if_truex_x3_if_nextx_x6 
$endmerge
$place [if_nextx_x6_if_nextx_x7]
//begin: basic-block if_nextx_x7
$merge if_nextx_x6_if_nextx_x7 if_truex_x2_if_nextx_x7
$phi xx_x10542 :=  ( $cast ($uint<8>) xx_x10543) $on if_nextx_x6_if_nextx_x7 ( $cast ($uint<8>) xx_x58) $on if_truex_x2_if_nextx_x7 
$endmerge
$place [if_nextx_x7_if_nextx_x8]
//begin: basic-block if_nextx_x8
$merge if_nextx_x7_if_nextx_x8 if_truex_x1_if_nextx_x8
$phi xx_x105 :=  ( $cast ($uint<8>) xx_x10542) $on if_nextx_x7_if_nextx_x8 ( $cast ($uint<8>) xx_x52) $on if_truex_x1_if_nextx_x8 
$endmerge
$call dequant_ker (xx_x105 ker_scale ker_zero_point )  (xx_x108)
xx_x111 := ( $bitcast ($uint<32> ) ( $cast ( $int< 32 > ) xx_x108) )
conv_ker_data := ($bitcast ( $float<8,23> ) xx_x111 )
xx_x114 := (xx_x11353 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
// compare instruction
xx_x47 := (xx_x114 < xx_x43 )
$if xx_x47 $then  $place [if_nextx_x8_for_bodyx_x1] $else $place [if_nextx_x8_forx_x1x_xfor_out_crit_edge] $endif 
//begin: basic-block forx_x1x_xfor_out_crit_edge
$merge if_nextx_x8_forx_x1x_xfor_out_crit_edge
$phi split :=  ( $cast ($uint<8>) xx_x105) $on if_nextx_x8_forx_x1x_xfor_out_crit_edge 
$endmerge
$place [forx_x1x_xfor_out_crit_edge_for_out]
//begin: basic-block for_out
$merge forx_x1x_xfor_out_crit_edge_for_out if_next_for_out
$phi xx_x10549x_xlcssa :=  ( $cast ($uint<8>) split) $on forx_x1x_xfor_out_crit_edge_for_out ( $cast ($uint<8>) xx_x1054155) $on if_next_for_out 
$endmerge
// compare instruction
xx_x18 := (xx_x31 < groups )
$if xx_x18 $then  $place [for_out_for_body] $else $place [for_out_forx_xfor_outx_x1_crit_edge] $endif 
//begin: basic-block forx_xfor_outx_x1_crit_edge
$merge for_out_forx_xfor_outx_x1_crit_edge
$endmerge
$place [forx_xfor_outx_x1_crit_edge_for_outx_x1]
//begin: basic-block for_outx_x1
$merge forx_xfor_outx_x1_crit_edge_for_outx_x1 vars_for_outx_x1
$endmerge
}
}
$module [inputLoaderLinear] 
 $in (num_iterations : $uint<32> stopCond : $uint<32> )
 $out ()
 $is 
{
$branchblock [body] {
//begin: basic-block vars
xx_x32 := (num_iterations - stopCond)
xx_x33 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) xx_x32) )
// compare instruction
xx_x125 := (( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  < num_iterations )
$if xx_x125 $then  $place [vars_for_bodyx_xlrx_xph] $else $place [vars_for_out] $endif 
//begin: basic-block for_bodyx_xlrx_xph
$merge vars_for_bodyx_xlrx_xph
$endmerge
$place [for_bodyx_xlrx_xph_for_body]
//begin: basic-block for_body
//   this is a do-while loop.
$merge for_bodyx_xlrx_xph_for_body
$endmerge
$dopipeline $depth 31 $buffering 7 
$fullrate
$merge $entry $loopback
$phi xx_x398 :=  ( $cast ($uint<32>) xx_x40) $on $loopback ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on $entry
$phi xx_x157 :=  ( $cast ($uint<64>) xx_x16) $on $loopback ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on $entry
$phi xx_x206 :=  ( $cast ($uint<1>) xx_x203) $on $loopback ( $cast ($uint<1>) ( $bitcast ($uint<1> ) _b0 ) ) $on $entry
$endmerge
xx_x16 := (xx_x157 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
xx_x18 := in_data_0
for_body_if_false_taken := xx_x206
for_body_if_true_taken := ( ~xx_x206)
if_true_exec_guard := for_body_if_true_taken
//begin: basic-block if_true
$guard (if_true_exec_guard) in_data_0 := xx_x18
if_true_if_next_taken := if_true_exec_guard
if_false_exec_guard := for_body_if_false_taken
//begin: basic-block if_false
if_false_if_next_taken := if_false_exec_guard
if_next_exec_guard := (if_false_if_next_taken | if_true_if_next_taken )
//begin: basic-block if_next
$guard (if_next_exec_guard) conv_input_data := xx_x18
// compare instruction
$guard (if_next_exec_guard) xx_x34 := (xx_x16 == xx_x33 )
if_next_if_truex_x1_taken := (if_next_exec_guard & xx_x34)
if_next_if_falsex_x1_taken := (if_next_exec_guard & (~xx_x34))
if_falsex_x1_exec_guard := if_next_if_falsex_x1_taken
//begin: basic-block if_falsex_x1
if_falsex_x1_if_nextx_x1_taken := if_falsex_x1_exec_guard
if_truex_x1_exec_guard := if_next_if_truex_x1_taken
//begin: basic-block if_truex_x1
if_truex_x1_if_nextx_x1_taken := if_truex_x1_exec_guard
//begin: basic-block if_nextx_x1
xx_x203 := ($mux if_falsex_x1_if_nextx_x1_taken ( $bitcast ($uint<1>) xx_x206) ($mux if_truex_x1_if_nextx_x1_taken ( $bitcast ($uint<1>) ( $bitcast ($uint<1> ) _b1 ) ) ($bitcast ($uint<1>) 0)))
xx_x40 := (xx_x398 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
// compare instruction
xx_x12 := (xx_x40 < num_iterations )
if_nextx_x1_forx_xfor_out_crit_edge_taken := ( ~xx_x12)
$while xx_x12
$if if_nextx_x1_forx_xfor_out_crit_edge_taken $then 
  $place [if_nextx_x1_forx_xfor_out_crit_edge]
$endif
//begin: basic-block forx_xfor_out_crit_edge
$merge if_nextx_x1_forx_xfor_out_crit_edge
$endmerge
$place [forx_xfor_out_crit_edge_for_out]
//begin: basic-block for_out
$merge forx_xfor_out_crit_edge_for_out vars_for_out
$endmerge
}
}
$module [kernelLoaderLinear] 
 $in (ker_start_addr : $uint<32> groups : $uint<32> in_channels : $uint<32> out_channels : $uint<32> ker_scale : $float<8,23> ker_zero_point : $float<8,23> )
 $out ()
 $is 
{
$branchblock [body] {
//begin: basic-block vars
// compare instruction
xx_x182 := (( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  < out_channels )
$if xx_x182 $then  $place [vars_for_bodyx_xlrx_xph] $else $place [vars_for_out] $endif 
//begin: basic-block for_bodyx_xlrx_xph
$merge vars_for_bodyx_xlrx_xph
$endmerge
$place [for_bodyx_xlrx_xph_for_body]
//begin: basic-block for_body
$merge for_body_for_body for_bodyx_xlrx_xph_for_body
$phi xx_x263 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<32>) xx_x27) $on for_body_for_body 
$endmerge
$call fetchKernelLinear (ker_start_addr groups xx_x263 in_channels ker_scale ker_zero_point )  ()
xx_x27 := (xx_x263 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
// compare instruction
xx_x18 := (xx_x27 < out_channels )
$if xx_x18 $then  $place [for_body_for_body] $else $place [for_body_forx_xfor_out_crit_edge] $endif 
//begin: basic-block forx_xfor_out_crit_edge
$merge for_body_forx_xfor_out_crit_edge
$endmerge
$place [forx_xfor_out_crit_edge_for_out]
//begin: basic-block for_out
$merge forx_xfor_out_crit_edge_for_out vars_for_out
$endmerge
}
}
$module [pooling] 
 $in (pool_cols : $uint<32> )
 $out ()
 $is 
{
$branchblock [body] {
//begin: basic-block vars
// compare instruction
xx_x86 := (( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  < pool_cols )
$if xx_x86 $then  $place [vars_for_bodyx_xlrx_xph] $else $place [vars_for_out] $endif 
//begin: basic-block for_bodyx_xlrx_xph
$merge vars_for_bodyx_xlrx_xph
$endmerge
$place [for_bodyx_xlrx_xph_for_body]
//begin: basic-block for_body
$merge for_bodyx_xlrx_xph_for_body if_nextx_x2_for_body
$phi xx_x707 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<32>) xx_x71) $on if_nextx_x2_for_body 
$endmerge
xx_x10 := pool_data_fifo_r0
xx_x12 := pool_data_fifo_r0
xx_x14 := pool_data_lifo_r1
xx_x16 := pool_data_lifo_r1
// compare instruction
xx_x20 := ( ($bitcast ( $int<8>) xx_x10) >=   ($bitcast ( $int<8>) xx_x12 ) )
// compare instruction
xx_x23 := ( ($bitcast ( $int<8>) xx_x10) >=   ($bitcast ( $int<8>) xx_x14 ) )
// compare instruction
xx_x26 := ( ($bitcast ( $int<8>) xx_x10) >=   ($bitcast ( $int<8>) xx_x16 ) )
xx_x27 := (xx_x20 & xx_x23)
xx_x28 := (xx_x27 & xx_x26)
$if xx_x28 $then  $place [for_body_if_true] $else $place [for_body_if_false] $endif 
//begin: basic-block if_true
$merge for_body_if_true
$endmerge
$place [if_true_if_nextx_x2]
//begin: basic-block if_false
$merge for_body_if_false
$endmerge
// compare instruction
xx_x35 := ( ($bitcast ( $int<8>) xx_x12) >=   ($bitcast ( $int<8>) xx_x10 ) )
// compare instruction
xx_x38 := ( ($bitcast ( $int<8>) xx_x12) >=   ($bitcast ( $int<8>) xx_x14 ) )
// compare instruction
xx_x41 := ( ($bitcast ( $int<8>) xx_x12) >=   ($bitcast ( $int<8>) xx_x16 ) )
xx_x42 := (xx_x35 & xx_x38)
xx_x43 := (xx_x42 & xx_x41)
$if xx_x43 $then  $place [if_false_if_truex_x1] $else $place [if_false_if_falsex_x1] $endif 
//begin: basic-block if_truex_x1
$merge if_false_if_truex_x1
$endmerge
$place [if_truex_x1_if_nextx_x1]
//begin: basic-block if_falsex_x1
$merge if_false_if_falsex_x1
$endmerge
// compare instruction
xx_x50 := ( ($bitcast ( $int<8>) xx_x14) >=   ($bitcast ( $int<8>) xx_x10 ) )
// compare instruction
xx_x53 := ( ($bitcast ( $int<8>) xx_x14) >=   ($bitcast ( $int<8>) xx_x12 ) )
// compare instruction
xx_x56 := ( ($bitcast ( $int<8>) xx_x14) >=   ($bitcast ( $int<8>) xx_x16 ) )
xx_x57 := (xx_x50 & xx_x53)
xx_x58 := (xx_x57 & xx_x56)
$if xx_x58 $then  $place [if_falsex_x1_if_truex_x2] $else $place [if_falsex_x1_if_falsex_x2] $endif 
//begin: basic-block if_truex_x2
$merge if_falsex_x1_if_truex_x2
$endmerge
$place [if_truex_x2_if_next]
//begin: basic-block if_falsex_x2
$merge if_falsex_x1_if_falsex_x2
$endmerge
$place [if_falsex_x2_if_next]
//begin: basic-block if_next
$merge if_falsex_x2_if_next if_truex_x2_if_next
$phi xx_x685 :=  ( $cast ($uint<8>) xx_x16) $on if_falsex_x2_if_next ( $cast ($uint<8>) xx_x14) $on if_truex_x2_if_next 
$endmerge
$place [if_next_if_nextx_x1]
//begin: basic-block if_nextx_x1
$merge if_next_if_nextx_x1 if_truex_x1_if_nextx_x1
$phi xx_x684 :=  ( $cast ($uint<8>) xx_x685) $on if_next_if_nextx_x1 ( $cast ($uint<8>) xx_x12) $on if_truex_x1_if_nextx_x1 
$endmerge
$place [if_nextx_x1_if_nextx_x2]
//begin: basic-block if_nextx_x2
$merge if_nextx_x1_if_nextx_x2 if_true_if_nextx_x2
$phi xx_x68 :=  ( $cast ($uint<8>) xx_x684) $on if_nextx_x1_if_nextx_x2 ( $cast ($uint<8>) xx_x10) $on if_true_if_nextx_x2 
$endmerge
pool_out_data := xx_x68
xx_x71 := (xx_x707 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
// compare instruction
xx_x8 := (xx_x71 < pool_cols )
$if xx_x8 $then  $place [if_nextx_x2_for_body] $else $place [if_nextx_x2_forx_xfor_out_crit_edge] $endif 
//begin: basic-block forx_xfor_out_crit_edge
$merge if_nextx_x2_forx_xfor_out_crit_edge
$endmerge
$place [forx_xfor_out_crit_edge_for_out]
//begin: basic-block for_out
$merge forx_xfor_out_crit_edge_for_out vars_for_out
$endmerge
}
}
$module [output_module] 
 $in (out_start_addr : $uint<32> conv_scale : $float<8,23> conv_zero_point : $float<8,23> offsetStart : $uint<32> pool_cols : $uint<32> isLinear : $uint<1> isFlatten : $uint<1> isActivation : $uint<1> out_rows : $uint<32> out_cols : $uint<32> out_channels : $uint<32> out_grp_no : $uint<32> out_chn_ind : $uint<32> )
 $out ()
 $is 
{
$branchblock [body] {
//begin: basic-block vars
$if isLinear $then  $place [vars_if_true] $else $place [vars_if_falsex_x2] $endif 
//begin: basic-block if_true
$merge vars_if_true
$endmerge
// compare instruction
xx_x3752 := (( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  < out_channels )
$if xx_x3752 $then  $place [if_true_for_bodyx_xlrx_xph] $else $place [if_true_for_out] $endif 
//begin: basic-block for_bodyx_xlrx_xph
$merge if_true_for_bodyx_xlrx_xph
$endmerge
$place [for_bodyx_xlrx_xph_for_body]
//begin: basic-block for_body
$merge for_bodyx_xlrx_xph_for_body if_nextx_x1_for_body
$phi xx_x8255 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<32>) xx_x83) $on if_nextx_x1_for_body 
$phi xx_x7054 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) ) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<64>) xx_x5449) $on if_nextx_x1_for_body 
$phi xx_x7753 :=  ( $cast ($uint<32>) offsetStart) $on for_bodyx_xlrx_xph_for_body ( $cast ($uint<32>) xx_x6550) $on if_nextx_x1_for_body 
$endmerge
xx_x39 := conv_out_data
$if isActivation $then  $place [for_body_if_truex_x1] $else $place [for_body_if_false] $endif 
//begin: basic-block if_truex_x1
$merge for_body_if_truex_x1
$endmerge
$call relu (xx_x39 )  (xx_x44)
$place [if_truex_x1_if_next]
//begin: basic-block if_false
$merge for_body_if_false
$endmerge
$place [if_false_if_next]
//begin: basic-block if_next
$merge if_false_if_next if_truex_x1_if_next
$phi xx_x48 :=  ( $cast ($float<8,23>) xx_x39) $on if_false_if_next ( $cast ($float<8,23>) xx_x44) $on if_truex_x1_if_next 
$endmerge
$call uint_quant (xx_x48 conv_scale conv_zero_point )  (xx_x51)
xx_x55 := (xx_x7054 + ( $bitcast ($uint<64> ) _b1111111111111111111111111111111111111111111111111111111111111111 ) )
xx_x56 := (xx_x55 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 ) )
xx_x57 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) xx_x51) )
xx_x58 := (xx_x57 << xx_x56)
xx_x62 := (( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  << xx_x55)
xx_x68 := ($cast ($uint<8>) xx_x62)
$call writeModule_convolution (out_start_addr xx_x7753 xx_x58 xx_x68 )  ()
// compare instruction
xx_x74 := (xx_x55 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
$if xx_x74 $then  $place [if_next_if_truex_x2] $else $place [if_next_if_falsex_x1] $endif 
//begin: basic-block if_truex_x2
$merge if_next_if_truex_x2
$endmerge
xx_x78 := (xx_x7753 + ( $bitcast ($uint<32> ) _b00000000000000000000000000001000 ) )
$place [if_truex_x2_if_nextx_x1]
//begin: basic-block if_falsex_x1
$merge if_next_if_falsex_x1
$endmerge
$place [if_falsex_x1_if_nextx_x1]
//begin: basic-block if_nextx_x1
$merge if_falsex_x1_if_nextx_x1 if_truex_x2_if_nextx_x1
$phi xx_x6550 :=  ( $cast ($uint<32>) xx_x7753) $on if_falsex_x1_if_nextx_x1 ( $cast ($uint<32>) xx_x78) $on if_truex_x2_if_nextx_x1 
$phi xx_x5449 :=  ( $cast ($uint<64>) xx_x55) $on if_falsex_x1_if_nextx_x1 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) ) $on if_truex_x2_if_nextx_x1 
$endmerge
xx_x83 := (xx_x8255 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
// compare instruction
xx_x37 := (xx_x83 < out_channels )
$if xx_x37 $then  $place [if_nextx_x1_for_body] $else $place [if_nextx_x1_forx_xfor_out_crit_edge] $endif 
//begin: basic-block forx_xfor_out_crit_edge
$merge if_nextx_x1_forx_xfor_out_crit_edge
$endmerge
$place [forx_xfor_out_crit_edge_for_out]
//begin: basic-block for_out
$merge forx_xfor_out_crit_edge_for_out if_true_for_out
$endmerge
$place [for_out_if_nextx_x9]
//begin: basic-block if_falsex_x2
$merge vars_if_falsex_x2
$endmerge
xx_x97 := (out_rows * out_cols)
xx_x129 := (out_cols << ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
xx_x130 := ($cast ($uint<64>) xx_x129)
xx_x177 := (out_channels * pool_cols)
xx_x179 := ($cast ($uint<64>) xx_x177)
xx_x183 := ($cast ($uint<64>) out_channels)
xx_x187 := (out_grp_no << ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
xx_x192 := (( $bitcast ($uint<32> ) _b00000000000000000000000000000111 )  - out_chn_ind)
xx_x193 := (( $bitcast ($uint<32> ) _b00000000000000000000000000000001 )  << xx_x192)
xx_x197 := (out_chn_ind << ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
xx_x198 := (( $bitcast ($uint<32> ) _b00000000000000000000000000111000 )  - xx_x197)
xx_x208 := ($cast ($uint<8>) xx_x193)
xx_x216 := ($cast ($uint<64>) pool_cols)
xx_x239 := ($cast ($uint<64>) out_cols)
// compare instruction
xx_x10167 := (( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  < xx_x97 )
$if xx_x10167 $then  $place [if_falsex_x2_for_bodyx_x1x_xlrx_xph] $else $place [if_falsex_x2_for_outx_x2] $endif 
//begin: basic-block for_bodyx_x1x_xlrx_xph
$merge if_falsex_x2_for_bodyx_x1x_xlrx_xph
$endmerge
$place [for_bodyx_x1x_xlrx_xph_for_bodyx_x1]
//begin: basic-block for_bodyx_x1
$merge for_bodyx_x1x_xlrx_xph_for_bodyx_x1 if_nextx_x8_for_bodyx_x1
$phi xx_x24875 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on for_bodyx_x1x_xlrx_xph_for_bodyx_x1 ( $cast ($uint<32>) xx_x249) $on if_nextx_x8_for_bodyx_x1 
$phi xx_x24374 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on for_bodyx_x1x_xlrx_xph_for_bodyx_x1 ( $cast ($uint<64>) xx_x1173) $on if_nextx_x8_for_bodyx_x1 
$phi xx_x23173 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ) $on for_bodyx_x1x_xlrx_xph_for_bodyx_x1 ( $cast ($uint<64>) xx_x232) $on if_nextx_x8_for_bodyx_x1 
$phi xx_x23472 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on for_bodyx_x1x_xlrx_xph_for_bodyx_x1 ( $cast ($uint<64>) xx_x23415) $on if_nextx_x8_for_bodyx_x1 
$phi xx_x1782371 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on for_bodyx_x1x_xlrx_xph_for_bodyx_x1 ( $cast ($uint<64>) xx_x17820) $on if_nextx_x8_for_bodyx_x1 
$phi xx_x1822670 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on for_bodyx_x1x_xlrx_xph_for_bodyx_x1 ( $cast ($uint<64>) xx_x18224) $on if_nextx_x8_for_bodyx_x1 
$phi xx_x1463969 :=  ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) ) $on for_bodyx_x1x_xlrx_xph_for_bodyx_x1 ( $cast ($uint<64>) xx_x14636) $on if_nextx_x8_for_bodyx_x1 
$phi xx_x1574568 :=  ( $cast ($uint<32>) offsetStart) $on for_bodyx_x1x_xlrx_xph_for_bodyx_x1 ( $cast ($uint<32>) xx_x15741) $on if_nextx_x8_for_bodyx_x1 
$endmerge
xx_x103 := conv_out_data
$if isActivation $then  $place [for_bodyx_x1_if_truex_x3] $else $place [for_bodyx_x1_if_falsex_x3] $endif 
//begin: basic-block if_truex_x3
$merge for_bodyx_x1_if_truex_x3
$endmerge
$call relu (xx_x103 )  (xx_x108)
$place [if_truex_x3_if_nextx_x2]
//begin: basic-block if_falsex_x3
$merge for_bodyx_x1_if_falsex_x3
$endmerge
$place [if_falsex_x3_if_nextx_x2]
//begin: basic-block if_nextx_x2
$merge if_falsex_x3_if_nextx_x2 if_truex_x3_if_nextx_x2
$phi xx_x112 :=  ( $cast ($float<8,23>) xx_x103) $on if_falsex_x3_if_nextx_x2 ( $cast ($float<8,23>) xx_x108) $on if_truex_x3_if_nextx_x2 
$endmerge
$call uint_quant (xx_x112 conv_scale conv_zero_point )  (xx_x115)
iNsTr_16 := (xx_x24374 & ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
// compare instruction
xx_x119 := (iNsTr_16 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
$if xx_x119 $then  $place [if_nextx_x2_if_truex_x4] $else $place [if_nextx_x2_if_falsex_x4] $endif 
//begin: basic-block if_truex_x4
$merge if_nextx_x2_if_truex_x4
$endmerge
pool_data_fifo_r0 := xx_x115
$place [if_truex_x4_if_nextx_x3]
//begin: basic-block if_falsex_x4
$merge if_nextx_x2_if_falsex_x4
$endmerge
pool_data_lifo_r1 := xx_x115
$place [if_falsex_x4_if_nextx_x3]
//begin: basic-block if_nextx_x3
$merge if_falsex_x4_if_nextx_x3 if_truex_x4_if_nextx_x3
$endmerge
// compare instruction
xx_x131 := (xx_x23173 == xx_x130 )
$if xx_x131 $then  $place [if_nextx_x3_if_truex_x5] $else $place [if_nextx_x3_if_falsex_x8] $endif 
//begin: basic-block if_truex_x5
$merge if_nextx_x3_if_truex_x5
$endmerge
$call pooling (pool_cols )  ()
// compare instruction
xx_x13956 := (( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  < pool_cols )
$if xx_x13956 $then  $place [if_truex_x5_for_bodyx_x2x_xlrx_xph] $else $place [if_truex_x5_for_outx_x1] $endif 
//begin: basic-block for_bodyx_x2x_xlrx_xph
$merge if_truex_x5_for_bodyx_x2x_xlrx_xph
$endmerge
$place [for_bodyx_x2x_xlrx_xph_for_bodyx_x2]
//begin: basic-block for_bodyx_x2
$merge for_bodyx_x2x_xlrx_xph_for_bodyx_x2 if_nextx_x6_for_bodyx_x2
$phi xx_x22563 :=  ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on for_bodyx_x2x_xlrx_xph_for_bodyx_x2 ( $cast ($uint<32>) xx_x226) $on if_nextx_x6_for_bodyx_x2 
$phi xx_x22061 :=  ( $cast ($uint<64>) xx_x1782371) $on for_bodyx_x2x_xlrx_xph_for_bodyx_x2 ( $cast ($uint<64>) xx_x17821) $on if_nextx_x6_for_bodyx_x2 
$phi xx_x21159 :=  ( $cast ($uint<64>) xx_x1822670) $on for_bodyx_x2x_xlrx_xph_for_bodyx_x2 ( $cast ($uint<64>) xx_x18227) $on if_nextx_x6_for_bodyx_x2 
$phi xx_x16258 :=  ( $cast ($uint<64>) xx_x1463969) $on for_bodyx_x2x_xlrx_xph_for_bodyx_x2 ( $cast ($uint<64>) xx_x14637) $on if_nextx_x6_for_bodyx_x2 
$phi xx_x16957 :=  ( $cast ($uint<32>) xx_x1574568) $on for_bodyx_x2x_xlrx_xph_for_bodyx_x2 ( $cast ($uint<32>) xx_x15742) $on if_nextx_x6_for_bodyx_x2 
$endmerge
xx_x141 := pool_out_data
$if isFlatten $then  $place [for_bodyx_x2_if_truex_x6] $else $place [for_bodyx_x2_if_falsex_x6] $endif 
//begin: basic-block if_truex_x6
$merge for_bodyx_x2_if_truex_x6
$endmerge
xx_x147 := (xx_x16258 + ( $bitcast ($uint<64> ) _b1111111111111111111111111111111111111111111111111111111111111111 ) )
xx_x148 := (xx_x147 << ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000011 ) )
xx_x149 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) xx_x141) )
xx_x150 := (xx_x149 << xx_x148)
xx_x154 := (( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 )  << xx_x147)
xx_x160 := ($cast ($uint<8>) xx_x154)
$call writeModule_convolution (out_start_addr xx_x16957 xx_x150 xx_x160 )  ()
// compare instruction
xx_x166 := (xx_x147 == ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 )  )
$if xx_x166 $then  $place [if_truex_x6_if_truex_x7] $else $place [if_truex_x6_if_falsex_x5] $endif 
//begin: basic-block if_truex_x7
$merge if_truex_x6_if_truex_x7
$endmerge
xx_x170 := (xx_x16957 + ( $bitcast ($uint<32> ) _b00000000000000000000000000001000 ) )
$place [if_truex_x7_if_nextx_x4]
//begin: basic-block if_falsex_x5
$merge if_truex_x6_if_falsex_x5
$endmerge
$place [if_falsex_x5_if_nextx_x4]
//begin: basic-block if_nextx_x4
$merge if_falsex_x5_if_nextx_x4 if_truex_x7_if_nextx_x4
$phi xx_x15743 :=  ( $cast ($uint<32>) xx_x16957) $on if_falsex_x5_if_nextx_x4 ( $cast ($uint<32>) xx_x170) $on if_truex_x7_if_nextx_x4 
$phi xx_x14640 :=  ( $cast ($uint<64>) xx_x147) $on if_falsex_x5_if_nextx_x4 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000001000 ) ) $on if_truex_x7_if_nextx_x4 
$endmerge
$place [if_nextx_x4_if_nextx_x5]
//begin: basic-block if_falsex_x6
$merge for_bodyx_x2_if_falsex_x6
$endmerge
xx_x180 := (xx_x22061 * xx_x179)
xx_x184 := (xx_x21159 * xx_x183)
xx_x185 := (xx_x180 + xx_x184)
xx_x199 :=  ($bitcast ($uint<32>) ( $cast ($int< 32 > ) xx_x141) )
xx_x200 := (xx_x199 << xx_x198)
xx_x201 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) xx_x200) )
iNsTr_36 := ($cast ($uint<32>) xx_x185)
xx_x207 := (xx_x187 + iNsTr_36)
$call writeModule_convolution (out_start_addr xx_x207 xx_x201 xx_x208 )  ()
$place [if_falsex_x6_if_nextx_x5]
//begin: basic-block if_nextx_x5
$merge if_falsex_x6_if_nextx_x5 if_nextx_x4_if_nextx_x5
$phi xx_x22062 :=  ( $cast ($uint<64>) xx_x22061) $on if_falsex_x6_if_nextx_x5 ( $cast ($uint<64>) xx_x22061) $on if_nextx_x4_if_nextx_x5 
$phi xx_x21160 :=  ( $cast ($uint<64>) xx_x21159) $on if_falsex_x6_if_nextx_x5 ( $cast ($uint<64>) xx_x21159) $on if_nextx_x4_if_nextx_x5 
$phi xx_x15742 :=  ( $cast ($uint<32>) xx_x16957) $on if_falsex_x6_if_nextx_x5 ( $cast ($uint<32>) xx_x15743) $on if_nextx_x4_if_nextx_x5 
$phi xx_x14637 :=  ( $cast ($uint<64>) xx_x16258) $on if_falsex_x6_if_nextx_x5 ( $cast ($uint<64>) xx_x14640) $on if_nextx_x4_if_nextx_x5 
$endmerge
xx_x212 := (xx_x21160 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
// compare instruction
xx_x217 := (xx_x212 == xx_x216 )
$if xx_x217 $then  $place [if_nextx_x5_if_truex_x8] $else $place [if_nextx_x5_if_falsex_x7] $endif 
//begin: basic-block if_truex_x8
$merge if_nextx_x5_if_truex_x8
$endmerge
xx_x221 := (xx_x22062 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
$place [if_truex_x8_if_nextx_x6]
//begin: basic-block if_falsex_x7
$merge if_nextx_x5_if_falsex_x7
$endmerge
$place [if_falsex_x7_if_nextx_x6]
//begin: basic-block if_nextx_x6
$merge if_falsex_x7_if_nextx_x6 if_truex_x8_if_nextx_x6
$phi xx_x18227 :=  ( $cast ($uint<64>) xx_x212) $on if_falsex_x7_if_nextx_x6 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on if_truex_x8_if_nextx_x6 
$phi xx_x17821 :=  ( $cast ($uint<64>) xx_x22062) $on if_falsex_x7_if_nextx_x6 ( $cast ($uint<64>) xx_x221) $on if_truex_x8_if_nextx_x6 
$endmerge
xx_x226 := (xx_x22563 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
// compare instruction
xx_x139 := (xx_x226 < pool_cols )
$if xx_x139 $then  $place [if_nextx_x6_for_bodyx_x2] $else $place [if_nextx_x6_forx_x2x_xfor_outx_x1_crit_edge] $endif 
//begin: basic-block forx_x2x_xfor_outx_x1_crit_edge
$merge if_nextx_x6_forx_x2x_xfor_outx_x1_crit_edge
$phi split :=  ( $cast ($uint<32>) xx_x15742) $on if_nextx_x6_forx_x2x_xfor_outx_x1_crit_edge 
$phi split64 :=  ( $cast ($uint<64>) xx_x14637) $on if_nextx_x6_forx_x2x_xfor_outx_x1_crit_edge 
$phi split65 :=  ( $cast ($uint<64>) xx_x18227) $on if_nextx_x6_forx_x2x_xfor_outx_x1_crit_edge 
$phi split66 :=  ( $cast ($uint<64>) xx_x17821) $on if_nextx_x6_forx_x2x_xfor_outx_x1_crit_edge 
$endmerge
$place [forx_x2x_xfor_outx_x1_crit_edge_for_outx_x1]
//begin: basic-block for_outx_x1
$merge forx_x2x_xfor_outx_x1_crit_edge_for_outx_x1 if_truex_x5_for_outx_x1
$phi xx_x169x_xlcssa :=  ( $cast ($uint<32>) split) $on forx_x2x_xfor_outx_x1_crit_edge_for_outx_x1 ( $cast ($uint<32>) xx_x1574568) $on if_truex_x5_for_outx_x1 
$phi xx_x162x_xlcssa :=  ( $cast ($uint<64>) split64) $on forx_x2x_xfor_outx_x1_crit_edge_for_outx_x1 ( $cast ($uint<64>) xx_x1463969) $on if_truex_x5_for_outx_x1 
$phi xx_x211x_xlcssa :=  ( $cast ($uint<64>) split65) $on forx_x2x_xfor_outx_x1_crit_edge_for_outx_x1 ( $cast ($uint<64>) xx_x1822670) $on if_truex_x5_for_outx_x1 
$phi xx_x220x_xlcssa :=  ( $cast ($uint<64>) split66) $on forx_x2x_xfor_outx_x1_crit_edge_for_outx_x1 ( $cast ($uint<64>) xx_x1782371) $on if_truex_x5_for_outx_x1 
$endmerge
$place [for_outx_x1_if_nextx_x7]
//begin: basic-block if_falsex_x8
$merge if_nextx_x3_if_falsex_x8
$endmerge
$place [if_falsex_x8_if_nextx_x7]
//begin: basic-block if_nextx_x7
$merge for_outx_x1_if_nextx_x7 if_falsex_x8_if_nextx_x7
$phi xx_x15741 :=  ( $cast ($uint<32>) xx_x1574568) $on if_falsex_x8_if_nextx_x7 ( $cast ($uint<32>) xx_x169x_xlcssa) $on for_outx_x1_if_nextx_x7 
$phi xx_x14636 :=  ( $cast ($uint<64>) xx_x1463969) $on if_falsex_x8_if_nextx_x7 ( $cast ($uint<64>) xx_x162x_xlcssa) $on for_outx_x1_if_nextx_x7 
$phi xx_x18224 :=  ( $cast ($uint<64>) xx_x1822670) $on if_falsex_x8_if_nextx_x7 ( $cast ($uint<64>) xx_x211x_xlcssa) $on for_outx_x1_if_nextx_x7 
$phi xx_x17820 :=  ( $cast ($uint<64>) xx_x1782371) $on if_falsex_x8_if_nextx_x7 ( $cast ($uint<64>) xx_x220x_xlcssa) $on for_outx_x1_if_nextx_x7 
$endmerge
xx_x232 := (xx_x23173 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
xx_x235 := (xx_x23472 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
// compare instruction
xx_x240 := (xx_x235 == xx_x239 )
$if xx_x240 $then  $place [if_nextx_x7_if_truex_x9] $else $place [if_nextx_x7_if_falsex_x9] $endif 
//begin: basic-block if_truex_x9
$merge if_nextx_x7_if_truex_x9
$endmerge
xx_x244 := (xx_x24374 + ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) )
$place [if_truex_x9_if_nextx_x8]
//begin: basic-block if_falsex_x9
$merge if_nextx_x7_if_falsex_x9
$endmerge
$place [if_falsex_x9_if_nextx_x8]
//begin: basic-block if_nextx_x8
$merge if_falsex_x9_if_nextx_x8 if_truex_x9_if_nextx_x8
$phi xx_x23415 :=  ( $cast ($uint<64>) xx_x235) $on if_falsex_x9_if_nextx_x8 ( $cast ($uint<64>) ( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ) $on if_truex_x9_if_nextx_x8 
$phi xx_x1173 :=  ( $cast ($uint<64>) xx_x24374) $on if_falsex_x9_if_nextx_x8 ( $cast ($uint<64>) xx_x244) $on if_truex_x9_if_nextx_x8 
$endmerge
xx_x249 := (xx_x24875 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
// compare instruction
xx_x101 := (xx_x249 < xx_x97 )
$if xx_x101 $then  $place [if_nextx_x8_for_bodyx_x1] $else $place [if_nextx_x8_forx_x1x_xfor_outx_x2_crit_edge] $endif 
//begin: basic-block forx_x1x_xfor_outx_x2_crit_edge
$merge if_nextx_x8_forx_x1x_xfor_outx_x2_crit_edge
$endmerge
$place [forx_x1x_xfor_outx_x2_crit_edge_for_outx_x2]
//begin: basic-block for_outx_x2
$merge forx_x1x_xfor_outx_x2_crit_edge_for_outx_x2 if_falsex_x2_for_outx_x2
$endmerge
$place [for_outx_x2_if_nextx_x9]
//begin: basic-block if_nextx_x9
$merge for_out_if_nextx_x9 for_outx_x2_if_nextx_x9
$endmerge
}
}
$module [compute_mul] 
 $in (ker_size : $uint<32> num_chn_present : $uint<32> num_iterations : $uint<32> )
 $out ()
 $is 
{
$branchblock [body] {
//begin: basic-block vars
xx_x35 := (ker_size * ker_size)
xx_x37 := (xx_x35 * num_chn_present)
// compare instruction
xx_x138 := ( ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) <   ($bitcast ( $int<32>) num_iterations ) )
$if xx_x138 $then  $place [vars_while_bodyx_xlrx_xph] $else $place [vars_while_out] $endif 
//begin: basic-block while_bodyx_xlrx_xph
$merge vars_while_bodyx_xlrx_xph
$endmerge
$place [while_bodyx_xlrx_xph_while_body]
//begin: basic-block while_body
//   this is a do-while loop.
$merge while_bodyx_xlrx_xph_while_body
$endmerge
$dopipeline $depth 31 $buffering 7 
$fullrate
$merge $entry $loopback
$phi xx_x2910 :=  ( $cast ($uint<32>) xx_x112) $on $loopback ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on $entry
$phi xx_x269 :=  ( $cast ($uint<32>) xx_x264) $on $loopback ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on $entry
$endmerge
xx_x16 := conv_input_data
xx_x18 := conv_ker_data
$call fp32_mul_for_ecg (xx_x16 xx_x18 )  (xx_x22)
accumulator_pipe_even := xx_x22
xx_x27 := (xx_x269 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
// compare instruction
xx_x38 := ( ($bitcast ( $int<32>) xx_x27) <   ($bitcast ( $int<32>) xx_x37 ) )
while_body_if_true_taken := xx_x38
while_body_if_false_taken := ( ~xx_x38)
if_false_exec_guard := while_body_if_false_taken
//begin: basic-block if_false
$guard (if_false_exec_guard) xx_x30 := (xx_x2910 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
if_false_if_next_taken := if_false_exec_guard
if_true_exec_guard := while_body_if_true_taken
//begin: basic-block if_true
$guard (if_true_exec_guard) xx_x40 := conv_input_data
$guard (if_true_exec_guard) xx_x42 := conv_ker_data
$guard (if_true_exec_guard) $call fp32_mul_for_ecg (xx_x40 xx_x42 )  (xx_x46)
$guard (if_true_exec_guard) accumulator_pipe_odd := xx_x46
$guard (if_true_exec_guard) xx_x51 := (xx_x269 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) )
$guard (if_true_exec_guard) xx_x54 := (xx_x2910 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) )
if_true_if_next_taken := if_true_exec_guard
if_next_exec_guard := (if_false_if_next_taken | if_true_if_next_taken )
//begin: basic-block if_next
xx_x60 := ($mux if_false_if_next_taken ( $bitcast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) ($mux if_true_if_next_taken ( $bitcast ($uint<32>) xx_x51) ($bitcast ($uint<32>) 0)))
xx_x112 := ($mux if_false_if_next_taken ( $bitcast ($uint<32>) xx_x30) ($mux if_true_if_next_taken ( $bitcast ($uint<32>) xx_x54) ($bitcast ($uint<32>) 0)))
// compare instruction
$guard (if_next_exec_guard) xx_x66 := (xx_x60 == xx_x37 )
if_next_if_truex_x1_taken := (if_next_exec_guard & xx_x66)
if_next_if_falsex_x1_taken := (if_next_exec_guard & (~xx_x66))
if_falsex_x1_exec_guard := if_next_if_falsex_x1_taken
//begin: basic-block if_falsex_x1
if_falsex_x1_if_nextx_x1_taken := if_falsex_x1_exec_guard
if_truex_x1_exec_guard := if_next_if_truex_x1_taken
//begin: basic-block if_truex_x1
if_truex_x1_if_nextx_x1_taken := if_truex_x1_exec_guard
//begin: basic-block if_nextx_x1
xx_x264 := ($mux if_falsex_x1_if_nextx_x1_taken ( $bitcast ($uint<32>) xx_x60) ($mux if_truex_x1_if_nextx_x1_taken ( $bitcast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) ($bitcast ($uint<32>) 0)))
// compare instruction
xx_x13 := ( ($bitcast ( $int<32>) xx_x112) <   ($bitcast ( $int<32>) num_iterations ) )
if_nextx_x1_whilex_xwhile_out_crit_edge_taken := ( ~xx_x13)
$while xx_x13
$if if_nextx_x1_whilex_xwhile_out_crit_edge_taken $then 
  $place [if_nextx_x1_whilex_xwhile_out_crit_edge]
$endif
//begin: basic-block whilex_xwhile_out_crit_edge
$merge if_nextx_x1_whilex_xwhile_out_crit_edge
$endmerge
$place [whilex_xwhile_out_crit_edge_while_out]
//begin: basic-block while_out
$merge vars_while_out whilex_xwhile_out_crit_edge_while_out
$endmerge
}
}
$module [compute_accumulate] 
 $in (ker_size : $uint<32> num_chn_present : $uint<32> num_iterations : $uint<32> )
 $out ()
 $is 
{
$branchblock [body] {
//begin: basic-block vars
xx_x12 := (ker_size * ker_size)
xx_x14 := (xx_x12 * num_chn_present)
// compare instruction
xx_x2010 := ( ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) <   ($bitcast ( $int<32>) num_iterations ) )
$if xx_x2010 $then  $place [vars_while_bodyx_xlrx_xph] $else $place [vars_while_out] $endif 
//begin: basic-block while_bodyx_xlrx_xph
$merge vars_while_bodyx_xlrx_xph
$endmerge
$place [while_bodyx_xlrx_xph_while_body]
//begin: basic-block while_body
//   this is a do-while loop.
$merge while_bodyx_xlrx_xph_while_body
$endmerge
$dopipeline $depth 31 $buffering 7 
$fullrate
$merge $entry $loopback
$phi xx_x2813 :=  ( $cast ($uint<32>) xx_x182) $on $loopback ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on $entry
$phi xx_x2512 :=  ( $cast ($uint<32>) xx_x254) $on $loopback ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on $entry
$phi xx_x4811 :=  ( $cast ($float<8,23>) xx_x487) $on $loopback ( $cast ($float<8,23>) ( $bitcast ($float<8,23> ) _h0 ) ) $on $entry
$endmerge
xx_x23 := accumulator_pipe_even
xx_x26 := (xx_x2512 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
// compare instruction
xx_x33 := ( ($bitcast ( $int<32>) xx_x26) <   ($bitcast ( $int<32>) xx_x14 ) )
while_body_if_true_taken := xx_x33
while_body_if_false_taken := ( ~xx_x33)
if_false_exec_guard := while_body_if_false_taken
//begin: basic-block if_false
$guard (if_false_exec_guard) xx_x29 := (xx_x2813 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
if_false_if_next_taken := if_false_exec_guard
if_true_exec_guard := while_body_if_true_taken
//begin: basic-block if_true
$guard (if_true_exec_guard) xx_x35 := accumulator_pipe_odd
$guard (if_true_exec_guard) xx_x38 := (xx_x2512 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) )
$guard (if_true_exec_guard) xx_x41 := (xx_x2813 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) )
if_true_if_next_taken := if_true_exec_guard
if_next_exec_guard := (if_false_if_next_taken | if_true_if_next_taken )
//begin: basic-block if_next
xx_x56 := ($mux if_false_if_next_taken ( $bitcast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) ($mux if_true_if_next_taken ( $bitcast ($uint<32>) xx_x38) ($bitcast ($uint<32>) 0)))
xx_x50 := ($mux if_false_if_next_taken ( $bitcast ($float<8,23>) ( $bitcast ($float<8,23> ) _h0 ) ) ($mux if_true_if_next_taken ( $bitcast ($float<8,23>) xx_x35) ($bitcast ($float<8,23>) 0)))
xx_x182 := ($mux if_false_if_next_taken ( $bitcast ($uint<32>) xx_x29) ($mux if_true_if_next_taken ( $bitcast ($uint<32>) xx_x41) ($bitcast ($uint<32>) 0)))
$guard (if_next_exec_guard) $call fp32_add_for_ecg (xx_x23 xx_x50 )  (xx_x51)
$guard (if_next_exec_guard) $call fp32_add_for_ecg (xx_x4811 xx_x51 )  (xx_x52)
// compare instruction
$guard (if_next_exec_guard) xx_x55 := (xx_x56 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  )
// compare instruction
$guard (if_next_exec_guard) xx_x58 := (xx_x56 == xx_x14 )
$guard (if_next_exec_guard) xx_x59 := (xx_x55 | xx_x58)
if_next_if_truex_x1_taken := (if_next_exec_guard & xx_x59)
if_next_if_falsex_x1_taken := (if_next_exec_guard & (~xx_x59))
if_falsex_x1_exec_guard := if_next_if_falsex_x1_taken
//begin: basic-block if_falsex_x1
if_falsex_x1_if_nextx_x1_taken := if_falsex_x1_exec_guard
if_truex_x1_exec_guard := if_next_if_truex_x1_taken
//begin: basic-block if_truex_x1
$guard (if_truex_x1_exec_guard) conv_out_data := xx_x52
if_truex_x1_if_nextx_x1_taken := if_truex_x1_exec_guard
//begin: basic-block if_nextx_x1
xx_x487 := ($mux if_falsex_x1_if_nextx_x1_taken ( $bitcast ($float<8,23>) xx_x52) ($mux if_truex_x1_if_nextx_x1_taken ( $bitcast ($float<8,23>) ( $bitcast ($float<8,23> ) _h0 ) ) ($bitcast ($float<8,23>) 0)))
xx_x254 := ($mux if_falsex_x1_if_nextx_x1_taken ( $bitcast ($uint<32>) xx_x56) ($mux if_truex_x1_if_nextx_x1_taken ( $bitcast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) ($bitcast ($uint<32>) 0)))
// compare instruction
xx_x20 := ( ($bitcast ( $int<32>) xx_x182) <   ($bitcast ( $int<32>) num_iterations ) )
if_nextx_x1_whilex_xwhile_out_crit_edge_taken := ( ~xx_x20)
$while xx_x20
$if if_nextx_x1_whilex_xwhile_out_crit_edge_taken $then 
  $place [if_nextx_x1_whilex_xwhile_out_crit_edge]
$endif
//begin: basic-block whilex_xwhile_out_crit_edge
$merge if_nextx_x1_whilex_xwhile_out_crit_edge
$endmerge
$place [whilex_xwhile_out_crit_edge_while_out]
//begin: basic-block while_out
$merge vars_while_out whilex_xwhile_out_crit_edge_while_out
$endmerge
}
}
$module [compute_mul_linear] 
 $in (num_iterations : $uint<32> )
 $out ()
 $is 
{
$branchblock [body] {
//begin: basic-block vars
// compare instruction
xx_x82 := (( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  < num_iterations )
$if xx_x82 $then  $place [vars_for_bodyx_xlrx_xph] $else $place [vars_for_out] $endif 
//begin: basic-block for_bodyx_xlrx_xph
$merge vars_for_bodyx_xlrx_xph
$endmerge
$place [for_bodyx_xlrx_xph_for_body]
//begin: basic-block for_body
//   this is a do-while loop.
$merge for_bodyx_xlrx_xph_for_body
$endmerge
$dopipeline $depth 31 $buffering 7 
$fullrate
$merge $entry $loopback
$phi xx_x283 :=  ( $cast ($uint<32>) xx_x29) $on $loopback ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on $entry
$endmerge
xx_x11 := conv_input_data
xx_x13 := conv_ker_data
$call fp32_mul_for_ecg (xx_x11 xx_x13 )  (xx_x17)
iNsTr_3 := (xx_x283 & ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
// compare instruction
xx_x20 := (iNsTr_3 == ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 )  )
for_body_if_true_taken := xx_x20
for_body_if_false_taken := ( ~xx_x20)
if_false_exec_guard := for_body_if_false_taken
//begin: basic-block if_false
$guard (if_false_exec_guard) accumulator_pipe_odd := xx_x17
if_false_if_next_taken := if_false_exec_guard
if_true_exec_guard := for_body_if_true_taken
//begin: basic-block if_true
$guard (if_true_exec_guard) accumulator_pipe_even := xx_x17
if_true_if_next_taken := if_true_exec_guard
//begin: basic-block if_next
xx_x29 := (xx_x283 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
// compare instruction
xx_x8 := (xx_x29 < num_iterations )
if_next_forx_xfor_out_crit_edge_taken := ( ~xx_x8)
$while xx_x8
$if if_next_forx_xfor_out_crit_edge_taken $then 
  $place [if_next_forx_xfor_out_crit_edge]
$endif
//begin: basic-block forx_xfor_out_crit_edge
$merge if_next_forx_xfor_out_crit_edge
$endmerge
$place [forx_xfor_out_crit_edge_for_out]
//begin: basic-block for_out
$merge forx_xfor_out_crit_edge_for_out vars_for_out
$endmerge
}
}
$module [compute_accumulate_linear] 
 $in (num_chn_present : $uint<32> num_iterations : $uint<32> )
 $out ()
 $is 
{
$branchblock [body] {
//begin: basic-block vars
// compare instruction
xx_x126 := ( ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) <   ($bitcast ( $int<32>) num_iterations ) )
$if xx_x126 $then  $place [vars_while_bodyx_xlrx_xph] $else $place [vars_while_out] $endif 
//begin: basic-block while_bodyx_xlrx_xph
$merge vars_while_bodyx_xlrx_xph
$endmerge
$place [while_bodyx_xlrx_xph_while_body]
//begin: basic-block while_body
//   this is a do-while loop.
$merge while_bodyx_xlrx_xph_while_body
$endmerge
$dopipeline $depth 31 $buffering 7 
$fullrate
$merge $entry $loopback
$phi xx_x199 :=  ( $cast ($uint<32>) xx_x20) $on $loopback ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on $entry
$phi xx_x228 :=  ( $cast ($float<8,23>) xx_x223) $on $loopback ( $cast ($float<8,23>) ( $bitcast ($float<8,23> ) _h0 ) ) $on $entry
$phi xx_x287 :=  ( $cast ($uint<32>) xx_x285) $on $loopback ( $cast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) $on $entry
$endmerge
xx_x15 := accumulator_pipe_even
xx_x17 := accumulator_pipe_odd
xx_x20 := (xx_x199 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) )
$call fp32_add_for_ecg (xx_x15 xx_x17 )  (xx_x25)
$call fp32_add_for_ecg (xx_x228 xx_x25 )  (xx_x26)
xx_x29 := (xx_x287 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000010 ) )
// compare instruction
xx_x33 := (xx_x29 == num_chn_present )
while_body_if_true_taken := xx_x33
while_body_if_false_taken := ( ~xx_x33)
if_false_exec_guard := while_body_if_false_taken
//begin: basic-block if_false
if_false_if_next_taken := if_false_exec_guard
if_true_exec_guard := while_body_if_true_taken
//begin: basic-block if_true
$guard (if_true_exec_guard) conv_out_data := xx_x26
if_true_if_next_taken := if_true_exec_guard
//begin: basic-block if_next
xx_x285 := ($mux if_false_if_next_taken ( $bitcast ($uint<32>) xx_x29) ($mux if_true_if_next_taken ( $bitcast ($uint<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) ) ($bitcast ($uint<32>) 0)))
xx_x223 := ($mux if_false_if_next_taken ( $bitcast ($float<8,23>) xx_x26) ($mux if_true_if_next_taken ( $bitcast ($float<8,23>) ( $bitcast ($float<8,23> ) _h0 ) ) ($bitcast ($float<8,23>) 0)))
// compare instruction
xx_x12 := ( ($bitcast ( $int<32>) xx_x20) <   ($bitcast ( $int<32>) num_iterations ) )
if_next_whilex_xwhile_out_crit_edge_taken := ( ~xx_x12)
$while xx_x12
$if if_next_whilex_xwhile_out_crit_edge_taken $then 
  $place [if_next_whilex_xwhile_out_crit_edge]
$endif
//begin: basic-block whilex_xwhile_out_crit_edge
$merge if_next_whilex_xwhile_out_crit_edge
$endmerge
$place [whilex_xwhile_out_crit_edge_while_out]
//begin: basic-block while_out
$merge vars_while_out whilex_xwhile_out_crit_edge_while_out
$endmerge
}
}
$module [convengine] 
 $in (in_start_addr : $uint<32> out_start_addr : $uint<32> ker_start_addr : $uint<32> out_grp_no : $uint<32> in_rows : $uint<32> in_cols : $uint<32> in_channels : $uint<32> out_channels : $uint<32> groups : $uint<32> ker_size : $uint<32> pool_cols : $uint<32> inp_scale : $float<8,23> inp_zero_point : $float<8,23> ker_scale : $float<8,23> ker_zero_point : $float<8,23> conv_scale : $float<8,23> conv_zero_point : $float<8,23> padReq : $uint<1> poolReq : $uint<1> isLinear : $uint<1> isActivation : $uint<1> isFlatten : $uint<1> offsetStart : $uint<32> out_chn_ind : $uint<32> )
 $out ()
 $is 
{
//begin: basic-block vars
xx_x52 := (in_rows - ker_size)
xx_x53 := (xx_x52 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
xx_x57 := (in_cols - ker_size)
xx_x58 := (xx_x57 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
vars_if_true_taken := isLinear
vars_if_false_taken := ( ~isLinear)
if_false_exec_guard := vars_if_false_taken
//begin: basic-block if_false
$guard (if_false_exec_guard) $call fetchAll (in_start_addr groups ker_size in_channels inp_scale inp_zero_point )  ()
$guard (if_false_exec_guard) $call fetchKernel (ker_start_addr groups ker_size in_channels ker_scale ker_zero_point )  ()
$guard (if_false_exec_guard) xx_x124 := (xx_x53 * xx_x58)
$guard (if_false_exec_guard) xx_x126 := (xx_x124 * ker_size)
$guard (if_false_exec_guard) xx_x128 := (xx_x126 * ker_size)
$guard (if_false_exec_guard) xx_x130 := (xx_x128 * in_channels)
$guard (if_false_exec_guard) xx_x142 := ( $bitcast ($uint<32> ) ( $cast ( $int< 32 > ) inp_scale) )
$guard (if_false_exec_guard) xx_x143 := ( $bitcast ($uint<32> ) ( $cast ( $int< 32 > ) inp_zero_point) )
$guard (if_false_exec_guard) $call fetchPartial (in_start_addr ker_size in_channels groups in_rows in_cols xx_x53 xx_x58 xx_x142 xx_x143 )  ()
$guard (if_false_exec_guard) $call inputLoader (ker_size in_channels groups xx_x53 xx_x58 )  ()
$guard (if_false_exec_guard) xx_x154 := (ker_size * ker_size)
$guard (if_false_exec_guard) xx_x156 := (xx_x154 * in_channels)
$guard (if_false_exec_guard) $call kernelLoader (xx_x130 xx_x156 )  ()
$guard (if_false_exec_guard) $call compute_mul (ker_size in_channels xx_x130 )  ()
$guard (if_false_exec_guard) $call compute_accumulate (ker_size in_channels xx_x130 )  ()
$guard (if_false_exec_guard) $call output_module (out_start_addr conv_scale conv_zero_point offsetStart pool_cols ( $bitcast ($uint<1> ) _b0 )  isFlatten isActivation xx_x53 xx_x58 out_channels out_grp_no out_chn_ind )  ()
if_false_if_next_taken := if_false_exec_guard
if_true_exec_guard := vars_if_true_taken
//begin: basic-block if_true
$guard (if_true_exec_guard) $call fetchInputLinear (in_start_addr groups in_channels inp_scale inp_zero_point )  ()
$guard (if_true_exec_guard) xx_x76 := (in_channels * out_channels)
$guard (if_true_exec_guard) $call inputLoaderLinear (xx_x76 in_channels )  ()
$guard (if_true_exec_guard) $call kernelLoaderLinear (ker_start_addr groups in_channels out_channels ker_scale ker_zero_point )  ()
$guard (if_true_exec_guard) $call compute_mul_linear (xx_x76 )  ()
$guard (if_true_exec_guard) $call compute_accumulate_linear (in_channels xx_x76 )  ()
$guard (if_true_exec_guard) $call output_module (out_start_addr conv_scale conv_zero_point offsetStart pool_cols ( $bitcast ($uint<1> ) _b1 )  isFlatten isActivation xx_x53 xx_x58 out_channels out_grp_no out_chn_ind )  ()
if_true_if_next_taken := if_true_exec_guard
//begin: basic-block if_next
}
BC��5     b0$JY�f���OQ�L   !  �  !       �#�A�I29��%�b�EB�B�28K
2b�Hp�!#D��A�d�� CF� �2b�*(*�1|�\� ��   �   :   "f�B��RB���q�PH
	&F�Bb&��@a� �!�|�AH!���B�
a���sA!�y���S&*��B`���0E`�2Q4P�,���!��2 S�,���a
AP!�bdA$0LQ�(��(��,YEQEQA ʐEQ�YEQT� ��EQ�0e��YT�,b�(z�'��(*DEQɲ(��(��(��a�y�牢��)    Q     ������  )�  I     �  0|�;�;��6�wXwx�{p�6`�tp�z��68w���	!CFJ� !LNޜ.O�Ͼ��       � ��	)��  �    @ `��� 
	  @     �c�
b�       �1]1�B      옸�F!      vLaP)$     @� ����b(�       �1�Aa��       ;&8(��  �    @ `�T2�B      ���H�UH     � �(��
	  @     �c2R!      vL�` �*$     @� ��Ieh�       �1Ⴑ��       C*_�          R��           ���� �   @      �T.q@          0���F          @�!�X<    �      ���          `HJ @         � C*�X,          R��b          ��
<� �   @      �T�aa          0�ҏK          @�!U�0    �      �z��           `H�&M          � C*;A<           R���          ���V$0          @�!��,     �      ��e
           R�L#           0��f           `H�3
           ���l�2           @�!��0f           � C*�a�      @      �T���     �      �j�)           R��r           0�z�
�          `H�?L            ��ʄ�4           @�!�
1j           � C*1�<           R�QT           0�"%�          @�!�-k            � C�^j�      @      �T괴     �      ��Ij           R���           0�ʩ�           `H%W�            ���¨  Y 4   2�L��	&G�C
F hXD!� &��M���	��M���	��M���	��M���	��M���	�q*�9��D �y2v)�I8~i���}��~�y���	 d�i�_!� &`��q�ߡ� &`�i�ߡ� &����Y����@
���Y���A
�jR��b���������hhY
��`r��A�w�   �  �   3���f=�C8�ÌB�yxs�q� ��3B��Ρf0=�C8���=�C=�=�x�tp{yH�ppzpvx�p ����0n0���P3��!�!�af0�;��;�C9�<��<�;��v`{h7h�rh7��p��p`v(v�vx�w��_�q�r��y��,�������0bȡ�̡��a�!ā�a֐C9�C9�C9�C9��8�C8�;��/��<��;�;���i�pX�rp�thx`�t�t���S� �P��@� �P3 (���A�!܁�����fQ8�C:��;�P$v`{h7`�wxx�QL���P3j�a�!��~��!�aT��8��;�C=�C9��<�C;��;�Ì�
�y��w�tz(r��\����P�0#��A�����fH;��=����8�C9��<��9��;�<�H�qv`q�qX����`��� �0� �Pn�0�0�����P�0#��a���!�!�!�!�!f �;�C=�9��9�X�ppwxzzH�wp����0���@��0�s�w�_��pp�t��tЇr���A9��8�C=�C9�@Ġʡ�A��f$c0���0�@�0C!�usH�_��|��r���<��<��8�C:��;�Ì�H!Ba�!��R�f(g��0��P�@    �  '   
r(�w�zXp�C=��8�C9�Â�ơ
�A���!�!��4�`�P� �@� �P����y(�p`vx�qz(rXp��8�;��=��k�!��� �a� ��aС�a�a�� �P��usH    �     �<��;�;�=��<�C8��   a   
   �	�l      �t4�} DD�9
�DTT�_��      a   
   �	l      �t4�} DD�9
�DTT�_��      a   
   �	Al      �t4�} DD�9
�DTT�_��      a   =   J,      ��@��     �
���2B0K�7 3�0�,2ܐ �,Ca��,�1P�8S� �p0�,A2P�l %   W� �?E�ۇ� �����v5��}	R�SD~}
R��H�o���PL@D�e%�M۾S�U
~M_B�C\�o���׺i%1����A�p �?Eq
R��H�_V����;EA Q�tR��H�9
�DT���C\       a      Ae��@    @T@$���PL@D�=	~nPIDL,�      a      ALm      @T@$���PL@D�=%1���?      a   R   J,      �@�S�� 1c ��7F �   # �` �2bP  S(# �`Д�� �T
�7�2B0K�7�2Dp���7�2F0Kp��,�1P��T� �p(�,A2P��d ��@ )   wp ���db��߶5�6~
R��H�o����6�D��W���F��m���PL@D�5��}
R��H�_ Q�t	R�
qM~m`��߷u�)�џ�@��Q�__B�C\�oە��p �?Ea_��5�5R��H�e
~���ۻa
~m_A��Q�o      a   8   G,      Č� ��a0  # �`ЈBA� �A#
1��,C ��,�0P��73�@�,�1K`T0D�# �`@�B�A8      @T@$����?�LG� �?E���4T�bV�o���H�?�Tg� ����׆5��nS�_Ӗ�D��W���p �?Eq
R��H�_�����	 H��"V5�u~R�
qMF5��
    a      AL� �A��0b`  �(��@      �dD����4�9
������I5��mO�$ aSIDL,�    a      A�� �A��0b`  �(��@      �dD����4�9
������I5��mO�$ aSIDL,�    a      D,      Č  �
B��2B0K0�!��@    7p ���tR�SD%��9
� Q�tR��H�E%1���?      a   
   �N�@     ���D��0D�$�Ct DD      a      ���� lt��      E�XT`�3�����׵91 ?0!I�D � Q�       a   \   P,      � �@�A!   �
G��� �Ag�p�<�
��� �A����8�
���� �A����4�

�� �A����0�
O��� �A����,��,3K��8���3   �5�w}	R�
qM>~
R��H�o��׺]
~}_B��Q����,���� ��D��W�r	R�SD�m^��G� �_ �D��9$H�7�5��9
�� Q�t	R�
qM~m\�o�5��}	R�SD~mV�_�א �����p �?Ea[�o�5�uoU�����,��'� �_ �D�C\�$H�OE�6      a   �  n     �@��C\�X�TyP9L��KA�	3 � �A	�@B)C9   \ rAȍ�r��dHA�2�d0�(�,�0P�A�@E��( �>��T��2P�C0
Ȉ�� |��g�W(r�"'p��	d���� `�`���� ��8m�# �``�C@s�M# �`��C � ���m0bp  �;w`# �`���� ����m0bp  V<y�# �`��C� ���m0bp  �<{�# �`���� ����y0bp  V=}�# �`��C� ���n0bp  �=�# �`���� ����n0bp  V>� 
# �`��C� ��t~0bp  ?� 
# �`���\'
0���2Dp)�,A1KPT|@�@E�z17e ���� ��@E 
�`T�!�@E��a�7p@�B4
2� x�,�2P�k ��p��p(��B�� Iq�@
w/H���p	�7�B�K��@E��;��@E��:��@E��9��@E �8��@� �-����� |5!�0W,r�"'pD0b`  XX�C�I�
�p��,C��,�3P�E�f0P!XM��p��`0��@���� �X��f0�@��2DR0bp  ` �:��,A7� �� �����0K@�
H8��,Ce# �` f���:���p��`0�pa���� �Z8�`�b0����2dZ0bp  `�;��,A78� �� �����0K �
�8��,C�# �` nA��>�|��@� �����@� |�6K� N6K ��5K0� Z5K@�0`0���@� ��D�f0P!e��@�@��<# �``�F�(1b`  \_x�q� �
A��,�s�@����@C@f0K��-��-0�q��T��sp�0���2��7����,�T�i0P(j@��@E�������AH�pC
d0���A0K�  W  �@�v����,���@�5�z@��tΛn ���m��_��A(H��"�m��o��D�N�ҳ S�c �״}
R��H�k ��4n��_�~^�IV8�o���5��/D���A�w�!=2����m�{ns��@��~�u���|�?����6��OD��� Q�d���,���V �6��OD촿�f ��y	R�SD~~	R�
qM~m����6@��][e ���}J�D��_g ��;m����6��6��OD蹍���@�7}�v ��|n����`�vO�Q(����:nO�9�#]KR8��P�o��,��vP�vM����6��OD��=$H�OE���
��[��㵕�M�0��}
G�D�CM�� �?E�״->�a�����$H�7�5��)����@��Λw@!=2Y`����E$H�OE����]�@���_T8�8�����a��o߹���0�6*R��H�_�F7��n}�Ӈ� �_ �D��-����@�v]�j �۴},Y�D~�N�;��ۿ!�Oa��_ӻa ����7p �?Eay�_�}O[��׽��M��@�v��l���=��@�uݛp ��vo����f@�6^_I�C\��c����9% ?0�A~]�7��n��_﹑0~�ӻ�/�$v@�6M�v ��<	U�D~�D�CM�!�Oa��o��D�~[o ��vm��o���[k �۴nr��v@�5_w ��}~+
R�
qM~M۔�4ϟ��?�Lw� �_ �D���$H�7�5��	>���R8�8�۷ N�΀���D�s���9n��_繥�]�g� �?E�׶@���JR8��P�__�S8�8�/������~�;������~��{ox�_�x_y ��4~$	R�
qM�nw�o�n����P�w�㷑 �?E���P�8��Ƈ��N�6��t���|�?���6�u~
R��H�ϛo �۽m��o�4[q ��7o��o罙���ym��o��i(H��"�n���㗑 �?E���`��N���]�|~	R�SD>n��o�I%H��� ,��~��V`�vO���$H�7�5��]$H�OE���@������/�$�@��n[w ���~
R��H����/!a��_�9���ב �?E��� �/@��d��ӻ���I�C\��t ��{m��o㻩~��f��6��OD��}$H�7�5��y~��9o��o��$H�7�5��%�^�d �׶n��_���~��|R��H�	 ���3`Wp ���    a   o  n     �@��C\�X�TyP9L��KA�	3 � �A	�@B)C9   \ rAȍ�r��dHA�2�d0�(�,�0P�A��@E�A, �>��T��2P�CȈ�� |��g�W(r�"'p��	d���� `�`���� ��8m�# �``�C@s0b`  �9�D0bp  `P������ X�܁� �A�)� ����n0bp  �<z�# �`еK# �` ���� ��UA����� t������ ��;4q�# �``�C 
0b`  �<�D0bp  `������ X���(� �Ag5� ���Ds0bp  �?�P
# �`��N# �` �`�)� ��A*��� t����A*�pC�`0�0���*�,A1KPT�@�@E��17l ���� ��@E��aT�p�@E��a��7w@�B42K�TB���(��p�A�/��$ąC*�� �CX��
d92� �2,m�0�X,��},�~,��,��# �`��9��9�����d���� `e1�p/Td0�РA0K�TDz��TTf0� ��2<P0bp  `0�;��,�7� ��� �����0KP�
�/��,�D# �` g��C;���pB`0�PY���� �AZ,���c0ܠ��2\X0bp  `��;��,�70� ��� �����0K�
9��,��# �` o��;���pT`0��y���� �A\L7���,�7P!��'t�`0P!����@� ������@� �u���@� ��V���@� �L�e0P!d`�,�TB��3P!e�ψ�� X���J� �A��\�0���28g4����@� ��,0�0�
��,C�Apm 0K��k0P��i0P j`+ipr0���20l����Q  V@�5ݟ��,��@�5��q �۵n��o׷�~�ӆ�����OD�1�}�� �_ �D��I~ߛu���z�?���@�u��d �״}
R��H�p ��4n����w�N��~�D�CM~�2��`ǠN�΀���
��[t ��xo��_������I�@����k ��;~	R�SD~~	R�
qM~m��_׶����;o{�_�7�c���}~���@��NۓaD�HV@�6�[u���z�?��pHςL�n���Ӷ@���t �۸~-I�D�CM�}
R��H���x@!=2�C��Q�o[r ��vn~��V7�xm���ߧpN�;�d��o�~��H�C\��[`���!�mۖ@��m_D��Q�[g ��7n����m����� N�΀���D�s\���Q�_��0�<n��_����a���i(�����}*R��H�_��@�6N[������F7��n���ۇ� �_ �D��u����@���y ��|},Y�D~�N�;��ۿ!�Oa��o�8O�l ��}n��o��
H�OEX��ߴ�
~�o ��}m��oӹa~]��@���۔�џ��?�L@����b���y��۶@�5��S ���e ��5np�_��@�6M_I�C\��_BU8�_8��P�/D���A�i@��t�[x ��um��o��D���u���z�?��0�zJ�D��o[z ��}nr�۷� ����״	>�߁�,��&@�vni������&�(D�K�� ����߷ N�΀���D�se ��4n��_빍~���@��m[d����$H�OE���~�뇒N�;����N�΀�K�?��
>nI�C\�����׸�㷑 �?E���@���[s ���n��o��D��@����:�/�$�6�u~
R��H�ϛy ��=m��o��D�~�y���=^��@�6~���,��V0�9~	R�SD�~!	R�
qM>n��o��M$H�OE������{o��_�0����:��w� �?E�� ����OD쵿��p���u��@�5������}
R��H����/!a��o��D�^��~���@�u�_G��Q�����9��VP�8��� �/@��t	R�
qM�m��_��
���{n��o���$H�7�5���~���)�m�f`�5o��	 ���3`6@�v��b����~}�G� �_ �Db�����$H�7�5��H�7�5c���=     a     c     �O9�@��_��[A�W�S�H�Dy�PE0@�@	AB)C9   �
��
	��,C �,�0PQ�(��@��u )} # �`��|�p��,�@# �` �p�7K�
7�2F0bp  `@i�y��p��,Á# �` ���7K�
7(�2$J0bp  `�m�y��p#��,��# �` ����X�
���� ��B��7KP
7@�2<P0bp  `�s �,5� U`0�I���� �8ԁ)��,�4K0
Tf 	�,5P!��T�@9�,�5P!��\�`i�,6P!��@� `fP�h����0bp  �<{��
���,��# �`йJ�`0��ya0b`  �;��0K��|�`0P!�ħۅ��pC0
d0� �A0K   �   � �_ �D��=~O_HU8�_8��P�/D���A��ߵ~Λb@������,�ۖP�{~�FP�{�ߧ� �_ �D��AM��!�3NE0D3Y��߸~����4ϟ��?�Lg� �_ �D��Y$H�7�5���
>� Q�d����xm������4�G�?!�t
	R�SD~~	R�
qM~mq���8���7�xo�����D�\A��Q�_�F�C\��_�S8�8�/���� �?E��&W�<��67�5o����w
R��H����,��0�{~	R�SD�m���Ӹnz���7��}
R��H���E�C\��_D��Q���d����e$H�7�5��-$H�OE���~��E%H��� ,��
>�_B��Q��C��Q��[a@��9n�[��:Ο�Q8��P�9(H��"~n����7�8mu�o�vP�{��v7�6	R�SD~ 	R�
qM~	R�
qM�}
R��H�������}$H�7�5��a$H�7�5��
H�OEXc����
~ݟ R8�8fv�o�G� �_ �D�`���1���āC\     a   v  g     �@�CA�O��_��[TyP9B��B��K1�	3 � �@�     '` �]�ɅA��H�A�A$1��$d0��A0K TD\�d0P�Bpd0P�D0d0P!�A�dp� �pD\����� `�`�!n ��
7��2C0KPt�,A1P�/�
���,��,�1P����@��s�� ���r@v0�0��2 I0bp  `����,�7�P��2(K0bp  `����,�7�p��20M0bp  ` ���,A7ܐ��28O0bp  ` ���,7ܰ��2@Q0bp  `@S��,�6����2HS0bp  ``U��,�6����2PU0bp  `�W(��,A6���2XW0bp  `�8��,6K�
Tdp	�,A6P!B�h��9�,�6P!�p��i�,A7P!0��@� tf��|��2bp  VK� # �`НX��7`@�
�����@� ��.�
g0`0� c\����,T�0�!�9�!W� �
(��,�P�,�h8�   �`������(H��"~
R��H�oe�����
�N߁R8�8��V@�5m_��,��0�8o��_��~���mr��F0�yn��_��^[k ��9 DD�A$H�OE��a$H�7�5���~��60��nSK�X�D��e�C=ҁ\���_8��P�/D���A\�U8�_8��P�_�B�L?1�=(H��">n���,�t
	R�SD�mv���v@�5�_�Q8��P�u$H�7�5���
>�d����1$H�OE���~}�9m����vp���7�dw���6`����q~m�67��n��_ӹ�~��}
R��H���h�������@�8~�G�C\������Q�9>_�j ������"H`��_�{~[j���%��[d����9% ?0�e~]�0�wmq�o�@�u�c ������ny�_�5>O���4ϟ��?�L�� �_ �D��i$H�7�5��>�[i ���~P�D��_�K�?��~�㇐ �?E��g�N�;����N�΀�K�?�y$H�7�5��a~]�g� �?E���g�5��	�)��߅�,��F`�����!~}︮�W� �_ �D��QH��"E��Q���`����m$H�7�5��I~�C��Q���k ��nU	�<�$ q	R�SD�n����&5�r
R��H�����/!a��_۴-~��9ou��ӦW�w��'� �?E��� �/@��t	R�
qM�}$	R�
qM~o����`����)����
��G�C\���i ��8m��_��	 ���3`G� �_ �D\��C\        a   J  f     �@�AA�PE@Q
��@	   �p�#Pr�%g!wA%q�r��Si1�_��\�1�SIA�qb`q9A�0�b��p�F��,CP�,�0P�Apc0P�C0c0P�D�c0P�B�c0P�Dpc0P�D0c0P�D�c0P!�B�c0P�Bpc0P�B0c0P�D�c0P�C�c0P�Dpc0P�C0cp
��\4�A7p�	d���� `�0
�Ixp�7i`���IEp�ܝB��@E��A��0P�A�@E@�#	 �`����}� �
Z)��,�1�
���,Á���$��@E �pT
��p��`0ˠ,�u� ��,3P��"(����2P0�l(�
-��,C�� �
���,��)D0b�  bP����v�����A� ��H��,4K �H��@EE� 
T��4P�E��@�`Y@�4P�C$A�c0��� �T�
W)��,Ce���\��@E��P
T�`�@E`}T�
B*��,��� ��,�6P�C&`��6P�Cf`���6P@��`�
C8��,��G
� W�\0�0��2p]�D#
 �` ?q�P�P�<��,� ��D_�x��,���@E�}�7PY��
T��7P��'�@E�}�7P��gy�b0K J�K���@Ea���@E@a@`0P�D@`0P�D@`0P�C�T�j �<���@E�a`��@E@a�`0P�E``�� �c0Pib��@E���:H�&� 
T���4Phb �@E��8H�#� 
T�Ѓ4Ppb`�@E��>H'� 
T���4Ppb�ҭCI�pCd0� �A0KP  S  �@�5�g����}(H��"~o��_�E>����N��~��V�8���"c����-(H��"�m��_��m�N��=(H��"�me��&u �9�dh���&��<�;EA�}m����F@�v�����U~���Yj ��x} DD�9�^m ��;~	R�SD~~		R�
qM~m����9o��_Ӵ�>O뽑~}�6@��N[v���6^�!(~m���|nQ�9�#�w������NQ��F���[d����E(H��">nq�o��$H�OE���~N۸�>~�a���u_�����5Yc���u~��}n����;}	R�
qM�nt�_׹�~���g�:]��%>���)$H�OE���~}�P�x_�ǡ �?E�״��}�FP�:���p�u}�yn��_�|]�6P��~צp�u}�yo�����0��m��_�}]�� �_ �D�5m�����m��_ӹ
~��=}
R��H���s���;_ӽ�~Nۻ~m㵾[i����]봙�N���$H�7�5��
H�OEXh@�紝�e C\S�?�|m��_�}]��@�u_�w@��}o��tn��_۽�~m�u�[y@��}��b��续
��k���6^��~]�u��S ����ߵ�~m���n����]��^�=n��_�}m��p���׺ny�_�e >��NQ��g��^��
�M�P��~�7� ����״�~��6P�{��&P�:}�v� ��gD����4�!(H��"~m��_׷�
>��j ���}	R�
qM�ms�_Ӹi�^��~��p��~׽m~�_�x���6�=n��_�x��k@�����A��Q�_�G�C\���r@��}�_�S8�8�/��VG��}[u@���m��9nf��&@�u�d����a$H�OE��Y�)�яv C\S�?ռ}$U�D~�D�CM�!�Oa����ס �_ �D��~��&G�v�_��,��6u �/8�t	R�SD�~	R�
qM>nl���א �?E��f� ��K��w����}	R�SD�n��_�|��Fp����|oz���5�l@����߄�,����(D�KHF���۽�~m�F�8��G�%���<m��_��!~���n��_�w�߷� �?E���p����4	R�
qM�mP���4
�HV@��M[�����$H�7�5��]>�׻Y~N��]$H�7�5���~��&0��}H�D��~��v@����a����]�|��G� �_ �DXk���:��Wp ���d����~�L     a   (  Z,      �@�A��C!P4P �$r�"��L �
�@�A����5P�B��@E@
A:\�)�p
T���5P�B��@E�
A,\�+�p
T���5bp  )L�5ܐ��2D0bP  f��0b`  ]*�C0K
7,�2F0bP  f
�0b`  +�C0b`  ]+��0K 
78�2H0bP  fP
�0b`  ,�C0b`  ],��0K�7D` ��� ����;� �AG�� �AW� �8�
T��,��# �``�# �`���;# �`��=��,A3K�Tp��B2P�A#�,�3P����1P�.��@E`<|PT�
�@E`<�PT�C�,A4P )��0P +��pdp0���2HSpe�0K@�P�*L�4P OH�
B��,Ce�} ��,�5P �XT�b�E5P��eTg!�@E�YJ5PpS
T��T�~ �
A��,������   �0�=}U�D~�D�CM�!�Oa��_�6�wmZ���6@�6��a����!(H��"�m�����5��}

R��H�������M�&V��}�P�9o�V7��ne���v��6�7nq���g� �_ �D���>���A$H�7�5��Iv7�zmc���w~	R�SD~~	R�
qM~mNOC1�p4��L&7�xo��o�m
>�_A��Q�__�S8�8�/���6��n����md���7n��o�5my����U�=���U��~�f@�6}��,��V�8�0�{	R�SD�mo����W�7_�F7�9~	R�
qM>n`��7o����w� �����f7�y	R�SD>n���m���ߦ0��~		R�SD�}	R�SD�n^�o�8}G�D�CM�6��m_�o�wo����7}
R��H�����/!aj�o��W�8o�P�7_�6P�8_��6��~	R�
qM�}
R��H��[d@��|����Q�M��6�w	R�
qM~~R�SD�W�8_�f6�uo��oӹ��M�P��m�'�N�΀����� H��"�5�umx����p ���d����6       a   (  Z,      �@�A��C!P4P �$r�"��L �
�@�A����5P�B��@E@
A:\�)�p
T���5P�B��@E�
A,\�+�p
T���5bp  )L�5ܐ��2D0bP  f��0b`  ]*�C0b`  �*��0K
70�2F0bP  f 
�0b`  ]+�C0b`  �+��0K 
7<�2H0bP  f`
�0b`  ],�C0b`  �,��0K�7Ha ��� ����;� �AW�� �Ag� �8�
���,��# �``� # �`��<��,A3K�Tp��B2P�A#�,�3P����1P�.��@E`<|PT�
�@E`<�PT�C�,A4P )��0P +��pdp0���2HSpe�0K@�P�*L�4P OH�
B��,Ce�} ��,�5P �XT�b�E5P��eTg!�@E�YJ5PpS
T��T�~ �
A��,������   �W�8]��W�9m��0�=m��_�FP�8]ߦ5�;ov���v0�;~
R��H�o[e����e
~}���,��67�ym~�oӺ�
>�X����[���E~N׻�>���}[����(H��"~mb��۷~	R�
qM�mx���@T@$���뵍�~��I$H�OE��9$H�7�5��9=
�����ODHD3�����$H�OE��aT����5�B�L?1�8���3`���ak�ז6��n����5ol��FV��}�&P�8]��W�9]��W�9mז7��n]���xm\�_�m��oӷ�
��`@��t���,��V@�7�[X�����A��Q�o�����
>~�d ��4G�D�CM� �����0��}	R�
qM�n�����}	R�SD>n���ߦ0��~		R�SD�}	R�SD�n_��wo^�o�8mh�o��P��~�7� �_ �D��=!
��F7��mj�o��6��n���5}	R�
qM�}
R��H��e �۴}	R�
qM~~R�SDf6�uoX�_�&@�6�����~H�D��-�~�� H��"�0�{og�o��p ���d����6       a   r       �@�A��C!P4P �$r�"��L �
�@���@E��`�(�`)�`�)�`*�`�*�`+�`�+�`,�`# �`��$Y�
���,�p# �``~`# �`Х8�
G��,Q# �`ЭB:��,�1K �

�� ����:� �A�
�70r`��� �A�0�,��,�7���24Q0bP  f�
�0b`  �,�C0�݁�28O0b`  ]-��0K �@��pCE`0� Y��A� �A+�È�� t���p��f0�0Q���� t�P�,A5KP�t�
���,õ# �``�`# �`��=�
[(��,�# �`��B>��,�6K��p��@E�/T�p�P�xщ4P9@�љ4K�
T��
�@E`x��T���@E�x����@E�|�`T�G�@E�|�`T��ƥA�pC@`0�b����,�T� BT��E7w �dP���(�,����@E���[��@E��\��@E�e`��@E��BW
T\0d0Ppe����)�pC0
d0� �A0K��
� 	�7��@�i��,�TD4���j��+��@E�i�
|0P�F�T����l����@E i�|0bp  _I��,�A� ��?��p�`0˰l� �A�h!���pC�`0��n� �A�iA���p��`0��p� �A�ja���p��`0�r� �Ak����p�`0�0t� �A'l����,A���@E�Ձh��@E��i��,�T���T���T������@E`���@E`���@E`�m��@E�܁m��,AT��T��T��T���0���2�������,T���T~��T�z0PH{���@E 큢���\�7m@�j��,�h8 V  �� �_ �D���
>�[e@��{�[d���4��@���[r �׽}

R��H�o�e@��tn[�����(���3`~mt���Ǡ �_ �D��~��m]�_����W����[o���9^�67��n��_�n��_봎�a@����͂,�׺�
~^[����IvP�z��@�5�b@��4n�C��Q��ߍ�C\�_���4�G�?!�d��_�q~���~���m��_��~�ӷ� �����V`��N۸�~���@��^X����l ��:nw���P�z���� �_ �D��=~]��`��N��!$H�OE���
~_���㵽
>~�Q8��PӅ(H�OE�5m|���6P�9��ב �����f`�u���%$H�OE���(H�OE�unh�o�G� �?E�׵�Mߺ�~��5o��_��M���ۼ�
~~_OV8�_���5��/D���A�Ȃ,�״�
�����tn��o�wn��_��Q(H��"�~.R��H�_߷� �_ �D��~	R�
qM>o��_�vM����
~������(H�OE��}R�SDV��u���Nh���}��wRN�N�;��2��`@�u��f@���]g��׻�
�]�d ���n��_繑~M�{m�����m��_��nc�_��n�W����߈�C\�_�g� ����׷�
������(H��"~m��_縞�q���9^�@����̂,����@���3`~�/���P�6}�W� ����ߦ@����b@����A��Q�_�OR8��P�_m��׸]�VP�z���P�6}��� �?E�׸�
��̂,����(H�7�5��~N�D���D�s����m~]�f7��n��_�|�˂,���]$H�OE���~}��@�un[g ���m��_Ӻ�
��[����e(H��">o��_뺽e���5���P�w~�P�9��V`�5���Y(H��"�~	R�
qM>~	R�SD�n��_�n��C\�_�א �?E��ǣ �������(H�7�5��m��_���(H�OE��n�����~	R�SD�~%R��H�_�`�5n���(H�OE��m��_���(H�7�5�uma���;~:
R�SD~�_��,����(D�KHF�d ��6m����xo��_봝����u��� ���� �?E��� ������ ����ۆ7�{}	R�
qM~n��_�vo��_��~���m��_��	 ���3`&@�5�[q���:m�v6�vm��_㼮_�,a��_߻^���C\      a     Z,      �@�A��C!P4P �$r�"��L �
�@�A����5P�BP�@E@
A8\�)�p
T���5P�BP�@E�
A*\�+�p
T���5bp  )L�5ܐ��2D0bP  f��0b`  ]*�C0K
7,�2F0bP  f
�0b`  +�C0K 
74�2H0bP  f@
�0b`  �+�C0K�7<�2$J0bP  fp
�0b`  �,�C0K�7D�2,L0bP  f�
�0b`  ]-�C0K��4��@E�
*$�4���<��1P,����1K 
T�C�@E`<xPTƣ�@E�<�P�D��0P (��0P �Js �
���,�4u ��,5P��$H2ф4� ��2TVpg�0Kp�\b�D5P(OT-XF5PpR
T��Tg1�@E�YNut�0���2X0K�i8  �   �QN�N�;��2��`�W�6_�&0��nk���W��^��@�6�[����!(H��"�mZ��Ӗ5��}

R��H���۴n�����6�7nt���g� �_ �D���>���A$H�7�5�������I��4�G�?!�t	R�SD~n`��7ox���6m����7m��o��$H�OE������8���3`���ao��ۖ6��ne���v�&V�<~�� ������P�8^�&7�9mq���60��n\�_�m��o��1(H��">n����w� �?E��0�}mm��qN�;�t	R�
qM>~	R�
qM�np��緐 �?E�㗐 �?E�߶W�8^�W� �?E��0�|n^�o�8mh�o��U�6�FV�;~�V�8~�7� �_ �D��=!
���W��^�6�vos����P��^�P��^߆0��}
R��H��a����=$H�7�5��A�M۶P�;n��6�w	R�
qM~~R�SD�5�|mf�_��5�um~�oӹ�>���	 ���3`vG�6�c@��}�,ag�o��U�=���p ���     a   B  c     �@�	%@�@
PT# eP%  �0r�#�Q %�A )r2�� d0��A0K TD\`0P�B0��@E����@E A-��@E A,��@��A-��@E �*��@E@�)��@E`�(��@E����%\p�w�
Ae����Dpw�A��@��0���2G0b`  e B�8�
���,�# �`P�0��,A3ˠ,ψ�� ��+n0K�� �A�����,A3P�x���8�Ѐ�1P�Ac�p��,�'��D��@E ��Tf �@E K<�
B��,���
���,�D��p�&`0�PY�,�5Kp
Tl`�C5K�
T�,A7܀��2h[0b`  h�"A��,7P����@E`m>�
T��@E@
�h�l|��t��A�@E�p`�
T
�@E�pb�
T��@E�pp�
7���,���`0K |���7z@�B�b��@�   �`�u���}(H��"~o���66��nu��~�L&�8���"]��,���V������ �_ �D���
~^�e@��z��c ��4 DD�I$H�OE��1$H�7�5��Y~}�&6��n��_����aD�HF0�=
R��H��B��Q�o��߻�>��E~]�w~"G�D�CM�7�y	R�
qM�no���v��V@�9��B��Q�[f��ۼ)~m�67��~
R��H��_��z^e@��|]_G�C\��[c@�������Q��~m�0�=m��_׸!~m�8mr����u��8�[b ���nh�_�z�^B\S�?]HU8�_8��P�/D���A�d@���M߁�,��� ����߶V�9�߆@����`����$H�OE���~}��N�΀�K�?�~m�x}	R�
qM�nd�_׺�~N��� �?E��vw ��F?n��_Ӻy
~��` �߹nq�_�4�߆�,��6�7ol�_�yn_��,��� �����W� �?E���� �?E�㖇���;EA[_��zN�D��Q��[���9~�׶~M�vV�6��G� �_ �D��9!
���8��G�%YZ��t�����?E�5�6} 	R�
qM~	R�SD~
	R�
qM�mO���4
�H`��M��]$H�7�5��	 ���3`�V�<��G� �_ �D�d@��_��C\      a   [   K,      �@��=# 5@�@	 � �A �
�B����T�@E���T<R� # �`���4780bP  fP�0�@Ĉ�� t���,A1KP� �A
� 7
�2G0K�� �sx�)7�2I0K�h8   1   �PN�N�;��2��`�E�����Q8��P��
�����׺m~��5��m\�oӺ]
�m�����(H��"~mO�49�4�u
~� Q�t	R�
qM~mZ���99
���DD��8�dd���g� �?E��6�6N�D���D�s����Q�	 ���3`6F�6}����� H��"V6��}R�
qM     a   *  d     D	�C��_��[Ty�A�S!L��B��K1�	3 � �A	  �
CG����@E�ITLPapBq# �`�тGpr�
���,1�őA1KPTa
�p�d0�`�A0KpT�`��7P!XF|�
B��,�# �` ����|�
��,��# �` �Д�x�
��,�# �` ����t�
���,��# �` ����p�
���,# �` �0�A�l�
L��,�4# �` �P��h�
��,U# �` �p��d�
���,�u# �` 搱�`��@� �`�d��!�,�6P!�#�l��Q�,7P!���t���3K�
TBg�,�7P! # �``�C
��AD# �`�� �u� �
��,��@��|�a0P!`@�p��2b����   �   ��D��0D60�zoy���x��vW�8��7�6~
R��H�o߁R8�8��נ �_ �D���
~^����
�m�c@��<����4ϟ��?�L�� �_ �D��i$H�7�5���~ Q�tP�D��_�K�?�M~M�� �?E�燑 ����ׇ� �?E��� �����7�N�;����N�΀�K�?��
>n[��߷=F�P�d����rN��~�D�CM�!�Oq	R�SD>"W�D~�D�CM~�2��`0�=o�����m����}
R��H����״��w� �_ �D��]ҳ �)$H�OE����[��z�_��,���7�9~	R�SD�n��_뷑 �����7�x~	R�SD>~	R�
qM�nQ	�<�$ a����ǐ �?E��'� �?E���v�=��y~!G�D�CM&@�5]`���-~��)~���E(H��"~n�����f�uM�Y>N��۴1~��Q~M�� �/@��dv�뗑 �����7� �_ �D�������3Ye ���~	R�
qM>	R�
qM~~R�SDv0�|mo�_�'�N�΀a����
~�[c@��<��,a����&7�vn����x�/�$Wp ���      a   4  d     D	�C��_��[Ty�A�S!L��B��K1�	3 ��@	  �urq�
��,C0�,�0P)��B���� ��f\���
7f`���wFd�,A1P+�
~��,��,�1P����@��q�
7� �H� ��g0K�
7k ��� ��B�g0K�
7g �L� ���sf0K�
7 f ��� ��Cde0K�
7(e �P� ���Td0K�
70d ��� ��CEc0K�
78c �T� ���uc0K�
7@v ��� ��Cw0K��`�\�5K�
T�P��@� d�4K�
T�FA��@� l�3K�
T�,�7P!�(��@� xl�� ���)�B� ����Kב7`@�
����@� ��-�
h�
d0� �A0K0   �   ��D��0D�@�u�e���t��V7�wmq�_�9^�~�[����-(H��"�}J�D��_[a����
��_��,��`�5��!�ޛ��߶��`���	�^_��,�ק� ������V�5��&�(D�K�@T@$�T8�8�����aP�p4�D��Q��F�C\�_f �׵m�����7�x	R�SD~}	R�
qM�~#I�D�CM~}N�D���D�sg ��t���"H`s�o��`�5��=F�P�d��_׵->ϛf������E��Q�ϟ�U8�_8��P�_�B�L?1ā\���_8��P�/D���Ad���t���0�5
R��H���a����](H��">o���,�t
	R�SD�m��_�9~c�����
>~�e ��4ow��~�LW� �_ �D��Q$H�OE��I~M�8~	R�
qM>~	R�
qM�~	R�SD>np�_�{�C��Q��D��Q���b�������5]��,��7�8m{���ym��_ӹE-H��4�"Yb����M(H��"�n��_�9��������7��}	R�
qM>	R�
qM~~R�SD�� �����'�N�΀Y��t���mn�o�&7�v}R��H�M9
�9�� �dt�o�Wp ���d����      a   [   K,      �@��=# 5@�@	 � �A �
�B����T�@E���T<R� # �`���4780bP  fP�0�@Ĉ�� t���,A1KP� �A
� 7
�2G0K�� �sx�)7�2I0K�h8   1   �PN�N�;��2��`�E�����Q8��P��
�����׺m~��5��m\�oӺ]
�m�����(H��"~mO�49�4�u
~� Q�t	R�
qM~mZ���99
���DD��8�dd���g� �?E��6�6N�D���D�s����Q�	 ���3`6F�6}����� H��"V6��}R�
qM     a   5   E,      � �    �
BA����� xe�$b0� d0� �,��@"   7PN�N�;��2��`GpN�;�tN�D���D�sԂ4�p MC,�=F�P�dW�o�Y~����(D�KM?0�	 ���3`�5�5oR�BD�$ q DD�M9
�9�� �dX�o��8���4�"     a   |   N,      � �    �
�@�A����2bP  d��0bP  d��0bP  d��0bP  d��0�@g0�Pg0�`gp��:�0�,�2܀$g0ܐ g0ܠ gp��:�P�,�2��8g0��8g0��4gp��:�p �,A2K�T`���1K�TBb�,�2P!�# �`�z��a7�2L0K�h8   B   �PN�N�;��2��`�5�xmN��8�/8�d`���5��~
G�D�CMV6�9oT�_ۖ6�z
R��H�o���׺I�N�66��nX�o�g� �_ �D��U
~� Q�dg����)$H�7�5���
~����ۼ�
~~_A��Q�_�����8���3`���a_��ۖ5��~	R�
qM�mj���fF�:���߹�	>oa���7p �?Eah���'�N�΀���״u
���,aZ�o�p ���t	R�SD�
     a     k     �@A�@P4PQ�Pp  �#
7
�2K0K0TD�0�@E`	_2P���%# �``��DQ� ���
�,�1K`T0D!# �`P�B�qg@pt9r�pg�� # �`��B,C0�`��2Hp���,A2Pi�pTB�E7`@���,�jpc rc�]A��dD�Ag�]gqaܡ�}A� @�A�A7��C�M��@E$�K��@E��J��@E��?��@E�MI��@E�M>��@E M=��@E@M<��@E�M;���A� ��9��,����A� \��D��@C@�3bp  �>�0
��7� ��� ���J�Ԉ�� �:�1K@
78�2Tc� ����)7��)��,�%�,�5Pك5
`0Px���@E�Y{ �g�TD��`0bP  dp21ˀq�p�(��p9r�p�
�e ��� h)��7� ��\b
0K��l�	�@E i:��t�����rB �Dr�\�$��A # �`��9��t�pn�
Tn���6P��mp�v�.�pC `0��}�� �`0K ���7P@�]�7�@�W
�
�

�b0P!a@�@E��:T�P
TH�C5K@�d0P�� b0P�� b0P�� b0P�� bp�p�0���2��7
� �g0Kp�a`R�J�Qw
� �
�-��,���,A����B  �@�5����,���7��nR��8�/8�d��_�m�m�zmW�CM��,�~��Ǡ �_ �D���]�@�uo��R8�8��7�9
R��H�[���DL�D��
>������d���_8��P�_�B�L?1��
~��c �����:om����@�6��g ��x} DD��~��fV����W� �?E�痐 �����&@�umf ��wm}�_�)�}��m��_�9~]�(~���"H`h����m��o��n����������$��5��%���;~
R��H���m ���n���,�t	R�SD�m���,Ȥ�7��n��_�v�[d ��4G�D�CMv7��} 	R�
qM�n��_׹Y~m��� �?E�����5�߽ޛa ��wo��o׶1 ~�����gN�΀���D�s�r ��wnX�CM�p MC,�1���7��m��_�:N�r ��8m��_�~��~
R��H��[q������6� R�4JV8�_���5��/D���A�I�C\��_���Q��
~�[f���w��� ��F��[l ���n��_׽�~m�F7�;o��_��~���ns���@�5��BU8�_8��P�/D���A�k ��4me��m��o�x��]��8��#8M�gD����4���m׆`�6���](���3`�}
R��H�_[�H�0!0!Ns	R�
qM�}
P�D��_�K�?��~��v`�5o۸	(~���"H`|�_ﻝ�N�!~��6}	R�SD~m��_�
(�]��"HpN�D���D�s�HR8��P�_�g���z��G� �����G��MU�H�L�Xn��׼m��@�6]�G��Q��o ��wo��_���ҳ ��߈�,��8��G�#�`��_۹e)5�F���c��o��}(H��"�~	R�
qM>~	R�SD�~	R�SD>n��_�;n�f���v����NS�� ,�a$H�OE��q�]�yo��_ӵ~M��n��o۴n���,��f�8��G�%�n �۶n��_ӷ�M�@�5O[k ��}o��_���~��F� ��F��o�!=2���$H�OE���$H�7�5��E$H�7�5���
>�[��߽(�m��"H`��o׵N_G�C\�����P�/M@4��0D7�N�΀j������6@�u�����n��_�]_�,a��_��H�7�5     a   }   K,      �O9� E# %P    �$rA"�
E�����2P9A # �`����$# �``s@# �``t@# �`и�� �A
����pC���,�@# �``y�# �``z�# �`�Ђ� �Ag
��9��P0KPTDl@�@ED�0� P`0�`�,2K�TD�!�p���,�����   A   �5��nh����5��nm�o븹
~}���絕
>������(H��"~} DD�9!
���F�um���P�/��D�D4�@ց,�8�/��f6�xoPNC1?20!N#�����!$H�7�5���
>N�Bb�B�5�A��Q�_��㶥
�M���zoZ�o�5ml��뗐Y��u �;��2��`v5�w~R�SD6�vnY�_߼�
�͛����	(ց,�8vR��H�q
~�[����H�7�5      a   ~   K,      �O9� E# %PČ  �(r�"�
������l�@Ei�T0LPȈ�� ||�0ˈA� �A��7�2D0bP  f��pG�80KP��,A1P�a�0P2� �As�0b`  
.4�pCq��p�1��	��2G0b`  �+�1K�� �r��1PQ�
I��,����� D   F6�xml����6�yoi��׆F�5o[��߷q��׶�
~�����}
�}߁�,�ז5�5~ DD�9!
��V6�voOOC1�p4��L Y����D�sB�C\�_��P̏LDL��H�5��mn���7�6}
�u �;�t	�u �[��CM�!�Oao���
���A��Q�_�����	(ց,�8fp�o�m��׷u>�׵�
~N����Q�i�M״�
~n����� H��"Wp ���dX�_�      a   K   H,      �O9� E# %  �
�A����Lň�� |tpňA� �A�A� ����� 4� W:�$`0�0���� t|�
�,A1b`  ]�1KP\��pC��,�`���  %   gPN�N�;��2��`��4�#�4�e
~��������5]�S8�8�/��VE�6���״}	>oX�_�F5��}R�SD�u ��F�}H�D��]
~][��ۺq
�} Q�tR��H�y
��_��C\       a   \   H,      �O9� E# E@�   �
Á���4�@cY1P1AU� ���J�� ���+� ���+������ 4�0# �`д����pC0��,�@# �`Љ-��,A1P�Bx�pb��,�`���   /   �5��nY�o�
�}�����I6�voNOC1�p4��L'�X���@ց,�8�/����4�#�4�]~���5�6}�u �;�db��g�Y��u �;��2��`�5��nc�o��m߆E�������Q�Y~m��5�v~R��H�m
~�_��C\��
~m      a   �   D,      ��� E% wIq� �Qq����$ �A��we�t&# �`Pzh#
 �`�假i�$� ���A0b`  e0Z0b lp_)�0��u�,�0b�  ^+�vi5b�  �*xإM��\���\�Ifeш�� �A+�A������A� ��)t`�)�u�\2b`  e`
E0bp  m��# �`�}��A1b l�g�a��L��AD��� S   V�8��G�#�`X��8�/8�dQ�CM�=��ԁ4��,��
~ΛS�4�4�����׸m^��4՟��?�L�e<������,+YV�4�/	�B�ԁ4�X�A9
��D�Cd]��4�/	�BX���i9H��9�� �db"iT��8�m%
�� ,�Iv�(D�KHF��6oU�CM�p MC,��~��6��md�S1�M6G�5~[��7ma"�HC �Q-H��4�"�X�H�Lј�aD�H�F���[����~��p �?Eak�����8��KM?0��~m�'� �_ �D��џ��?�L7p ���    q   !   2"��(q\��HQ^��h!k���1y���A~���Q����Q��!�	HR�%�hBY�'���́+����-�&蒋�0�*���3�.H��5�1h�7�2�Sn�9�7�C��;�9��     ]  �   ��   volatilestr.0str.1str.2str.3str.4str.5str.6str.7str.8str.9str.10str.11str.12str.13str.14str.15fp32_mul_for_ecgfp32_add_for_ecgfp32_sub_for_ecgfpcmp32fstoi_for_ecgfitos32_for_ecground_half_evenuint_quantdequant_inpdequant_kerrelureadModule_convolutionwriteModule_convolutionwrite_uint64writeInpPipewrite_float32fetchAll__loop_pipelining_on____i8__slice__i64__fetchKernelwriteInpPipePartialfetchHorSlicefetchPartialread_uint8loadForwardread_float32loadBackwardloadNeutralloadNeutralLastinputLoaderwrite_uint8kernelLoaderfetchInputLinearwrite_uint32fetchKernelLinearinputLoaderLinearkernelLoaderLinearpoolingoutput_modulecompute_mulcompute_accumulatecompute_mul_linearcompute_accumulate_linearconvengine17.0.0x86_64-unknown-linux-gnu<string>      