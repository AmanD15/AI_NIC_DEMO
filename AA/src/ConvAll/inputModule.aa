// Access the input tensor and write to input pipe
$module [inputModule]
$in(row_in rt ct chl_in rk pad : $uint<16> num_parts_1 : $uint<8> base_address : $uint<ADDRESS_WIDTH>)
$out()
$is
{
	m_factor := ($bitcast ($uint<32>) (ct*chl_in))
	m2_factor := (m_factor << 1)
	bit0 := (pad [] 0)
	bit1 := (pad [] 1)
	addr1 := ($mux bit0 m_factor 0)
	addr2 := ($mux bit0 0 m_factor)
	//addr3 := (addr1 + ($mux (bit1 | bit0) 0 m2_factor))
	//addr4 := (addr2 + ($mux bit1 0 m2_factor))
	mode_3 := (rk == 3)
	chl_in_ceil := ((chl_in + 7)>>3)
	
	$parallelblock [access_block]
	{	
		$call singleFetch (row_in ct pad chl_in_ceil num_parts_1 mode_3) ()
		$call loadInput_in1 (addr1 row_in ct chl_in pad num_parts_1 base_address) ()
		$call loadInput_in2 (addr2 row_in ct chl_in pad num_parts_1 base_address) ()
		//$call loadInput_in3 (addr3 row_in ct chl_in pad num_parts_1 base_address) ()
		//$guard (mode_3) $call loadInput_in4 (addr4 row_in ct chl_in pad num_parts_1 base_address) ()
	}
	//debug_output_pipe := 72
}

$module [singleFetch] $in (rt ct pad chl_in : $uint<16> max_parts : $uint<8> mode_3 : $uint<1>) $out  ()
$is
{
	$branchblock [block]
	{
		cnt_max := ((ct + (pad << 1))*chl_in)
		$dopipeline $depth 15 $fullrate
		$merge $entry $loopback
		$phi start := ($bitcast ($uint<1>) 1) $on $entry n_start $on $loopback
		$phi cnt := ($bitcast ($uint<16>) 1) $on $entry n_cnt $on $loopback
		$phi row := ($bitcast ($uint<16>) 0) $on $entry n_row $on $loopback
		$phi parts := 0 $on $entry n_parts $on $loopback
		$endmerge
		val_read1 := prev_core_ip1
		val_read2 := prev_core_ip2

		$volatile change := (cnt == cnt_max)
		n_cnt := ($mux change 1 (cnt+1))
		incr_row := (row + N_ROWS_S)
		update_row := ($mux change incr_row row)
		chng_prt := (update_row > rt)
		n_row := ($mux chng_prt 0 update_row)
		n_parts := ($mux chng_prt (parts + 1) parts)
		n_start := (n_row == 0)
		do_4 := (mode_3 & (~start))
		$volatile end := (incr_row > rt)
		$guard (~end) core_ip1 := val_read1
		$guard (~start) core_ip3 := val_read1
		$guard (~end) core_ip2 := val_read2
		$guard (do_4) core_ip4 := val_read2

		$while (n_parts <= max_parts)
	}
}

#define num 1
#include inputInner.aa
#define num 2
#include inputInner.aa
