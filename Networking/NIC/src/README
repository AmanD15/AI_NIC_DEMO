---------------------------------------------------------
NIC design with cortos queue Interfaces.
---------------------------------------------------------

	1. Cortos queue structure is availble in file ../InterfaceDataStructures.h
	2. This design assumes that the msgSizeInBytes for all queue is 4.
		as these interfaces right now contains 32 bit addresses only.

What do these files contain?

control.aa - NIC registers description 
decls.aa - All declerartions
general_utils.aa - 
memory_utils.aa - Memory access 
pipes.aa - All pipes
queue_utils.aa - queue modules (push, pop, acquirelock & releaselock)
receive_engine.aa - Daemon to store RX packet in memory
register_utils.aa - Module for NIC to access registers
rx_from_mac.aa - Parser separates header 
signals.aa - all signal declerations
transmit_engine.aa - Daemon to send Tx packet out



---------------------------------------------------------
Cortos queue data structure.
---------------------------------------------------------
typedef struct _CortosQueueHeader {
  uint32_t totalMsgs; // current total messages     +0
  uint32_t readIndex;				    +4
  uint32_t writeIndex;				    +8
  uint32_t length;				    +12
  uint32_t msgSizeInBytes;			    +16
  uint8_t *lock;				    +20
  uint8_t *bget_addr;				    +24
  // if misc == 1, then assume single writer and single reader and don't use locks
  uint32_t misc;				    +28
} CortosQueueHeader;

   
