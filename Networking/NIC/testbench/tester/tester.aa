// will get a packet from the tb
//     first 64-bits will specify the
//     number of 64-bit words to be
//     read from tb and then sent on
//     to the nic rx side.
$module [tbMacRxDaemon] 
	$in () $out () $is
{
	$branchblock[loop] {

		$dopipeline $depth 7 $fullrate
			$merge $entry $loopback $endmerge
			pkt_ctrl   := tb_to_mac_ctrl 
			pkt_data   := tb_to_mac_data 
			$volatile $split (pkt_ctrl 7 1 8) (u7 last keep)

			$volatile data_to_nic := ($concat last pkt_data keep)
			mac_to_nic_data := data_to_nic

		$while 1
	}
}


// forward data on nic -> mac pipe to testbench
$module [tbMacTxDaemon] $in () $out () $is
{
	$branchblock[loop] {
		$dopipeline $depth  7
		$merge $entry $loopback $endmerge
			from_nic := nic_to_mac_transmit_pipe
			$volatile $split (from_nic 1 64 8) (last dword bmask)

			mac_to_tb_data := dword
			mac_to_tb_ctrl := ($concat $zero<7> last bmask)	

		$while 1
		
	}
}


$module [tbAfbDaemon]
	$in () $out () $is
{
	$branchblock[loop] {
		$merge $entry loopback $endmerge
			// 64-bit tb -> tester request
			//
			//    rwbar, regindex, wdata
			//      1     8         32
			tb_req := tb_to_nic_slave_request
			$volatile $split (tb_req 23 1 8 32) (u23 rwbar rindex wdata)

			afb_req := ($concat $zero<1> rwbar (~$zero<4>) 
					($concat $zero<26> rindex $zero<2>) wdata)				

			AFB_NIC_REQUEST := afb_req
			afb_resp := AFB_NIC_RESPONSE

			$volatile $split (afb_resp 1 32) (error rdata)

			nic_slave_response_to_tb := rdata

		$place [loopback]
	}
}

$module [tbMemDaemon] $in () $out () $is
{
	$branchblock[loop] {
		$merge $entry loopback $endmerge
		
		req := MERGED_ACB_REQUEST
		$volatile $split (req 1 1 8 36 64)
					(lock rwbar bmask addr wdata)

		$volatile ctrl_word := ($concat $zero<19> rwbar bmask addr)
		TEST_SYSTEM_TO_TB_MEM := ctrl_word
		TEST_SYSTEM_TO_TB_MEM := wdata

		rdata := TB_MEM_TO_TEST_SYSTEM
		resp := ($concat $one<1> rdata)
		MERGED_ACB_RESPONSE := resp

		$place [loopback]
	}
}

$module [tbProcessorMemDaemon] $in () $out () $is
{
	$branchblock[loop] {
		$merge $entry loopback $endmerge
		
		// 64-bit
		// unused lock rwbar bmask addr
		//   18    1   1     8     36
		req0 := TB_PROCESSOR_TO_MEM
		req1 := TB_PROCESSOR_TO_MEM

		PROCESSOR_ACB_MEM_REQUEST :=
				($concat ($slice req0 45 0) req1)
		resp := PROCESSOR_ACB_MEM_RESPONSE
		$volatile $split (resp 1 64) (err rdata)
		MEM_TO_TB_PROCESSOR := rdata 

		$place [loopback]
	}
}

$module [tbEnableMacDaemon] $in () $out () $is
{
	$branchblock[loop] {
		$merge $entry loopback $endmerge
			MAC_ENABLE_8 := ($concat $zero<7> MAC_ENABLE)
		$place [loopback]
	}	
}

