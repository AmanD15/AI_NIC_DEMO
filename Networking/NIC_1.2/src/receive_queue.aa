// RECEIVE_QUEUE_COMMANDS
//   push         1
//   pop          2
//   status       3
$constant RxQ_PUSH   : $uint<4> := 1
$constant RxQ_POP    : $uint<4> := 2
$constant RxQ_STATUS : $uint<4> := 3

$constant RxQ_server_0 : $uint<4> := 0
$constant RxQ_server_1 : $uint<4> := 1
$constant RxQ_server_2 : $uint<4> := 2
$constant RxQ_server_3 : $uint<4> := 3


$module [exec_receive_queue_command]
	$in (opcode: $uint<8> wdata: $uint<32>) 
	$out (status: $uint<8> rdata: $uint<32>)
$is
{
	$volatile command := ($concat $one<1> opcode wdata)
	noblock_RECEIVE_QUEUE_COMMAND := command
	response := RECEIVE_QUEUE_RESPONSE
	$volatile $split (response 8 32) (status rdata)
}


$module [receive_queue_daemon] $in () $out () $is
{	
	$branchblock[loop] 
	{
		$dopipeline $depth 7 $fullrate
		$merge $entry $loopback
			$phi NENTRIES_0    := $zero<16> $on $entry n_NENTRIES_0 $on $loopback
			$phi NENTRIES_1    := $zero<16> $on $entry n_NENTRIES_1 $on $loopback
			$phi NENTRIES_2    := $zero<16> $on $entry n_NENTRIES_2 $on $loopback
			$phi NENTRIES_3    := $zero<16> $on $entry n_NENTRIES_3 $on $loopback
			$phi queue_command := noblock_RECEIVE_QUEUE_COMMAND $on $entry, $loopback
		$endmerge
	
		$volatile $split (queue_command 1 4 4 32) (valid server_id opcode wdata)	
		$volatile push   := (opcode == RxQ_PUSH)
		$volatile pop    := (opcode == RxQ_POP)
		$volatile status := (opcode == RxQ_STATUS)
		
		$volatile server_0 := (server_id == RxQ_server_0)
		$volatile server_1 := (server_id == RxQ_server_1)
		$volatile server_2 := (server_id == RxQ_server_2)
		$volatile server_3 := (server_id == RxQ_server_3)

		$volatile push_is_ok_0 := (push & (NENTRIES_0 < RxQ_MAX_NENTRIES) & server_0)
		$guard (push_is_ok_0) Rx_QUEUE_0 := wdata
		
		$volatile push_is_ok_1 := (push & (NENTRIES_1 < RxQ_MAX_NENTRIES) & server_1)
		$guard (push_is_ok_1) Rx_QUEUE_1 := wdata
		
		$volatile push_is_ok_2 := (push & (NENTRIES_2 < RxQ_MAX_NENTRIES) & server_2)
		$guard (push_is_ok_2) Rx_QUEUE_2 := wdata
		
		$volatile push_is_ok_3 := (push & (NENTRIES_3 < RxQ_MAX_NENTRIES) & server_3)
		$guard (push_is_ok_3) Rx_QUEUE_3 := wdata

		$volatile pop_is_ok_0 := (pop & (NENTRIES_0 > 0) & server_0)
		$guard (pop_is_ok_0) rdata := Rx_QUEUE_0
		
		$volatile pop_is_ok_1 := (pop & (NENTRIES_1 > 0) & server_1)
		$guard (pop_is_ok_1) rdata := Rx_QUEUE_1
		
		$volatile pop_is_ok_2 := (pop & (NENTRIES_2 > 0) & server_2)
		$guard (pop_is_ok_2) rdata := Rx_QUEUE_2
		
		$volatile pop_is_ok_3 := (pop & (NENTRIES_3 > 0) & server_3)
		$guard (pop_is_ok_3) rdata := Rx_QUEUE_3

		$volatile push_is_ok := (push_is_ok_0 | push_is_ok_1 | push_is_ok_2 | push_is_ok_3)
		$volatile pop_is_ok  := (pop_is_ok_0 | pop_is_ok_1 | pop_is_ok_2 | pop_is_ok_3)
	
		$volatile n_NENTRIES_0 :=
			($prioritymux
				push_is_ok_0  (NENTRIES_0 + 1)
				pop_is_ok_0   (NENTRIES_0 - 1)
				$default NENTRIES_0)
				
		$volatile n_NENTRIES_1 :=
			($prioritymux
				push_is_ok_1  (NENTRIES_1 + 1)
				pop_is_ok_1   (NENTRIES_1 - 1)
				$default NENTRIES_1)
				
		$volatile n_NENTRIES_2 :=
			($prioritymux
				push_is_ok_2  (NENTRIES_2 + 1)
				pop_is_ok_2   (NENTRIES_2 - 1)
				$default NENTRIES_2)
				
		$volatile n_NENTRIES_3 :=
			($prioritymux
				push_is_ok_3  (NENTRIES_3 + 1)
				pop_is_ok_3   (NENTRIES_3 - 1)
				$default NENTRIES_3)

		$volatile result_status  :=
			($excmux 
				push      ($mux push_is_ok $zero<8>  $one<8>)
				pop       ($mux pop_is_ok  $zero<8>  $one<8>))

		$volatile result_data :=
				($excmux 
					pop_is_ok rdata 
					status    ($excmux 
							server_0 ($bitcast ($uint<32>) NENTRIES_0)
							server_1 ($bitcast ($uint<32>) NENTRIES_1)
							server_2 ($bitcast ($uint<32>) NENTRIES_2)
							server_3 ($bitcast ($uint<32>) NENTRIES_3)))
							
		RECEIVE_QUEUE_RESPONSE := ($concat result_status result_data)
					
		$while 1
	}
}
