//
// There are three possible operations
//	push, pop and status
//
//  push 
//    if successful,     return_value = 0x0. 		(i.e., with last 3-bits 000)
//    if not successful, return_value = 0x2. 		(i.e., with last 3-bits 010)
//  pop 
//    if successful,     return_value = popped_value.	(i.e., with last 3-bits 000)
//    if not successful, return_value = 0x1.		(i.e., with last 3-bits 001)
//  status
//    return_value = number_of_entries.
//
// For push and pop, return_value(32-bits) is like
// (zero/popped_value   unused   push_status   pop_status)
//  	 [31:3]	   	 [2]	     [1]	   [0]
// Since byte addressable, for successful push/pop last 3 bits should always be zero.
//
$module [exec_transmit_queue_command]
	$in (server_id opcode: $uint<4> wdata: $uint<32>) 
	$out (rdata: $uint<32>)
$is
{
	$volatile command := ($concat server_id opcode wdata)
	TRANSMIT_QUEUE_COMMAND := command
	rdata := TRANSMIT_QUEUE_RESPONSE
}


$module [transmit_queue_daemon] $in () $out () $is
{	
	$branchblock[loop] 
	{
		// spin until number of buffers are set
		$merge $entry buffers_not_set_loopback $endmerge
		
		// If number of buffers not set -> Loopback
		$if (S_MAX_NENTRIES == 0) $then
			$place [buffers_not_set_loopback]
		$endif
		
		$dopipeline $depth 7 $fullrate
		$merge $entry $loopback
			$phi NENTRIES_0    := $zero<32> $on $entry n_NENTRIES_0 $on $loopback
			$phi NENTRIES_1    := $zero<32> $on $entry n_NENTRIES_1 $on $loopback
			$phi NENTRIES_2    := $zero<32> $on $entry n_NENTRIES_2 $on $loopback
			$phi NENTRIES_3    := $zero<32> $on $entry n_NENTRIES_3 $on $loopback
			$phi queue_command := TRANSMIT_QUEUE_COMMAND $on $entry, $loopback
		$endmerge
	
		$volatile $split (queue_command 4 4 32) (server_id opcode wdata)	
		$volatile push   := (opcode == PUSH)
		$volatile pop    := (opcode == POP)
		$volatile status := (opcode == STATUS)
		
		$volatile server_0 := (server_id == SERVER_0)
		$volatile server_1 := (server_id == SERVER_1)
		$volatile server_2 := (server_id == SERVER_2)
		$volatile server_3 := (server_id == SERVER_3)

		$volatile push_is_ok_0 := ($reduce & push (NENTRIES_0 < S_MAX_NENTRIES) server_0)
		$guard (push_is_ok_0) Tx_QUEUE_0 := wdata
		
		$volatile push_is_ok_1 := ($reduce & push (NENTRIES_1 < S_MAX_NENTRIES) server_1)
		$guard (push_is_ok_1) Tx_QUEUE_1 := wdata
		
		$volatile push_is_ok_2 := ($reduce & push (NENTRIES_2 < S_MAX_NENTRIES) server_2)
		$guard (push_is_ok_2) Tx_QUEUE_2 := wdata
		
		$volatile push_is_ok_3 := ($reduce & push (NENTRIES_3 < S_MAX_NENTRIES) server_3)
		$guard (push_is_ok_3) Tx_QUEUE_3 := wdata

		$volatile pop_is_ok_0 := ($reduce & pop (NENTRIES_0 > 0) server_0)
		$guard (pop_is_ok_0) rdata_0 := Tx_QUEUE_0
		
		$volatile pop_is_ok_1 := ($reduce & pop (NENTRIES_1 > 0) server_1)
		$guard (pop_is_ok_1) rdata_1 := Tx_QUEUE_1
		
		$volatile pop_is_ok_2 := ($reduce & pop (NENTRIES_2 > 0) server_2)
		$guard (pop_is_ok_2) rdata_2 := Tx_QUEUE_2
		
		$volatile pop_is_ok_3 := ($reduce & pop (NENTRIES_3 > 0) server_3)
		$guard (pop_is_ok_3) rdata_3 := Tx_QUEUE_3

		$volatile push_is_ok := ($reduce | push_is_ok_0 push_is_ok_1 push_is_ok_2 push_is_ok_3)
		$volatile pop_is_ok  := ($reduce | pop_is_ok_0  pop_is_ok_1  pop_is_ok_2  pop_is_ok_3)
	
		$volatile n_NENTRIES_0 :=
			($prioritymux
				push_is_ok_0  (NENTRIES_0 + 1)
				pop_is_ok_0   (NENTRIES_0 - 1)
				$default NENTRIES_0)
				
		$volatile n_NENTRIES_1 :=
			($prioritymux
				push_is_ok_1  (NENTRIES_1 + 1)
				pop_is_ok_1   (NENTRIES_1 - 1)
				$default NENTRIES_1)
				
		$volatile n_NENTRIES_2 :=
			($prioritymux
				push_is_ok_2  (NENTRIES_2 + 1)
				pop_is_ok_2   (NENTRIES_2 - 1)
				$default NENTRIES_2)
				
		$volatile n_NENTRIES_3 :=
			($prioritymux
				push_is_ok_3  (NENTRIES_3 + 1)
				pop_is_ok_3   (NENTRIES_3 - 1)
				$default NENTRIES_3)


		$volatile NENTRIES :=
				($excmux 
					server_0 NENTRIES_0
					server_1 NENTRIES_1
					server_2 NENTRIES_2
					server_3 NENTRIES_3)

		$volatile rdata :=
				($excmux 
					pop_is_ok_0	rdata_0
					pop_is_ok_1	rdata_1
					pop_is_ok_2 	rdata_2
					pop_is_ok_3 	rdata_3)
							
		$volatile result_data :=
				($excmux 
					push 	($mux push_is_ok $zero<32> ($bitcast ($uint<32>) 2))
					pop	($mux pop_is_ok  rdata     $one<32>)
					status  NENTRIES)
		
		TRANSMIT_QUEUE_RESPONSE := result_data
					
		$while 1
	}
}
