//
// There are five possible operations
//	fq_lock, fq_unlock, push, pop and status
//
//  fq_lock
//    if lock is available,     return_value = 0x0.
//    if lock is not available, return_value = 0x1.
//  fq_unlock
//    return_value = 0x0.
//  push 
//    if successful,     return_value = 0x0. 		(i.e., with last 3-bits 000)
//    if not successful, return_value = 0x2. 		(i.e., with last 3-bits 010)
//  pop 
//    if successful,     return_value = popped_value.	(i.e., with last 3-bits 000)
//    if not successful, return_value = 0x1.		(i.e., with last 3-bits 001)
//  status
//    return_value = number_of_entries.
//
// For push and pop, return_value(32-bits) is like
// (zero/popped_value   unused   push_status   pop_status)
//  	 [31:3]	   	 [2]	     [1]	   [0]
// Since byte addressable, for successful push/pop last 3 bits should always be zero.
//
$module [exec_free_queue_command]
	$in (server_id opcode: $uint<4> wdata: $uint<32>) 
	$out (rdata: $uint<32>) 
$is
{
	$volatile command := ($concat server_id opcode wdata)
	FREE_QUEUE_COMMAND := command
	rdata := FREE_QUEUE_RESPONSE
}


$module [free_queue_daemon] $in () $out () $is
{
	FREE_QUEUE_LOCK := 1

	$branchblock[loop] 
	{
		// spin until number of buffers are set
		$merge $entry buffers_not_set_loopback $endmerge
		
		// If number of buffers not set -> Loopback
		$if (S_MAX_NENTRIES == 0) $then
			$place [buffers_not_set_loopback]
		$endif
		
		$dopipeline $depth 7 $fullrate
		$merge $entry $loopback
			$phi NENTRIES     := $zero<32> $on $entry n_NENTRIES $on $loopback
			$phi LOCK_IS_FULL := $one<1> $on $entry n_LOCK_IS_FULL $on $loopback
			$phi queue_command := FREE_QUEUE_COMMAND $on $entry, $loopback
		$endmerge
	
		$volatile $split (queue_command 4 4 32) (server_id opcode wdata)	
		$volatile lock   := (opcode == FQ_LOCK)
		$volatile unlock := (opcode == FQ_UNLOCK)
		$volatile push   := (opcode == PUSH)
		$volatile pop    := (opcode == POP)
		$volatile status := (opcode == STATUS)
	
		$volatile lock_ok := (lock & LOCK_IS_FULL)
		$guard (lock_ok) lock_value := FREE_QUEUE_LOCK

		$volatile unlock_ok := (unlock & (~LOCK_IS_FULL))
		$guard (unlock_ok) FREE_QUEUE_LOCK := 1

		$volatile push_is_ok := (push & (NENTRIES < S_MAX_NENTRIES))
		$guard (push_is_ok) FREE_QUEUE := wdata

		$volatile pop_is_ok := (pop & (NENTRIES > 0))
		$guard (pop_is_ok) rdata := FREE_QUEUE

	
		$volatile n_NENTRIES :=
			($prioritymux
				push_is_ok  (NENTRIES + 1)
				pop_is_ok   (NENTRIES - 1)
				$default NENTRIES)

		$volatile n_LOCK_IS_FULL :=
			($prioritymux
				lock_ok   $zero<1>
				unlock_ok $one<1>
				$default LOCK_IS_FULL)

		$volatile result_data :=
				($excmux 
					lock 	($mux lock_ok $zero<32> $one<32>)
					unlock 	$zero<32>
					push 	($mux push_is_ok $zero<32> ($bitcast ($uint<32>) 2))
					pop	($mux pop_is_ok  rdata     $one<32>)
					status  NENTRIES)
					
		FREE_QUEUE_RESPONSE := result_data

		$while 1
	}
}

