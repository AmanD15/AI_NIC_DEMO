//
// There are four possible operations
//	fq_lock, fq_unlock, push, pop
//
//  fq_lock
//    if lock is available,     return_value = 0, push_status = 0, pop_status = 0, nentries = number_of_entries.
//    if lock is not available, return_value = 1, push_status = 0, pop_status = 0, nentries = number_of_entries.
//  fq_unlock
//    return_value = 0, push_status = pop_status = 0, nentries = number of entries.
//  push 
//    if successful,     return_value = 0, push_status = 0, pop_status = 0, nentries = number_of_entries.
//    if not successful, return_value = 0, push_status = 1, pop_status = 0, nentries = number_of_entries.
//  pop 
//    if successful,     return_value = popped_value, push_status = 0, pop_status = 0, nentries = number_of_entries.
//    if not successful, return_value = 0,            push_status = 0, pop_status = 1, nentries = number_of_entries.
//
$module [exec_free_queue_command]
	$in (server_id opcode: $uint<4> wdata: $uint<32>) 
	$out (nentries: $uint<16> push_status pop_status: $uint<8> rdata: $uint<32>) 
$is
{
	$volatile command := ($concat server_id opcode wdata)
	FREE_QUEUE_COMMAND := command
	response := FREE_QUEUE_RESPONSE
	$volatile $split (response 16 8 8 32) (nentries push_status pop_status rdata)
}




$module [free_queue_daemon] $in () $out () $is
{
	FREE_QUEUE_LOCK := 1

	$branchblock[loop] 
	{
		$dopipeline $depth 7 $fullrate
		$merge $entry $loopback
			$phi NENTRIES     := $zero<16> $on $entry n_NENTRIES $on $loopback
			$phi LOCK_IS_FULL := $one<1> $on $entry n_LOCK_IS_FULL $on $loopback
			$phi queue_command := FREE_QUEUE_COMMAND $on $entry, $loopback
		$endmerge
	
		$volatile $split (queue_command 4 4 32) (server_id opcode wdata)	
		$volatile lock   := (opcode == FQ_LOCK)
		$volatile unlock := (opcode == FQ_UNLOCK)
		$volatile push   := (opcode == PUSH)
		$volatile pop    := (opcode == POP)
	
		$volatile lock_ok := (lock & LOCK_IS_FULL)
		$guard (lock_ok) lock_value := FREE_QUEUE_LOCK

		$volatile unlock_ok := (unlock & (~LOCK_IS_FULL))
		$guard (unlock_ok) FREE_QUEUE_LOCK := 1

		$volatile push_is_ok := (push & (NENTRIES < ($bitcast ($uint<16>) S_MAX_NENTRIES)))
		$guard (push_is_ok) FREE_QUEUE := wdata

		$volatile pop_is_ok := (pop & (NENTRIES > 0))
		$guard (pop_is_ok) rdata := FREE_QUEUE

	
		$volatile n_NENTRIES :=
			($prioritymux
				push_is_ok  (NENTRIES + 1)
				pop_is_ok   (NENTRIES - 1)
				$default NENTRIES)

		$volatile n_LOCK_IS_FULL :=
			($prioritymux
				lock_ok   $zero<1>
				unlock_ok $one<1>
				$default LOCK_IS_FULL)
	

		$volatile push_status := 
			($excmux 
				lock      $zero<8>
				unlock    $zero<8> 
				push      ($mux push_is_ok $zero<8> $one<8>)
				pop       $zero<8>)
		
		$volatile pop_status  := 
			($excmux 
				lock      $zero<8>
				unlock    $zero<8> 
				push      $zero<8>
				pop       ($mux pop_is_ok  $zero<8>  $one<8>))

		$volatile result_data :=
				($excmux 
					lock 	($mux lock_ok $zero<32> $one<32>)
					unlock 	$zero<32>
					push 	$zero<32>
					pop	($mux pop_is_ok rdata $zero<32>))
					
		FREE_QUEUE_RESPONSE := ($concat n_NENTRIES push_status pop_status result_data)

		$while 1
	}
}

