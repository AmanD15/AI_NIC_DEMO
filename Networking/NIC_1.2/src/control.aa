//
// Initializes all queues from setGlobalSignals on startup.
// Write status registers of RxQ (all 4 servers), TxQ (all 4 servers) and freeQ to zero.
//
$module [init_all_queues] $in () $out () $is
{
	// TODO: coherent start sequence....
	// setup the initial status..
	
	$branchblock[loop] 
	{
		$dopipeline $depth 7 $fullrate
		$merge $entry $loopback
			$phi status_index := ($bitcast ($uint<8>) P_RX_QUEUE_0_STATUS_INDEX) $on $entry nstatus_index $on $loopback
		$endmerge
			
		$volatile nstatus_index := (status_index + 2)
		$volatile continue_flag := (status_index < P_FREE_QUEUE_STATUS_INDEX)
			
		$call accessRegister (WRITEMEM _hF status_index _h00000000) (ign_rsp)
			
		$while continue_flag
	}
}

//
// Register file (depth = 256) (width = 32)
//
$storage nic_registers: $array [255] $of $uint<32>


//
// Processor controls NIC through registers by either read or write operations.
// Access to queue by processor is also through registers. 
// 3 types of queue with their available operations:
//
// RxQ : operations can be either push or pop for all 4 servers followed by updation of respective server's RxQ status register.
//	 Processor generally pops from RxQ
//
// TxQ : operations can be either push or pop for all 4 servers followed by updation of respective server's TxQ status register.
//	 Processor generally pushes to TxQ
//
// FreeQ : operations can be either fq_lock, fq_unlock, push or pop.
//	   But freeQ status register updates only after push and pop operations.
//	   Processor pushes buffer pointers to freeQ on initialization before enabling NIC
//	   and pops from freeQ while exiting after disabling NIC.
//
// 	   There's only one freeQ accessed by both processor and NIC,
//	   so it needs to first get a lock before push/pop and also unlock it after.
//	   This locking/unlocking needs to be done explicitly by both processor and NIC.
//
// 	   But, queue_status_register update is being done implicitly by both processor and NIC
//	   after every push/pop operations.
//
// The 4 queue operations (opcode):
//	PUSH 	  : if its a write access to any of the queues (generally TxQ, and freeQ in beginning)
//	POP  	  : if its a read  access to any of the queues (generally RxQ, and freeQ in the end)
//	FQ_LOCK   : if its a read  access to free_queue_lock
//	FQ_UNLOCK : if its a write access to free_queue_lock
//
// The 2 register operations:
//	READ 	  : if its a read  access to any of the registers including queue_status_registers (excluding queue and lock registers)
//	WRITE 	  : if its a write access to any of the registers including queue_status_registers (excluding queue and lock registers)
//		    OR updation of queue_status_registers following push or pop operations only
//
$module [accessRegister] 
	$in (rwbar: $uint<1> bmask: $uint<4> index: $uint<8> wdata: $uint<32>)
	$out (rdata : $uint<32>) 
$is
{	
	// To access RxQ
	$volatile access_RxQ  	:= ($reduce | (index == P_RX_QUEUE_0_INDEX) (index == P_RX_QUEUE_1_INDEX) 
					      (index == P_RX_QUEUE_2_INDEX) (index == P_RX_QUEUE_3_INDEX))
	// To access TxQ
	$volatile access_TxQ  	:= ($reduce | (index == P_TX_QUEUE_0_INDEX) (index == P_TX_QUEUE_1_INDEX) 
				  	      (index == P_TX_QUEUE_2_INDEX) (index == P_TX_QUEUE_3_INDEX))
	// To access freeQ
	$volatile access_freeQ	:=  (index == P_FREE_QUEUE_INDEX)
	$volatile access_fq_lock := (index == P_FREE_QUEUE_LOCK_INDEX)
	$volatile access_free_queue := (access_freeQ | access_fq_lock)

	$volatile access_Q	:=  ($reduce & access_RxQ access_TxQ access_freeQ)
	// To access registers
	$volatile reg_access 	:=  (~access_Q)
	
	// To access respective servers
	$volatile server_id := 
		($excmux 
			($reduce | (index == P_RX_QUEUE_0_INDEX) (index == P_TX_QUEUE_0_INDEX) (index == P_FREE_QUEUE_INDEX))	SERVER_0
			((index == P_RX_QUEUE_1_INDEX)|(index == P_TX_QUEUE_1_INDEX))						SERVER_1
			((index == P_RX_QUEUE_2_INDEX)|(index == P_TX_QUEUE_2_INDEX))   					SERVER_2
			((index == P_RX_QUEUE_3_INDEX)|(index == P_TX_QUEUE_3_INDEX))  						SERVER_3)

	$volatile opcode := 
			($excmux 
				(access_fq_lock & rwbar)	FQ_LOCK
				(access_fq_lock & (~rwbar))	FQ_UNLOCK
				(access_Q & (~rwbar))  		PUSH
				(access_Q & rwbar)  		POP)

	// processor generally pops from RxQ
	$guard (access_RxQ)
		$call exec_receive_queue_command (server_id opcode wdata) (rx_nentries rx_push_status rx_pop_status rxq_rdata)
		
	// processor generally pushes to TxQ
	$guard (access_TxQ)
		$call exec_transmit_queue_command (server_id opcode wdata) (tx_nentries tx_push_status tx_pop_status txq_rdata)
		
	$guard (access_free_queue)
		$call exec_free_queue_command (server_id opcode wdata) (f_nentries f_push_status f_pop_status fq_rdata)

	// update status register in case of push and pop operations
	$volatile update_status_reg := ((opcode == PUSH) | (opcode == POP))
	// status register index calculation
	$volatile status_index := (index + 1)
	$volatile status := ($excmux
				access_RxQ	($concat rx_nentries rx_push_status rx_pop_status)
				access_TxQ	($concat tx_nentries tx_push_status tx_pop_status)
				access_freeQ	($concat f_nentries  f_push_status  f_pop_status))

	// read access from register
	$guard (reg_access) rdata_regs := nic_registers[index]

	$volatile rdata := ($excmux
				access_RxQ 		rxq_rdata
				access_TxQ 		txq_rdata
				access_free_queue 	fq_rdata
				reg_access 		rdata_regs)

	$volatile $split (bmask 1 1 1 1) (b0 b1 b2 b3)
	$volatile $split (rdata  8 8 8 8) (r0 r1 r2 r3)
	$volatile $split (wdata  8 8 8 8) (w0 w1 w2 w3)

	$volatile wval := ($concat
				($mux b0 w0 r0)
				($mux b1 w1 r1)
				($mux b2 w2 r2)
				($mux b3 w3 r3))
				
	$volatile w_index := ($excmux
				((~rwbar) & reg_access)	index
				update_status_reg	status_index)
				
	$volatile wdata_reg := ($excmux
				((~rwbar) & reg_access)	wval
				update_status_reg	status)

	// write access to register or status register update after a push or a pop operation
	$volatile write_to_regs := (((~rwbar) & reg_access) | update_status_reg)
	$guard (write_to_regs)
		nic_registers[w_index] := wdata_reg
}


$module [setGlobalSignals]
	$in () $out () $is
{
	$call accessRegister (READMEM _hF P_N_SERVERS_REGISTER_INDEX 0) (n_servers)
	S_NUMBER_OF_SERVERS  := n_servers

	$call accessRegister (READMEM _hF P_N_BUFFERS_REGISTER_INDEX 0) (n_buffers)
	S_MAX_NENTRIES  := n_buffers

	$barrier
	

	$call accessRegister (READMEM _hF P_NIC_CONTROL_REGISTER_INDEX 0) (ctrl_reg)

	S_CONTROL_REGISTER := ctrl_reg

	MAC_ENABLE := (ctrl_reg [] 1)
	NIC_INTR_ENABLE := (ctrl_reg [] 2)

	$barrier

	NIC_INTR := (NIC_INTR_ENABLE & NIC_INTR_INTERNAL)

	$attribute input_buffering 0
	$attribute output_buffering 0
}




$module [controlDaemon] $in () $out () $is
{

		
	// set up the lock, at the beginning.
	// (will be accessed in doMemAccess)
	memory_access_lock := 1

	// control-register set to 0.
	$call accessRegister (0 0 0 0) (ign)

	MAC_ENABLE := 0

	NIC_INTR   := 0
	NIC_INTR_ENABLE   := 0
	NIC_INTR_INTERNAL := 0

	S_CONTROL_REGISTER := 0
	S_NUMBER_OF_SERVERS := 0
	S_MAX_NENTRIES	:= 0
	
	$rreport(controlDaemon started_controlDaemon)
	$parallelblock [pb] {
	   $branchblock[loop] {

		// SPIN forever.
		$dopipeline $depth 3 $fullrate 
		$merge $entry $loopback $endmerge

			req := AFB_NIC_REQUEST

			$rreport (SoftwareRegisterAccessDaemon got_afb_req req)
			$volatile $split (req 1 1 4 36 32) 
					(lock rwbar bmask addr wdata)

			$rreport(controlDaemon read_afb_request lock rwbar bmask addr wdata)
		
			// register_index.
			$volatile index := ($slice addr 9 2)

				
			$volatile read_counter := (index == 255)

			// access the register.
			$guard (~read_counter)
				$call accessRegister (rwbar bmask index wdata) (rdata_other)

			rdata := ($mux read_counter S_FREE_RUNNING_COUNTER  rdata_other)
			
			$barrier 
			
			// initialize all queues status registers 
			$volatile initialize_queues := ((~rwbar) & (index == P_N_SERVERS_REGISTER_INDEX))
			$guard (initialize_queues)
				$call init_all_queues () ()
			
			$volatile update_control_register := ((~rwbar) & (index == 0))
			$volatile set_globals := update_control_register
			$guard (set_globals)
				$call setGlobalSignals () ()

			// Send response
			$volatile resp  := ($concat $zero<1> rdata) // zero<1> -> No error
			AFB_NIC_RESPONSE := resp
	
		$while 1
	    }
	    $branchblock[counter_loop] {
			$dopipeline $depth 7 $fullrate
			$merge $entry $loopback 
				$phi I := $zero<32> $on $entry nI $on $loopback
			$endmerge
				$volatile nI := (I + 1)
				S_FREE_RUNNING_COUNTER := nI
			$while 1
	    }
	}
	//ignq := QUEUE_MONITOR_SIGNAL $keep
}

