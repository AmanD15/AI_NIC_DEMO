$module [init_all_queues] $in (ctrl_reg : $uint<32>) $out () $is
{

	// TODO: coherent start sequence....
	// setup the initial status..
	
	$call accessRegister (WRITEMEM _hF P_FREE_QUEUE_STATUS_INDEX _h00000000) (f_ign_rsp)
	
	$branchblock[loop] 
	{
		$dopipeline $depth 7 $fullrate
		$merge $entry $loopback
			$phi K := _h3 $on $entry nK $on $loopback
			$phi RxQ_status_index := ($bitcast ($uint<8>) P_RX_QUEUE_0_STATUS_INDEX) $on $entry nRxQ_status_index $on $loopback
			$phi TxQ_status_index := ($bitcast ($uint<8>) P_TX_QUEUE_0_STATUS_INDEX) $on $entry nTxQ_status_index $on $loopback
		$endmerge
			
		$volatile nK := (K + 1)
		$volatile nRxQ_status_index := (RxQ_status_index + 2)
		$volatile nTxQ_status_index := (TxQ_status_index + 2)
		$volatile continue_flag := (K < 6)
			
		$volatile enable_server_id  := (ctrl_reg [] K)
			
		$guard (enable_server_id)
			$call accessRegister (WRITEMEM _hF RxQ_status_index _h00000000) (rx_ign_rsp)
		$guard (enable_server_id)
			$call accessRegister (WRITEMEM _hF TxQ_status_index _h00000000) (tx_ign_rsp)
			
		$while continue_flag
	}
}

//
// Register file (depth = 256) (width = 32)
//
$storage nic_registers: $array [255] $of $uint<32>


// read modify write.
$module [accessRegister] 
	$in (rwbar: $uint<1> bmask: $uint<4> index: $uint<8> wdata: $uint<32>)
	$out (rdata : $uint<32>) 
$is
{
	$volatile is_for_queue   := ((index >= 8)   &  (index < 27))	 // includes lock access.

	$volatile is_for_rx_queue   := ((index >= 8)   &  (index < 16))
	$volatile is_for_tx_queue   := ((index >= 16)  &  (index < 24))
	$volatile is_for_free_queue := ((index >= 24)  &  (index < 27))  // includes lock access.

	$volatile reg_access := ($reduce &
					(~is_for_rx_queue)
					(~is_for_tx_queue)
					(~is_for_free_queue))
	
	$volatile access_Q :=	 ((index == P_FREE_QUEUE_INDEX)
				| (index == P_RX_QUEUE_0_INDEX) | (index == P_RX_QUEUE_1_INDEX) 
				| (index == P_RX_QUEUE_2_INDEX) | (index == P_RX_QUEUE_3_INDEX)
				| (index == P_TX_QUEUE_0_INDEX) | (index == P_TX_QUEUE_1_INDEX) 
				| (index == P_TX_QUEUE_2_INDEX) | (index == P_TX_QUEUE_3_INDEX))
	
	$volatile access_Q_status := 	 ((index == P_FREE_QUEUE_STATUS_INDEX)
					| (index == P_RX_QUEUE_0_STATUS_INDEX) | (index == P_RX_QUEUE_1_STATUS_INDEX) 
					| (index == P_RX_QUEUE_2_STATUS_INDEX) | (index == P_RX_QUEUE_3_STATUS_INDEX)
					| (index == P_TX_QUEUE_0_STATUS_INDEX) | (index == P_TX_QUEUE_1_STATUS_INDEX) 
					| (index == P_TX_QUEUE_2_STATUS_INDEX) | (index == P_TX_QUEUE_3_STATUS_INDEX))
	
	$volatile access_fq_lock := (index == P_FREE_QUEUE_LOCK_INDEX)

	$guard (is_for_queue)
		$volatile server_id := 
			($excmux 
				((index == P_RX_QUEUE_0_INDEX)|(index == P_TX_QUEUE_0_INDEX)|(index == P_FREE_QUEUE_INDEX))	SERVER_0
				((index == P_RX_QUEUE_1_INDEX)|(index == P_TX_QUEUE_1_INDEX))					SERVER_1
				((index == P_RX_QUEUE_2_INDEX)|(index == P_TX_QUEUE_2_INDEX))   				SERVER_2
				((index == P_RX_QUEUE_3_INDEX)|(index == P_TX_QUEUE_3_INDEX))  					SERVER_3)

	$guard (is_for_queue)
		$volatile opcode := 
			($excmux 
				(access_fq_lock & (rwbar))	FQ_LOCK
				(access_fq_lock & (~rwbar))	FQ_UNLOCK
				(access_Q & (~rwbar))  		PUSH
				(access_Q & (rwbar))  		POP
				access_Q_status  		STATUS)

	$guard (reg_access) rdata_regs := nic_registers[index]

	$guard (is_for_rx_queue)
		$call exec_receive_queue_command (server_id opcode wdata) (nentries push_status pop_status rdata_q)
		
	$guard (is_for_tx_queue)
		$call exec_transmit_queue_command (server_id opcode wdata) (nentries push_status pop_status rdata_q)
		
	$guard (is_for_free_queue)
		$call exec_free_queue_command (server_id opcode wdata) (nentries push_status pop_status rdata_q)

	$guard (is_for_queue)
		$volatile status := ($concat nentries push_status pop_status)
		
	$volatile status_index := (index + 1)
	$guard ((opcode == PUSH) | (opcode == POP))
		nic_registers[status_index] := status

	$volatile rdata := ($excmux
				is_for_queue 	rdata_q
				reg_access 	rdata_regs)


	$volatile $split (bmask 1 1 1 1) (b0 b1 b2 b3)
	$volatile $split (rdata  8 8 8 8) (r0 r1 r2 r3)
	$volatile $split (wdata  8 8 8 8) (w0 w1 w2 w3)

	$volatile wval := ($concat
				($mux b0 w0 r0)
				($mux b1 w1 r1)
				($mux b2 w2 r2)
				($mux b3 w3 r3))

	$volatile write_to_regs := ((~rwbar) & reg_access)
	$guard (write_to_regs)
		nic_registers[index] := wval

}


$module [setGlobalSignals]
	$in () $out () $is
{

	$call accessRegister (READMEM _hF P_N_SERVERS_REGISTER_INDEX 0) (n_servers)
	S_NUMBER_OF_SERVERS  := n_servers

	$barrier
	

	$call accessRegister (READMEM _hF P_NIC_CONTROL_REGISTER_INDEX 0) (ctrl_reg)

	S_CONTROL_REGISTER := ctrl_reg

	MAC_ENABLE := (ctrl_reg [] 1)
	NIC_INTR_ENABLE := (ctrl_reg [] 2)

	$barrier

	$call init_all_queues (ctrl_reg) ()

	NIC_INTR := (NIC_INTR_ENABLE & NIC_INTR_INTERNAL)

	$attribute input_buffering 0
	$attribute output_buffering 0
}




$module [controlDaemon] $in () $out () $is
{

		
	// set up the lock, at the beginning.
	// (will be accessed in doMemAccess)
	memory_access_lock := 1

	// control-register set to 0.
	$call accessRegister (0 0 0 0) (ign)

	MAC_ENABLE := 0

	NIC_INTR   := 0
	NIC_INTR_ENABLE   := 0
	NIC_INTR_INTERNAL := 0

	S_CONTROL_REGISTER := 0
	S_NUMBER_OF_SERVERS := 0
	
	
	$rreport(controlDaemon started_controlDaemon)
	$parallelblock [pb] {
	   $branchblock[loop] {

		// SPIN forever.
		$dopipeline $depth 3 $fullrate 
		$merge $entry $loopback $endmerge

			req := AFB_NIC_REQUEST

			$rreport (SoftwareRegisterAccessDaemon got_afb_req req)
			$volatile $split (req 1 1 4 36 32) 
					(lock rwbar bmask addr wdata)

			$rreport(controlDaemon read_afb_request lock rwbar bmask addr wdata)
		
			// register_index.
			$volatile index := ($slice addr 9 2)

				
			$volatile read_counter := (index == 255)

			// access the register.
			$guard (~read_counter)
				$call accessRegister (rwbar bmask index wdata) (rdata_other)

			rdata := ($mux read_counter S_FREE_RUNNING_COUNTER  rdata_other)
			
			$barrier 

			$volatile update_control_register := ((~rwbar) & (index == 0))
			$volatile set_globals := update_control_register
			$guard (set_globals)
				$call setGlobalSignals () ()

			// Send response
			$volatile resp  := ($concat $zero<1> rdata) // zero<1> -> No error
			AFB_NIC_RESPONSE := resp
	
		$while 1
	    }
	    $branchblock[counter_loop] {
			$dopipeline $depth 7 $fullrate
			$merge $entry $loopback 
				$phi I := $zero<32> $on $entry nI $on $loopback
			$endmerge
				$volatile nI := (I + 1)
				S_FREE_RUNNING_COUNTER := nI
			$while 1
	    }
	}
	ignq := QUEUE_MONITOR_SIGNAL $keep
}

