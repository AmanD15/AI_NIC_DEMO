
$module [popFromQueue]
	$in (queue_type: $uint<2> server_id : $uint<4>) 
	$out (q_rdata: $uint<32> status: $uint<32>)
$is
{
	$volatile FreeQ   := (queue_type == FREEQUEUE)
	$volatile RxQ     := (queue_type == RXQUEUE)
	$volatile TxQ     := (queue_type == TXQUEUE)
	
	$volatile wdata := $zero<32>
	
	// Pop from freeQ
	$guard (FreeQ)
		$call exec_free_queue_command (server_id POP wdata) (q_nentries q_push_status q_pop_status q_rdata)

	// Pop from RxQ
	$guard (RxQ)
		$call exec_receive_queue_command (server_id POP wdata) (q_nentries q_push_status q_pop_status q_rdata)
	
	// Pop from TxQ
	$guard (TxQ)
		$call exec_transmit_queue_command (server_id POP wdata) (q_nentries q_push_status q_pop_status q_rdata)
		
	// If pop successful, update status register
	$volatile pop_successful := (~($bitreduce | q_pop_status))
	
	$volatile status_index := 
			($excmux 
				FreeQ				P_FREE_QUEUE_STATUS_INDEX
				RxQ    ($excmux 
						server_0	P_RX_QUEUE_0_STATUS_INDEX
						server_1 	P_RX_QUEUE_0_STATUS_INDEX
						server_2 	P_RX_QUEUE_0_STATUS_INDEX
						server_3 	P_RX_QUEUE_0_STATUS_INDEX)
				TxQ     ($excmux 
						server_0 	P_TX_QUEUE_0_STATUS_INDEX
						server_1 	P_TX_QUEUE_0_STATUS_INDEX
						server_2 	P_TX_QUEUE_0_STATUS_INDEX
						server_3 	P_TX_QUEUE_0_STATUS_INDEX))
						
	$volatile status := ($concat q_nentries q_push_status q_pop_status)
						
	$guard (pop_successful)
		nic_registers[status_index] := status
}



$module [pushIntoQueue] 
	$in  (queue_type: $uint<2> server_id: $uint<4> q_wdata: $uint<32>) 
	$out (status: $uint<32>)
$is
{
	$volatile FreeQ   := (queue_type == FREEQUEUE)
	$volatile RxQ     := (queue_type == RXQUEUE)
	$volatile TxQ     := (queue_type == TXQUEUE)
	
	$volatile wdata := $zero<32>
	
	// Push into freeQ
	$guard (FreeQ)
		$call exec_free_queue_command (server_id PUSH q_wdata) (q_nentries q_push_status q_pop_status f_ignf)

	// Push into RxQ
	$guard (RxQ)
		$call exec_receive_queue_command (server_id PUSH q_wdata) (q_nentries q_push_status q_pop_status rx_ignr)
	
	// Push into TxQ
	$guard (TxQ)
		$call exec_transmit_queue_command (server_id PUSH q_wdata) (q_nentries q_push_status q_pop_status tx_ignr)
		
	// If push successful, update status register
	$volatile push_successful := (~($bitreduce | q_push_status))
	
	$volatile status_index := 
			($excmux 
				FreeQ				P_FREE_QUEUE_STATUS_INDEX
				RxQ    ($excmux 
						server_0	P_RX_QUEUE_0_STATUS_INDEX
						server_1 	P_RX_QUEUE_0_STATUS_INDEX
						server_2 	P_RX_QUEUE_0_STATUS_INDEX
						server_3 	P_RX_QUEUE_0_STATUS_INDEX)
				TxQ     ($excmux 
						server_0 	P_TX_QUEUE_0_STATUS_INDEX
						server_1 	P_TX_QUEUE_0_STATUS_INDEX
						server_2 	P_TX_QUEUE_0_STATUS_INDEX
						server_3 	P_TX_QUEUE_0_STATUS_INDEX))
		
	$volatile status := ($concat q_nentries q_push_status q_pop_status)
	
	$guard (push_successful)
		nic_registers[status_index] := status
}

