// QUEUE_COMMANDS
//   lock         1
//   unlock       2
//   push         3
//   pop          4
//   status       5
$constant FQ_LOCK   : $uint<4> := 1
$constant FQ_UNLOCK : $uint<4> := 2
$constant PUSH   : $uint<4> := 3
$constant POP    : $uint<4> := 4
$constant STATUS : $uint<4> := 5


$module [read_Rx_status] $in (index: $uint<8>) (rx_status: $uint<32>)
{
}

$module [write_Rx_status] $in (index: $uint<8>  rx_status: $uint<32>) $out () 
{
}

	
$module [accessRxQueue]    $in (rwbar: $uint<1>  index: $uint<8> wdata: $uint<32>) 
							$out (rdata_rx_q rdata_rx_status: $uint<32>)
{
	// if it is an access to queue, its a pop/push 
	// else it is an access to status, it is write/read.
}

$module [accessTxQueue]    $in (rwbar: $uint<1>  index: $uint<8> wdata: $uint<32>) $out (rdata_rx_q: $uint<32>)
{
}
$module [accessFreeQueue]    $in (rwbar: $uint<1>  index: $uint<8> wdata: $uint<32>) $out (rdata_rx_q: $uint<32>)
{
}

$module [popFromQueue]
	$in (queue_type: $uint<2> server_id : $uint<4>) 
	$out (q_rdata: $uint<32> status: $uint<1>)
$is
{
	$volatile FreeQ   := (queue_type == FREEQUEUE)
	$volatile RxQ     := (queue_type == RXQUEUE)
	$volatile TxQ     := (queue_type == TXQUEUE)
	
	$volatile wdata := $zero<32>
	$volatile lock_opcode := ($bitcast ($uint<8>) FQ_LOCK)
	$volatile unlock_opcode := ($bitcast ($uint<8>) FQ_UNLOCK)
	$volatile pop_opcode := ($excmux 
				FreeQ 	    ($bitcast ($uint<8>) POP)
				(RxQ | TxQ) ($concat server_id POP))
	
	// Pop from freeQ
	$guard (FreeQ)
		$call exec_free_queue_command (lock_opcode wdata) (lock_status ignr)
		
	$guard (~lock_status)
		$call exec_free_queue_command (pop_opcode wdata) (pop_status q_rdata)
		
	$guard (~pop_status)
		$call exec_free_queue_command (unlock_opcode wdata) (unlock_status ignr)
	
	// Pop from RxQ
	$guard (RxQ)
		$call exec_receive_queue_command (pop_opcode wdata) (pop_status q_rdata)
	
	// Pop from TxQ
	$guard (TxQ)
		$call exec_transmit_queue_command (pop_opcode wdata) (pop_status q_rdata)
		
	$volatile status := ($bitcast ($uint<1>) pop_status)
}

$module [pushIntoQueue] 
	$in  (queue_type: $uint<2> server_id: $uint<4> q_wdata: $uint<32>) 
	$out (status: $uint<1>)
$is
{
	$volatile FreeQ   := (queue_type == FREEQUEUE)
	$volatile RxQ     := (queue_type == RXQUEUE)
	$volatile TxQ     := (queue_type == TXQUEUE)
	
	$volatile wdata := $zero<32>
	$volatile lock_opcode := ($bitcast ($uint<8>) FQ_LOCK)
	$volatile unlock_opcode := ($bitcast ($uint<8>) FQ_UNLOCK)
	$volatile push_opcode := ($excmux 
				FreeQ 	    ($bitcast ($uint<8>) PUSH)
				(RxQ | TxQ) ($concat server_id PUSH))
	
	// Push into freeQ
	$guard (FreeQ)
		$call exec_free_queue_command (lock_opcode wdata) (lock_status ignr)
		
	$guard (~lock_status)
		$call exec_free_queue_command (push_opcode q_wdata) (push_status ignr)
		
	$guard (~push_status)
		$call exec_free_queue_command (unlock_opcode wdata) (unlock_status ignr)
	
	// Push into RxQ
	$guard (RxQ)
		$call exec_receive_queue_command (push_opcode q_wdata) (push_status ignr)
	
	// Push into TxQ
	$guard (TxQ)
		$call exec_transmit_queue_command (push_opcode q_wdata) (push_status ignr)
		
	$volatile status := ($bitcast ($uint<1>) push_status)
}

