// QUEUE_COMMANDS
//   lock         1
//   unlock       2
//   push         3
//   pop          4
//   status       5
$constant LOCK   : $uint<4> := 1
$constant UNLOCK : $uint<4> := 2
$constant PUSH   : $uint<4> := 3
$constant POP    : $uint<4> := 4
$constant STATUS : $uint<4> := 5

$constant server_0 : $uint<4> := 0
$constant server_1 : $uint<4> := 1
$constant server_2 : $uint<4> := 2
$constant server_3 : $uint<4> := 3


$module [read_status] $in (index: $uint<8>) (status: $uint<32>)
{
	status := nic_registers[index]
}

$module [write_status] $in (index: $uint<8>  status: $uint<32>) $out () 
{
	nic_registers[index] := status
}

//
// There are four possible operations
//	push, pop for queue
//	write, read for status
// 
//  push 
//    q_rdata = 0, q_status = <number_of_entries> <push_status> <pop_status>.
//  pop 
//    q_rdata = popped_value, q_status = <number_of_entries> <push_status> <pop_status>.
//  write 
//    q_rdata = 0, q_status = 0.
//  read 
//    q_rdata = 0, q_status = <number_of_entries> <push_status> <pop_status>.
//
	
$module [accessRxQueue]    
	$in (rwbar: $uint<1> index: $uint<8> wdata: $uint<32>) 
	$out (rdata_rx_q rdata_rx_status: $uint<32>)
$is
{
	// if it is an access to queue, its a pop/push 
	// else it is an access to status, it is write/read.
	$volatile access_RxQ  := ((index == P_RX_QUEUE_0_INDEX) | (index == P_RX_QUEUE_1_INDEX) 
				| (index == P_RX_QUEUE_2_INDEX) | (index == P_RX_QUEUE_3_INDEX))
	$volatile access_RxQ_status := ((index == P_RX_QUEUE_0_STATUS_INDEX) | (index == P_RX_QUEUE_1_STATUS_INDEX) 
				      | (index == P_RX_QUEUE_2_STATUS_INDEX) | (index == P_RX_QUEUE_3_STATUS_INDEX))
	
	$volatile push := (access_RxQ & (~rwbar))
	$volatile pop  := (access_RxQ & (rwbar))
	
	$volatile write := (access_RxQ_status & (~rwbar))
	$volatile read := (access_RxQ_status & (rwbar))
	
	$volatile server_id := 
			($excmux 
				(index == P_RX_QUEUE_0_INDEX)   server_0
				(index == P_RX_QUEUE_1_INDEX)	server_1
				(index == P_RX_QUEUE_2_INDEX)   server_2
				(index == P_RX_QUEUE_3_INDEX)  	server_3)
	
	$guard (push)
		$call pushIntoQueue (RXQUEUE server_id wdata) (q_status)
	$guard (push)
		$volatile push_successful := (~($bitreduce | ($slice q_status 15 8)))
		
	$guard (pop)
		$call popFromQueue (RXQUEUE server_id) (q_rdata q_status)
	$guard (pop)
		$volatile pop_successful := (~($bitreduce | ($slice q_status 7 0)))
		
	$volatile update_status_reg := ($reduce | write push_successful pop_successful)
		
	$volatile wstatus := 
			($excmux 
				push_successful   q_status
				pop_successful    q_status
				write   	  wdata)
		
	$guard (update_status_reg)
		$call write_status (index wstatus) ()
		
	$guard (read)
		$call read_status (index) (rstatus)
		
	$volatile rdata_rx_q := 
			($excmux 
				push    $zero<32>
				pop     q_rdata
				write   $zero<32>
				read   	$zero<32>)
				
	$volatile rdata_rx_status := 
			($excmux 
				push    q_status
				pop     q_status
				write   $zero<32>
				read   	rstatus)
}

$module [accessTxQueue]    
	$in (rwbar: $uint<1> index: $uint<8> wdata: $uint<32>) 
	$out (rdata_tx_q rdata_tx_status: $uint<32>)
$is
{
	$volatile access_TxQ  := ((index == P_TX_QUEUE_0_INDEX) | (index == P_TX_QUEUE_1_INDEX) 
				| (index == P_TX_QUEUE_2_INDEX) | (index == P_TX_QUEUE_3_INDEX))
	$volatile access_TxQ_status := ((index == P_TX_QUEUE_0_STATUS_INDEX) | (index == P_TX_QUEUE_1_STATUS_INDEX) 
				      | (index == P_TX_QUEUE_2_STATUS_INDEX) | (index == P_TX_QUEUE_3_STATUS_INDEX))
	
	$volatile push := (access_TxQ & (~rwbar))
	$volatile pop  := (access_TxQ & (rwbar))
	
	$volatile write := (access_TxQ_status & (~rwbar))
	$volatile read := (access_TxQ_status & (rwbar))
	
	$volatile server_id := 
			($excmux 
				(index == P_TX_QUEUE_0_INDEX)   server_0
				(index == P_TX_QUEUE_1_INDEX)	server_1
				(index == P_TX_QUEUE_2_INDEX)   server_2
				(index == P_TX_QUEUE_3_INDEX)  	server_3)
	
	$guard (push)
		$call pushIntoQueue (TXQUEUE server_id wdata) (q_status)
	$guard (push)
		$volatile push_successful := (~($bitreduce | ($slice q_status 15 8)))
		
	$guard (pop)
		$call popFromQueue (TXQUEUE server_id) (q_rdata q_status)
	$guard (pop)
		$volatile pop_successful := (~($bitreduce | ($slice q_status 7 0)))
		
	$volatile update_status_reg := ($reduce | write push_successful pop_successful)
		
	$volatile wstatus := 
			($excmux 
				push_successful   q_status
				pop_successful    q_status
				write   	  wdata)
		
	$guard (update_status_reg)
		$call write_status (index wstatus) ()
		
	$guard (read)
		$call read_status (index) (rstatus)
		
	$volatile rdata_tx_q := 
			($excmux 
				push    $zero<32>
				pop     q_rdata
				write   $zero<32>
				read   	$zero<32>)
				
	$volatile rdata_tx_status := 
			($excmux 
				push    q_status
				pop     q_status
				write   $zero<32>
				read   	rstatus)
}

$module [accessFreeQueue]    
	$in (rwbar: $uint<1> index: $uint<8> wdata: $uint<32>) 
	$out (rdata_free_q rdata_free_status: $uint<32>)
$is
{
	$volatile access_FQ  := (index == P_FREE_QUEUE_INDEX)
	$volatile access_FQ_status := (index == P_FREE_QUEUE_STATUS_INDEX)
	
	$volatile push := (access_FQ & (~rwbar))
	$volatile pop  := (access_FQ & (rwbar))
	
	$volatile write := (access_FQ_status & (~rwbar))
	$volatile read := (access_FQ_status & (rwbar))
	
	$guard (push)
		$call pushIntoQueue (FREEQUEUE _h0 wdata) (q_status)
	$guard (push)
		$volatile push_successful := (~($bitreduce | ($slice q_status 15 8)))
		
	$guard (pop)
		$call popFromQueue (FREEQUEUE _h0) (q_rdata q_status)
	$guard (pop)
		$volatile pop_successful := (~($bitreduce | ($slice q_status 7 0)))
		
	$volatile update_status_reg := ($reduce | write push_successful pop_successful)
		
	$volatile wstatus := 
			($excmux 
				push_successful   q_status
				pop_successful    q_status
				write   	  wdata)
		
	$guard (update_status_reg)
		$call write_status (index wstatus) ()
		
	$guard (read)
		$call read_status (index) (rstatus)
		
	$volatile rdata_free_q := 
			($excmux 
				push    $zero<32>
				pop     q_rdata
				write   $zero<32>
				read   	$zero<32>)
				
	$volatile rdata_free_status := 
			($excmux 
				push    q_status
				pop     q_status
				write   $zero<32>
				read   	rstatus)
}

$module [popFromQueue]
	$in (queue_type: $uint<2> server_id : $uint<4>) 
	$out (q_rdata: $uint<32> status: $uint<32>)
$is
{
	$volatile FreeQ   := (queue_type == FREEQUEUE)
	$volatile RxQ     := (queue_type == RXQUEUE)
	$volatile TxQ     := (queue_type == TXQUEUE)
	
	$volatile wdata := $zero<32>
	$volatile lock_opcode := ($bitcast ($uint<8>) LOCK)
	$volatile unlock_opcode := ($bitcast ($uint<8>) UNLOCK)
	$volatile pop_opcode := ($excmux 
				FreeQ 	    ($bitcast ($uint<8>) POP)
				(RxQ | TxQ) ($concat server_id POP))
	
	// Pop from freeQ
	$guard (FreeQ)
		$call exec_free_queue_command (lock_opcode wdata) (lock_nentries lock_push_status lock_pop_status lock_rdata)
	
	$volatile lock_status := ($bitreduce | lock_rdata)	
		
	$guard (~lock_status)
		$call exec_free_queue_command (pop_opcode wdata) (q_nentries q_push_status q_pop_status q_rdata)
		
	$volatile pop_status := ($bitreduce | q_pop_status)
		
	$guard (~pop_status)
		$call exec_free_queue_command (unlock_opcode wdata) (unlock_nentries unlock_push_status unlock_pop_status unlock_rdata)
	
	// Pop from RxQ
	$guard (RxQ)
		$call exec_receive_queue_command (pop_opcode wdata) (q_nentries q_push_status q_pop_status q_rdata)
	
	// Pop from TxQ
	$guard (TxQ)
		$call exec_transmit_queue_command (pop_opcode wdata) (q_nentries q_push_status q_pop_status q_rdata)
		
	$volatile status := ($concat q_nentries q_push_status q_pop_status)
}

$module [pushIntoQueue] 
	$in  (queue_type: $uint<2> server_id: $uint<4> q_wdata: $uint<32>) 
	$out (status: $uint<32>)
$is
{
	$volatile FreeQ   := (queue_type == FREEQUEUE)
	$volatile RxQ     := (queue_type == RXQUEUE)
	$volatile TxQ     := (queue_type == TXQUEUE)
	
	$volatile wdata := $zero<32>
	$volatile lock_opcode := ($bitcast ($uint<8>) LOCK)
	$volatile unlock_opcode := ($bitcast ($uint<8>) UNLOCK)
	$volatile push_opcode := ($excmux 
				FreeQ 	    ($bitcast ($uint<8>) PUSH)
				(RxQ | TxQ) ($concat server_id PUSH))
	
	// Push into freeQ
	$guard (FreeQ)
		$call exec_free_queue_command (lock_opcode wdata) (lock_nentries lock_push_status lock_pop_status lock_rdata)
		
	$volatile lock_status := ($bitreduce | lock_rdata)
		
	$guard (~lock_status)
		$call exec_free_queue_command (push_opcode q_wdata) (q_nentries q_push_status q_pop_status f_ignf)
		
	$volatile push_status := ($bitreduce | q_push_status)
		
	$guard (~push_status)
		$call exec_free_queue_command (unlock_opcode wdata) (unlock_nentries unlock_push_status unlock_pop_status unlock_rdata)
	
	// Push into RxQ
	$guard (RxQ)
		$call exec_receive_queue_command (push_opcode q_wdata) (q_nentries q_push_status q_pop_status rx_ignr)
	
	// Push into TxQ
	$guard (TxQ)
		$call exec_transmit_queue_command (push_opcode q_wdata) (q_nentries q_push_status q_pop_status tx_ignr)
		
	$volatile status := ($concat q_nentries q_push_status q_pop_status)
}

