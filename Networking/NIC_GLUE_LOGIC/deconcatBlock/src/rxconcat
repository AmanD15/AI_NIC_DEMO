//
//	Read pipe
//	if(tlast or 8bytesrecv)
//		send on out pipE
//	else
//		collect next byte
//

$constant Eight : $uint<32> := 8
//$storage data: $array [8] $of $uint<8>

$module [rx_concat] $in () $out () $is
{
	$branchblock[loop]{

		$dopipeline $depth 7 $fullrate
	
		$merge $entry $loopback 
			$phi RX := rx_in_pipe $on $entry, $loopback
			//$phi lstate := start $on $entry nlstate $on $loopback	
			$phi count := $zero<4> $on $entry ncount $on $loopback
			$phi prevSendData := $zero<64> $on $entry sendData $on $loopback
			$phi prev_tkeep := $zero<8> $on $entry tkeep $on $loopback
		$endmerge

			//$volatile $call nextState (RX lstate) (nlstate)
			$volatile sendtopipe := ((count == 7) | ((RX [] 9) == 1))
			$volatile ncount := ($mux ((count == 7) | sendtopipe)
						$zero<4>
						(count + 1))

			//data[count] := ($slice RX 8 1)
			$volatile tkeep := ($mux (count == 0) _h01 (prev_tkeep | ($one<8> << ($bitcast ($uint<8>) count))))

			$volatile shift_data := (($bitcast ($uint<32>) count) * Eight)
			$volatile sendData := ($mux (count == 0) ($concat $zero<56> ($slice RX 8 1)) (prevSendData | (($bitcast ($uint<64>) ($slice RX 8 1)) << ($bitcast ($uint<64>)shift_data)) ))

			$rreport (rx_concat data RX count sendData prevSendData prev_tkeep shift_data sendtopipe)
			$guard (sendtopipe)
				rx_out_pipe := ($concat (RX [] 9) sendData tkeep)

		$while 1

	}

}
