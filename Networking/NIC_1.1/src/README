---------------------------------------------------------
1. NIC design summary (Updated)
---------------------------------------------------------

	The NIC is designed to be a bridge between an
	Ethernet interface and the system memory.

	Four queues are used to coordinate the NIC's
	activity.
		- The free queue rx
		- The free queue tx
		- The rx queue
			as many as there are servers.
		- The tx queue
			as many as there are servers.
			
	Working:
	
		Packet Reception:
		
			NIC (HW side) pops a free buffer pointer from "free queue rx", and
			writes data into the buffer, and pushes the free buffer to
			rx queue.
			
			Processor(SW side) pops the buffer from rx queue, processes packet
			info, and pushes the buffer pointer back to "free queue rx", for further
			reception of packets.
			
		Packet Transmission:
		
			Processor(SW side) pops a free buffer pointer from "free queue tx", and
			writes data into the buffer, and pushes the free buffer to
			tx queue.
					
			NIC (HW side) pops the buffer from tx queue, transmits it, and
			pushes the buffer pointer back to "free queue tx", for further
			transmission of packets. 
			
---------------------------------------------------------
2. NIC design files.
---------------------------------------------------------



	control.aa  
		control machine.
	decls.aa 
		most declarations
	general_utils.aa 
		utils.
	memory_utils.aa  
		memory access with NIC as master.
	pipes.aa  
		pipe declarations.
	queue_utils.aa  
		queue modules (push, pop, acquirelock & releaselock)
	receive_engine.aa  
		store Ethernet RX packet in memory
	register_utils.aa  
		NIC register access
	rx_from_mac.aa  
		packet parser to separate the header 
		from packet data.
	signals.aa  
		ahir signal declarations.
	transmit_engine.aa  
		sending packet out to Ethernet TX



---------------------------------------------------------
3. Cortos queue data structure.
---------------------------------------------------------
typedef struct _CortosQueueHeader {
  uint32_t totalMsgs;  current total messages       +0
  uint32_t readIndex;				    +4
  uint32_t writeIndex;				    +8
  uint32_t length;				    +12
  uint32_t msgSizeInBytes;			    +16
  uint8_t *lock;				    +20
  uint8_t *bget_addr;				    +24
   if misc == 1, then assume single writer and single reader and don't use locks
  uint32_t misc;				    +28
} CortosQueueHeader;

  The rx/tx/free queues assume a message size of 8-bytes.
  The 8-bytes represent buffer_pointer[35:0].


---------------------------------------------------------
4. Registers in the NIC
---------------------------------------------------------
	Registers in the NIC will be used to
		- control the NIC
		- configure the NIC
			- number of servers
			- physical addresses related to the
				rx,tx and free queues.
		- monitor the NIC
			- status information 
------------------------------------------------------------
Register     address         		Description
  Id	       offset	
------------------------------------------------------------
0  	        0x00		        control register
					 bit [0] is nic enable
					 bit [1] is mac enable
					 bit [2] is nic interrupt enable
--------------------------------------------------------------
1.		0x04		        number of servers  (we can make this a mask...)
         Note: specify the servers to be polled..
2.		0x08			debug-register 0
3.		0x08			debug-register 1

4 to 7 are unused.
--------------------------------------------------------------
      Rx queue register set for server 0
8               0x20            Rx Q for server 0  physical_address[35:32]
9               0x24            Rx Q for server 0  physical address[31:0]
10              0x28            Rx Q for server 0  lock physical address[35:32]
11              0x2c            Rx Q for server 0  lock physical address[31:0]
12              0x30            Rx Q for server 0  buf  physical address[35:32]
13              0x34            Rx Q for server 0  buf  physical address[31:0]
14              0x38            Rx Q for server 0  reserved for future use.
15              0x3c            Rx Q for server 0  reserved for future use.

 .... up to 8 Rx queue sets for servers 1,...,7

        indices 16-23     for server 1
                24-31     for server 2
                32-39     for server 3
                40-47     for server 4
                48-55     for server 5
                56-63     for server 6
                64-71     for server 7
                72-79     for server 8

	Note: policy to be used to write packet pointer into 
		server queue?

------------------------------------------------------------
80-127 unused.
------------------------------------------------------------
      Tx queues for server 0 (8 registers for each Tx-queue)
128              0x400            Tx Q for server 0  physical_address[35:32]
129              0x404            Tx Q for server 0  physical address[31:0]
130              0x408            Tx Q for server 0  lock physical address[35:32]
131              0x40c            Tx Q for server 0  lock physical address[31:0]
132              0x410            Tx Q for server 0  buf  physical address[35:32]
133              0x414            Tx Q for server 0  buf  physical address[31:0]
134              0x418            Tx Q for server 0  reserved for future use.
135              0x41c            Tx Q for server 0  reserved for future use.

 .... up to 8 Tx queue sets for servers 1,...,7

        indices 136-143     for server 1
                144-151     for server 2
                152-159     for server 3
                160-167     for server 4
                168-175     for server 5
                176-183     for server 6
                184-191     for server 7
                192-199     for server 8

	Note:  these queues will be polled by the NIC to
             determine packets to be forwarded.
-------------------------------------------------------------
      Address of FreeQueue (2 registers)
-------------------------------------------------------------
200             0x320            Base address of free Queue [35:4]
201             0x324            Base address of free Queue [31:0]
202             0x328            Lock address for free Queue [35:4]
203             0x32c            Lock address for free Queue [31:0]
204             0x328            Buf address for free Queue [35:4]
205             0x330            Buf address for free Queue [31:0]
206		unused
207		unused

-------------------------------------------------------------
      MAC address 48 bits (ie, two registers)
-------------------------------------------------------------
208             0x33c            MAC_ADDR[31:0]
209             0x340            {unused,MAC_ADDR[47:32]}
---------------------------------------------------
210	  	0x344		Count of packets transmitted
				by NIC [31:0]
211	 	0x348		Count of packets received 
				by NIC [31:0]
212		0x34c           Status word
				[31:2] unused
				[0] set if NIC has started (controlreg[0] = 1)


-------------------------------------------------------------
		Address of FreeQueue_Tx (2 registers)
-------------------------------------------------------------
213             0x320            Base address of free Queue Tx [35:4]
214             0x324            Base address of free Queue Tx [31:0]
215             0x328            Lock address for free Queue Tx [35:4]
216             0x32c            Lock address for free Queue Tx [31:0]
217             0x328            Buf address for free Queue Tx [35:4]
218             0x330            Buf address for free Queue Tx [31:0]
219		unused
220		unused


221-255 unused.
 Register file (depth = 255) (width = 32)

